<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一页书</title>
  
  <subtitle>你永远不会过度准备</subtitle>
  <link href="https://www.aliang.link/atom.xml" rel="self"/>
  
  <link href="https://www.aliang.link/"/>
  <updated>2023-04-01T09:18:23.000Z</updated>
  <id>https://www.aliang.link/</id>
  
  <author>
    <name>aliang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>什么是原码、反码、补码</title>
    <link href="https://www.aliang.link/blog/230401.html"/>
    <id>https://www.aliang.link/blog/230401.html</id>
    <published>2023-04-01T09:18:23.000Z</published>
    <updated>2023-04-01T09:18:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>在计算机中，原码、反码、补码是表示有符号整数的三种二进制编码方式。<strong>在Java中，整数默认采用补码进行运算。</strong></p><h3 id="什么是二进制">什么是二进制</h3><p>二进制是一种计数系统，它<strong>由两个数字 0 和 1 组成</strong>。在计算机科学中，二进制常被用于表示计算机中的数字、字符和指令。每一位二进制数字称为一个位(bit)，每八位(bit)组成一个字节(byte)。在二进制中，每个位(bit)只有两种状态，即0和1，这和十进制中每个数字有10种状态是不同的。因此，二进制可以被看作是一种基于二元逻辑的数学运算方式，也是计算机科学中最基本、最重要的基础。</p><p>二进制分为：</p><pre class="language-java" data-language="java"><code class="language-java"> <span class="token number">8</span>位（<span class="token number">0000</span> <span class="token number">0000</span>）<span class="token number">16</span>位（<span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span>）<span class="token number">32</span>位（<span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span>）<span class="token number">64</span>位（<span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span>）</code></pre><span id="more"></span><p>举例：<br>0 对应的8位二进制数 = 0000 0000<br>1 对应的8位二进制数 = 0000 0001<br>3（2+1） 对应的8位二进制数 = 0000 0011<br>5（4+1） 对应的8位二进制数 = 0000 0101</p><p>那么就可以理解为：0的原码是0000 0000，1的原码是0000 0001，3的原码是0000 0011</p><h3 id="原码">原码</h3><p>原码是最简单的表示方式，它的表示方法是用<strong>第一位表示符号，0表示正数，1表示负数，其余位表示数值的绝对值</strong>。</p><p>例如，8位原码表示法中，+5的原码为 00000101，-5的原码为 10000101。</p><h3 id="反码">反码</h3><p>反码是为了解决原码的符号位参与运算的问题而提出的一种表示方式。</p><p><strong>正数的反码与原码相同，负数的反码是对其原码除符号位之外的各位取反（0变成1，1变成0）。</strong></p><p>例如，8位反码表示法中，+5的反码为 00000101，-5的反码为 11111010。</p><h3 id="补码">补码</h3><p>补码是为了解决反码表示法中存在的“0有两个编码”的问题而提出的一种表示方式。</p><p><strong>正数的补码与原码和反码相同（三码合一），负数的补码是在其反码的基础上加1。</strong></p><p>例如，8位补码表示法中，+5的补码为 00000101，-5的补码为 11111011。</p><h2 id="转换过程">转换过程</h2><h3 id="从原码转换为反码：">从原码转换为反码：</h3><p>对于正数而言，直接使用原码作为反码。<br>对于负数而言，将其原码的除符号位之外的各位取反。</p><h3 id="从反码转换为补码：">从反码转换为补码：</h3><p>对于正数而言，直接使用反码作为补码。<br>对于负数而言，将其反码加1得到补码。</p><h3 id="从补码转换为反码和原码：">从补码转换为反码和原码：</h3><p>对于正数而言，补码的反码和原码都与补码相同。<br>对于负数而言，补码的反码是在其基础上减1，原码则是符号位不变，其余位与反码相同。</p><h2 id="为什么使用补码？">为什么使用补码？</h2><p>使用补码表示数值，能够有效地解决负数在计算机中的表示问题，避免了原码和反码的运算符号位参与运算的问题，同时也避免了反码存在两个0的问题。因此，在计算机中使用补码表示数值是一种比较常见的表示方式。</p><h2 id="总结">总结</h2><div class="note info"><ol><li>二进制最高位（最左边）是符号位：0表示正数，1表示负数</li><li>正数的原码、反码、补码都一样（正数三码合一）</li><li>0的反码、补码都是0</li><li>负数的反码=原码符号位不变，其他位取反（0-&gt;1，1-&gt;0）</li><li>负数的补码=反码+1</li><li>负数的反码=负数的补码-1</li><li>Java中没有无符号数（Java中的数都是有符号的）</li><li>在计算机运算中，都是<strong>以补码的方式来运算</strong>的</li><li>当我们看运算结果时，要看原码</li></ol></div><p>例如：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">-</span><span class="token number">5</span> 的原码： <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>  <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">5</span> 的反码： <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span>  <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token operator">-</span><span class="token number">5</span> 的补码： <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span>  <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> </code></pre><h2 id="致谢：">致谢：</h2><ol><li><a href="https://chat.openai.com/">ChatGPT</a></li><li><a href="https://blog.csdn.net/Yangyuqing_/article/details/123717495">https://blog.csdn.net/Yangyuqing_/article/details/123717495</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;在计算机中，原码、反码、补码是表示有符号整数的三种二进制编码方式。&lt;strong&gt;在Java中，整数默认采用补码进行运算。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;什么是二进制&quot;&gt;什么是二进制&lt;/h3&gt;
&lt;p&gt;二进制是一种计数系统，它&lt;strong&gt;由两个数字 0 和 1 组成&lt;/strong&gt;。在计算机科学中，二进制常被用于表示计算机中的数字、字符和指令。每一位二进制数字称为一个位(bit)，每八位(bit)组成一个字节(byte)。在二进制中，每个位(bit)只有两种状态，即0和1，这和十进制中每个数字有10种状态是不同的。因此，二进制可以被看作是一种基于二元逻辑的数学运算方式，也是计算机科学中最基本、最重要的基础。&lt;/p&gt;
&lt;p&gt;二进制分为：&lt;/p&gt;
&lt;pre class=&quot;language-java&quot; data-language=&quot;java&quot;&gt;&lt;code class=&quot;language-java&quot;&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;位（&lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt;）
&lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;位（&lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt;）
&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;位（&lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt;）
&lt;span class=&quot;token number&quot;&gt;64&lt;/span&gt;位（&lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0000&lt;/span&gt;）&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.aliang.link/Java/"/>
    
    
    <category term="Java" scheme="https://www.aliang.link/tags/Java/"/>
    
    <category term="编程" scheme="https://www.aliang.link/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="原码" scheme="https://www.aliang.link/tags/%E5%8E%9F%E7%A0%81/"/>
    
    <category term="反码" scheme="https://www.aliang.link/tags/%E5%8F%8D%E7%A0%81/"/>
    
    <category term="补码" scheme="https://www.aliang.link/tags/%E8%A1%A5%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>IDEA高效设置</title>
    <link href="https://www.aliang.link/blog/221210.html"/>
    <id>https://www.aliang.link/blog/221210.html</id>
    <published>2022-12-10T10:18:01.000Z</published>
    <updated>2022-12-11T10:18:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文基于IntelliJ IDEA 2022.3 (Ultimate Edition)，操作系统：win10。</p></blockquote><h3 id="界面字体配置">界面字体配置</h3><p><img data-src="/assets/img/2022/20221206.png" alt="界面字体配置"></p><span id="more"></span><h3 id="代码字体配置">代码字体配置</h3><p><img data-src="/assets/img/2022/20221207.png" alt="代码字体配置"></p><h3 id="自动导包配置">自动导包配置</h3><p><img data-src="/assets/img/2022/20221208.png" alt="自动导包配置"></p><h3 id="自动提示忽略大小写敏感">自动提示忽略大小写敏感</h3><p><img data-src="/assets/img/2022/20221211.png" alt="自动提示忽略大小写敏感"></p><h3 id="版本控制的目录颜色随文件变化">版本控制的目录颜色随文件变化</h3><p><img data-src="/assets/img/2022/20221212.png" alt="版本控制的目录颜色随文件变化"></p><h3 id="自定义创建Live-Templates代码模板">自定义创建Live Templates代码模板</h3><p><img data-src="/assets/img/2022/20221217.png" alt="自定义创建Live Templates代码模板"><br>Live Templates代码模板</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> $var1$<span class="token punctuation">(</span>$var2$<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    $var3$<span class="token punctuation">&#125;</span>$<span class="token constant">END</span>$</code></pre><h3 id="创建文件时，自动生成作者信息">创建文件时，自动生成作者信息</h3><p><img data-src="/assets/img/2022/20221213.png" alt="创建文件时，自动生成作者信息"><br>模板示例：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @Description: $Description * @Author: aliang * @Date: $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; $&#123;TIME&#125; */</span></code></pre><h3 id="显示方法分割线">显示方法分割线</h3><p><img data-src="/assets/img/2022/20221214.png" alt="显示方法分割线"></p><h3 id="取消tab页单行显示">取消tab页单行显示</h3><p><img data-src="/assets/img/2022/20221209.png" alt="取消tab页单行显示"><br><img data-src="/assets/img/2022/20221216.png" alt="双行显示"></p><h3 id="双斜杠注释改成紧跟代码头">双斜杠注释改成紧跟代码头</h3><p><img data-src="/assets/img/2022/20221210.png" alt="双斜杠注释改成紧跟代码头"></p><h3 id="配置导入导出">配置导入导出</h3><p><img data-src="/assets/img/2022/20221215.png" alt="配置导入导出"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文基于IntelliJ IDEA 2022.3 (Ultimate Edition)，操作系统：win10。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;界面字体配置&quot;&gt;界面字体配置&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&quot;/assets/img/2022/20221206.png&quot; alt=&quot;界面字体配置&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术文档" scheme="https://www.aliang.link/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="技术文档" scheme="https://www.aliang.link/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    <category term="IDEA" scheme="https://www.aliang.link/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>IDEA插件推荐</title>
    <link href="https://www.aliang.link/blog/221203.html"/>
    <id>https://www.aliang.link/blog/221203.html</id>
    <published>2022-12-03T10:18:01.000Z</published>
    <updated>2022-12-10T10:18:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文基于IntelliJ IDEA 2022.3 (Ultimate Edition)，操作系统：win10。</p></blockquote><p>IDEA安装之后，安装以下插件提升十倍效率。</p><h3 id="MyBatisCodeHelperPro"><a href="https://plugins.jetbrains.com/plugin/14522-mybatiscodehelperpro-marketplace-edition-">MyBatisCodeHelperPro</a></h3><p>MyBatisCodeHelperPro是java mybatis框架插件，提供自动补全检查，代码生成，让mybatis简单易用。</p><span id="more"></span><p><img data-src="https://plugins.jetbrains.com/files/14522/screenshot_13d6e0a9-b6dc-48be-a2ae-4872a5d4700f" alt="MyBatisCodeHelperPro"></p><h3 id="GsonFormatPlus"><a href="https://plugins.jetbrains.com/plugin/14949-gsonformatplus">GsonFormatPlus</a></h3><p>这是一个可以从 Json String 生成 Json 模型的插件</p><p><img data-src="https://plugins.jetbrains.com/files/14949/screenshot_23132.png" alt="GsonFormatPlus"></p><h3 id="GenerateAllSetter"><a href="https://plugins.jetbrains.com/plugin/9360-generateallsetter">GenerateAllSetter</a></h3><p>一键调用一个对象的所有的set方法的插件。</p><p><img data-src="https://plugins.jetbrains.com/files/9360/screenshot_e78fe3c8-3cf1-488c-8c85-9c21f23e91b4" alt="GenerateAllSetter"></p><h3 id="CamelCase"><a href="https://plugins.jetbrains.com/plugin/7160-camelcase">CamelCase</a></h3><p>一个驼峰命名和下划线命名转换的插件。</p><p>WIN：<kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>U</kbd><br>MAC：<kbd>⇧</kbd> + <kbd>⌥</kbd> + <kbd>U</kbd></p><h3 id="Maven-Helper"><a href="https://plugins.jetbrains.com/plugin/7179-maven-helper">Maven Helper</a></h3><p>一个分析和排除Maven冲突依赖关系的插件。</p><p><img data-src="https://plugins.jetbrains.com/files/7179/screenshot_15119.png" alt="Maven Helper"></p><h3 id="Rainbow-Brackets"><a href="https://plugins.jetbrains.com/files/10080/screenshot_bcef9073-9605-4c10-90e9-ca8e0063926f">Rainbow Brackets</a></h3><p>彩虹括号，各种鲜明颜色的括号</p><p><img data-src="https://plugins.jetbrains.com/files/10080/screenshot_17373.png" alt="Rainbow Brackets"></p><h3 id="CodeGlance-Pro"><a href="https://plugins.jetbrains.com/plugin/18824-codeglance-pro">CodeGlance Pro</a></h3><p>将类似于 Sublime 中的代码小地图嵌入到编辑器窗格中。</p><p><img data-src="https://plugins.jetbrains.com/files/18824/screenshot_c86a0fcb-9858-4471-9318-4c525c4d27c9" alt="CodeGlance Pro"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文基于IntelliJ IDEA 2022.3 (Ultimate Edition)，操作系统：win10。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;IDEA安装之后，安装以下插件提升十倍效率。&lt;/p&gt;
&lt;h3 id=&quot;MyBatisCodeHelperPro&quot;&gt;&lt;a href=&quot;https://plugins.jetbrains.com/plugin/14522-mybatiscodehelperpro-marketplace-edition-&quot;&gt;MyBatisCodeHelperPro&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;MyBatisCodeHelperPro是java mybatis框架插件，提供自动补全检查，代码生成，让mybatis简单易用。&lt;/p&gt;</summary>
    
    
    
    <category term="技术文档" scheme="https://www.aliang.link/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="技术文档" scheme="https://www.aliang.link/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    <category term="IDEA" scheme="https://www.aliang.link/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>IntelliJ IDEA 2022.3安装激活</title>
    <link href="https://www.aliang.link/blog/221126.html"/>
    <id>https://www.aliang.link/blog/221126.html</id>
    <published>2022-11-26T10:18:01.000Z</published>
    <updated>2022-12-10T10:18:01.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文基于IntelliJ IDEA 2022.3 (Ultimate Edition)，操作系统：win10。</p></blockquote><h3 id="安装包下载">安装包下载</h3><p><a href="https://www.jetbrains.com/idea/download">官网下载</a>.exe安装文件<br><img data-src="/assets/img/2022/20221201.png" alt="官网下载"></p><span id="more"></span><h3 id="下载破解包">下载破解包</h3><p>下载安装完成后先不要打开，去<a href="https://jetbra.in/s">热心大佬的网站</a>下载破解包<br><img data-src="/assets/img/2022/20221202.png" alt="下载jetbra.zip"></p><h3 id="配置文件">配置文件</h3><p>下载<code>jetbra.zip</code>完成后解压，放到一个不会删除的目录，执行 <code>jetbra\scripts\install-all-users.vbs</code><br><img data-src="/assets/img/2022/20221203.png" alt="执行配置文件"></p><h3 id="复制激活码">复制激活码</h3><p>选择激活的软件或插件，复制激活码<br><img data-src="/assets/img/2022/20221204.png" alt="复制激活码"></p><h3 id="激活完成">激活完成</h3><p>打开IDEA选择激活码激活，填写激活码，激活完成。（付费插件也能激活）<br><img data-src="/assets/img/2022/20221205.png" alt="激活"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文基于IntelliJ IDEA 2022.3 (Ultimate Edition)，操作系统：win10。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安装包下载&quot;&gt;安装包下载&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jetbrains.com/idea/download&quot;&gt;官网下载&lt;/a&gt;.exe安装文件&lt;br&gt;
&lt;img data-src=&quot;/assets/img/2022/20221201.png&quot; alt=&quot;官网下载&quot;&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术文档" scheme="https://www.aliang.link/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="技术文档" scheme="https://www.aliang.link/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    <category term="IDEA" scheme="https://www.aliang.link/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Java动态代理</title>
    <link href="https://www.aliang.link/blog/220818.html"/>
    <id>https://www.aliang.link/blog/220818.html</id>
    <published>2022-08-18T10:41:35.000Z</published>
    <updated>2022-11-22T07:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是动态代理">什么是动态代理</h2><blockquote><p>动态代理就是在 <strong>程序运行期</strong> ，创建目标对象的 <strong>代理对象</strong> ，对 <strong>目标对象</strong> 中的 <strong>方法</strong> 进行 <strong>功能性增强</strong> 的一种技术</p></blockquote><p>核心概念：<br>动态代理能够让真实对象专注于自己的核心功能，让代理对象拦截客户对真实对象的访问，另外可以在不修改方法源码的情况下，增强被代理对象的方法的功能。</p><p>我们在做项目的时候把日志和异常统一处理就是利用了动态代理，让我们能够关注核心业务。</p><p>举个例子，小明（真实角色）的主要业务是唱歌，在还没火的时候自己跑东跑西去街头、酒吧等地方唱歌，在这期间需要自己负责找合适的场地，以及和酒吧老板谈工资等业务，突然有一天他火了，很多人要请他唱歌，所有的事亲历亲为他根本忙不过来，这个时候经纪人（代理角色）出现了，客户们要请小明唱歌，不能直接找到小明了，而是需要和经纪人谈，经纪人在商业等方面的理解比小明强（对代理对象的方法增强）。这样小明就可以专注于自己的唱歌业务了，经纪人的存在就是拦截了客户对小明（真实对象）的访问。</p><span id="more"></span><h2 id="动态代理的常用方式">动态代理的常用方式</h2><ol><li>JDK动态代理：JDK自带的动态代理功能（基于接口的动态代理），它的实现前提是现有类必须拥有一个接口，因为它是通过 <strong>对现有类接口的实现</strong> 来完成的。</li><li>CGLIB代理：一个开源工具包（基于类的动态代理），它的实现是通过 <strong>继承现有类</strong> ，然后 <strong>重写现有类的方法</strong> 实现的。</li></ol><h2 id="JDK动态代理">JDK动态代理</h2><div class="note info"><p>在java的 <code>java.lang.reflect</code> 包下提供了一个 <code>Proxy</code> 类和一个 <code>InvocationHandler</code> 接口，通过这个类和这个接口可以生成JDK动态代理类和动态代理对象。</p></div><h3 id="代码实现">代码实现</h3><p>我们以上述小明故事的场景，代理对象代理了小明的谈演出费的方法，看看具体怎么实现</p><ol><li>首先定义一个接口，这个接口是一个公共接口，这个接口有一个talk()方法</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//谈薪</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><ol start="2"><li>创建真实对象，实现上述接口，那么代理对象需要代理的就是这个接口</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoMing</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小明成功收取唱歌费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>创建BrokerInvocationHandler类，这个类实现了 <code>InvocationHandler</code> 接口，我们通过这个类来动态生成代理类，InvocationHandler中有一个 <code>invoke</code> 方法，所有执行代理对象的方法都会被替换成执行invoke方法。然后通过反射在invoke方法中执行代理类的方法。在代理过程中，在执行代理类的方法前或者后可以执行自己的操作，这就是spring aop的主要原理。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//用这个类自动生成代理类（这个并不是代理类，我们通过这个生成代理类）</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrokerInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//被代理的接口</span>    <span class="token keyword">private</span> <span class="token class-name">Person</span> person<span class="token punctuation">;</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>person <span class="token operator">=</span> person<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//生成得到代理类 固定的代码</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     *处理代理实例并返回结果     * @param proxy：代表动态代理对象     * @param method：代表正在执行的方法     * @param args：代表调用目标方法时传入的实参     * @return     * @throws Throwable     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//代理过程中插入其他操作 对方法的增强</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户和经纪人交流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//动态代理本质就是使用反射机制！！如下</span>        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="4"><li>创建客户对象，通过BrokerInvocationHandler生成代理对象，客户通过访问代理对象实现谈薪</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//真实角色</span>        <span class="token class-name">XiaoMing</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//代理角色：现在没有 先得到BrokerInvocationHandler对象</span>        <span class="token class-name">BrokerInvocationHandler</span> bid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrokerInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过调用程序处理角色来处理我们要调用的接口对象（知道我们要调用的是实现这个接口的哪个对象）</span>        bid<span class="token punctuation">.</span><span class="token function">setPerson</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//得到代理对象</span>        <span class="token class-name">Person</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> bid<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里的proxy是动态生成的，我们并未写!!</span>        proxy<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="5"><li>输出结果如下</li></ol><pre class="language-java" data-language="java"><code class="language-java">客户和经纪人交流小明成功收取唱歌费</code></pre><h3 id="小结">小结</h3><p>可以看到，代理对象成功代理了小明的talk()方法；</p><blockquote><p>JDK动态代理首先需要创建一个interface然后一个class实现这个interface，然后对这个class进行代理，这个class必须实现至少一个接口，否则不能进行代理。</p></blockquote><div class="note info"><h4 id="JDK动态代理实现步骤总结">JDK动态代理实现步骤总结</h4><ol><li>实现 <code>InvocationHandler</code> 接口，将我们具体地增强逻辑代码写在 <code>invoke()</code> 方法中</li><li>使用 <code>Proxy</code> 类的 <code>newProxyInstance()</code> 方法去创建一个代理类的实例对象.</li><li>使用这个代理类对象</li></ol></div><h2 id="CGLIB动态代理">CGLIB动态代理</h2><p>JDK动态代理需要被代理类实现接口，如果被代理类没有实现接口，就只能使用CGLib了。</p><p>这种代理方式就叫做CGlib代理。</p><p>CGlib代理也叫作子类代理，他是通过在内存中构建一个子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，然后加入自己需要的操作。</p><p>因为使用的是继承的方式，所以不能代理final 类。</p><blockquote><p>CGLIB是一个功能强大，高性能的 <code>代码生成包</code> （CGLIB就是用来生成代码的，它也是在内存中动态的去生成的）</p></blockquote><h3 id="代码实现-2">代码实现</h3><p>同样以上述小明故事的场景，代理对象代理了小明的谈演出费的方法，看看具体怎么实现</p><ol><li>CGLIB是第三方提供的包，所以我们需要在maven工程中引入对应jar包</li></ol><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--CGLIB--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>2.新建被代理类，此时并不需要再新建接口，因为我们现在是要使用CGLIB进行代理</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoMing</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小明成功收取唱歌费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="3"><li>继续创建BrokerInvocationHandler类，这个类实现了 <code>MethodInterceptor</code> 接口，我们通过这个类来动态生成代理类，此时，获得的代理类就是目标对象所属类的子类。</li></ol><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">Enhancer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodProxy</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrokerInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//被代理类</span>    <span class="token keyword">private</span> <span class="token class-name">XiaoMing</span> xiaoMing<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setXiaoMing</span><span class="token punctuation">(</span><span class="token class-name">XiaoMing</span> xiaoMing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>xiaoMing <span class="token operator">=</span> xiaoMing<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//生成得到代理类 固定的代码</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// 1. 创建Enhancer类对象，它类似于JDK动态代理中的Proxy类，该类就是用来获取代理对象的</span>        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 2. 设置父类的字节码对象。为啥子要这样做呢？因为使用CGLIB生成的代理类是属于目标类的子类的，也就是说代理类是要继承自目标类的</span>        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>xiaoMing<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 3. 设置回调函数</span>        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 4. 创建代理对象</span>        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//代理过程中插入其他操作 对方法的增强</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户和经纪人交流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>xiaoMing<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>```  <span class="token number">4.</span> 创建测试类测试```java<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//真实角色</span>        <span class="token class-name">XiaoMing</span> xiaoMing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//代理角色：现在没有 先得到BrokerInvocationHandler对象</span>        <span class="token class-name">BrokerInvocationHandler</span> brokerInvocationHandler <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BrokerInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        brokerInvocationHandler<span class="token punctuation">.</span><span class="token function">setXiaoMing</span><span class="token punctuation">(</span>xiaoMing<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//得到代理对象</span>        <span class="token class-name">XiaoMing</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">XiaoMing</span><span class="token punctuation">)</span> brokerInvocationHandler<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><ol start="5"><li>输出结果如下</li></ol><pre class="language-java" data-language="java"><code class="language-java">客户和经纪人交流小明成功收取唱歌费</code></pre><h3 id="小结-2">小结</h3><p>可以看到，代理对象同样成功代理了小明的talk()方法；</p><blockquote><p>CGLIB动态代理不需要创建一个interface，代理的class不需要实现接口。</p></blockquote><div class="note info"><h4 id="CGLIB动态代理实现步骤总结">CGLIB动态代理实现步骤总结</h4><ol><li>实现 <code>MethodInterceptor</code> 接口，将我们具体地增强逻辑代码写在 <code>intercept()</code> 方法中</li><li>使用 <code>Enhancer.create()</code> 方法去创建一个代理类的实例对象.</li><li>使用这个代理类对象</li></ol></div><h2 id="实现原理、优缺点、两者区别">实现原理、优缺点、两者区别</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:left">JDK</th><th style="text-align:left">CGLIB</th></tr></thead><tbody><tr><td style="text-align:center">实现原理</td><td style="text-align:left">JDK动态代理是由Java内部的反射机制来实现的，它是JDK原生就支持的一种代理方式，它的实现原理，就是通过让target类和代理类实现同一接口，代理类持有target对象，来达到方法拦截的作用，这样通过接口的方式有两个弊端，一个是必须保证target类有接口，第二个是如果想要对target类的方法进行代理拦截，那么就要保证这些方法都要在接口中声明，实现上略微有点限制。</td><td style="text-align:left">CGLIB动态代理是通过继承来实现的，底层则是借助asm(Java 字节码操控框架)来实现的（采用字节码的方式，给A类创建一个子类B，子类B使用方法拦截的技术拦截所有父类的方法调用）。</td></tr><tr><td style="text-align:center">优缺点</td><td style="text-align:left">JDK动态代理有一定的局限性，只能基于接口。</td><td style="text-align:left">CGLIB这种第三方类库实现的动态代理应用更加广泛，且在效率上更有优势。但无法处理final的情况，因为它通过继承实现。</td></tr><tr><td style="text-align:center">两者区别</td><td style="text-align:left">JDK动态代理只能对实现了接口的类生成代理，而不能针对类。</td><td style="text-align:left">CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法，但不能代理final修饰的类。</td></tr></tbody></table><h2 id="参考链接">参考链接</h2><ol><li><a href="https://blog.csdn.net/weixin_61543601/article/details/124656001" title="点我查看">https://blog.csdn.net/weixin_61543601/article/details/124656001</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是动态代理&quot;&gt;什么是动态代理&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;动态代理就是在 &lt;strong&gt;程序运行期&lt;/strong&gt; ，创建目标对象的 &lt;strong&gt;代理对象&lt;/strong&gt; ，对 &lt;strong&gt;目标对象&lt;/strong&gt; 中的 &lt;strong&gt;方法&lt;/strong&gt; 进行 &lt;strong&gt;功能性增强&lt;/strong&gt; 的一种技术&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;核心概念：&lt;br&gt;
动态代理能够让真实对象专注于自己的核心功能，让代理对象拦截客户对真实对象的访问，另外可以在不修改方法源码的情况下，增强被代理对象的方法的功能。&lt;/p&gt;
&lt;p&gt;我们在做项目的时候把日志和异常统一处理就是利用了动态代理，让我们能够关注核心业务。&lt;/p&gt;
&lt;p&gt;举个例子，小明（真实角色）的主要业务是唱歌，在还没火的时候自己跑东跑西去街头、酒吧等地方唱歌，在这期间需要自己负责找合适的场地，以及和酒吧老板谈工资等业务，突然有一天他火了，很多人要请他唱歌，所有的事亲历亲为他根本忙不过来，这个时候经纪人（代理角色）出现了，客户们要请小明唱歌，不能直接找到小明了，而是需要和经纪人谈，经纪人在商业等方面的理解比小明强（对代理对象的方法增强）。这样小明就可以专注于自己的唱歌业务了，经纪人的存在就是拦截了客户对小明（真实对象）的访问。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.aliang.link/Java/"/>
    
    
    <category term="Java" scheme="https://www.aliang.link/tags/Java/"/>
    
    <category term="编程" scheme="https://www.aliang.link/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="动态代理" scheme="https://www.aliang.link/tags/%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>神奇的正则表达式</title>
    <link href="https://www.aliang.link/blog/220629.html"/>
    <id>https://www.aliang.link/blog/220629.html</id>
    <published>2022-06-29T10:41:35.000Z</published>
    <updated>2022-11-22T07:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是正则表达式-？">1. 什么是正则表达式 ？</h2><p>  正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。 --&gt; <a href="https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin" title="点我去百度百科">百度百科</a><br>  简单来说就是用 <strong>特殊字符</strong> 组成的 <strong>有一定规则</strong> 的逻辑公式(规则字符串)，主要用于对字符串进行过滤操作。</p><h2 id="2-正则表达式的三个功能-：">2. 正则表达式的三个功能 ：</h2><ul><li>快速 <strong><code>匹配</code></strong> 指定的字符串；</li><li><strong><code>替换</code></strong> 遵照正则表达式规则的字符串；</li><li>在目标字符串中 <strong><code>筛选</code></strong> 指定的子字符串；</li></ul><span id="more"></span><h2 id="3-正则表达式的语法：">3. 正则表达式的语法：</h2><p>  正则表达式是由 <strong><code>普通字符</code></strong> (例如:a-z)和 <strong><code>元字符</code></strong> (特殊字符)组成的文字模式，正则表达式作为一个模板(规则字符串,将目标字符串与所搜索的字符串进行匹配)</p><h2 id="4-常用元字符：">4. 常用元字符：</h2><h3 id="4-1-限定符">4.1 限定符</h3><table><thead><tr><th style="text-align:center">限定符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">?</td><td style="text-align:center">零次或一次匹配前面的字符或子表达式，相当于{0,1}</td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">零次或多次匹配前面字符或子表达式，相当于{0,}</td></tr><tr><td style="text-align:center">+</td><td style="text-align:center">一次或多次匹配前面字符或子表达式，相当于{1,}</td></tr><tr><td style="text-align:center">{n}</td><td style="text-align:center">匹配n次</td></tr><tr><td style="text-align:center">{n,}</td><td style="text-align:center">匹配至少n次</td></tr><tr><td style="text-align:center">{n,m}</td><td style="text-align:center">匹配n到m次</td></tr></tbody></table><h3 id="4-2-匹配符">4.2 匹配符</h3><table><thead><tr><th style="text-align:center">匹配符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">\d</td><td style="text-align:center">数字字符匹配，等效于[0-9]</td></tr><tr><td style="text-align:center">\D</td><td style="text-align:center">非数字字符匹配，等效于[^0-9]</td></tr><tr><td style="text-align:center">\w</td><td style="text-align:center">匹配任何字类字符，等效于[A-Za-z0-9]</td></tr><tr><td style="text-align:center">\W</td><td style="text-align:center">匹配任何非字类字符，等效于[<sup>A-Z</sup>a-z^0-9]</td></tr><tr><td style="text-align:center">\f</td><td style="text-align:center">换页符匹配</td></tr><tr><td style="text-align:center">\n</td><td style="text-align:center">换行符匹配</td></tr><tr><td style="text-align:center">\r</td><td style="text-align:center">匹配一个回车符</td></tr><tr><td style="text-align:center">\s</td><td style="text-align:center">匹配任何空白字符</td></tr><tr><td style="text-align:center">\S</td><td style="text-align:center">匹配任何非空白字符</td></tr><tr><td style="text-align:center">\t</td><td style="text-align:center">制表符匹配</td></tr></tbody></table><h3 id="4-3-判断符">4.3 判断符</h3><table><thead><tr><th style="text-align:center">判断符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">x|y</td><td style="text-align:center">匹配x或y</td></tr><tr><td style="text-align:center">[xyz]</td><td style="text-align:center">匹配包含的任一字符</td></tr><tr><td style="text-align:center">[^xyz]</td><td style="text-align:center">反向匹配，匹配不包含任何字符</td></tr><tr><td style="text-align:center">[a-z]</td><td style="text-align:center">匹配指定范围的任何字符</td></tr></tbody></table><h3 id="4-4-定位符">4.4 定位符</h3><table><thead><tr><th style="text-align:center">定位符</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:center">匹配输入字符串起始位置</td></tr><tr><td style="text-align:center">$</td><td style="text-align:center">匹配输入字符串结尾位置</td></tr><tr><td style="text-align:center">\b</td><td style="text-align:center">匹配字和空格间的位置</td></tr><tr><td style="text-align:center">\B</td><td style="text-align:center">非字边界匹配</td></tr></tbody></table><h2 id="5-常用正则表达式">5. 常用正则表达式</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 数字 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">NUMBERS</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 字母 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">WORD</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[a-zA-Z]+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 英文字母 、数字和下划线 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">GENERAL</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^\\w+$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 单个中文汉字 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">CHINESE</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[\u4E00-\u9FFF]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 中文汉字 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">CHINESES</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[\u4E00-\u9FFF]"</span> <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 中文字、英文字母、数字和下划线 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">GENERAL_WITH_CHINESE</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^[\u4E00-\u9FFF\\w]+$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 分组 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">GROUP_VAR</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\$(\\d+)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 邮件，符合RFC 5322规范，正则来自：http://emailregex.com/ */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">EMAIL</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(?:[a-z0-9!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)])"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 移动电话 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">MOBILE</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(?:0|86|\\+86)?1[3456789]\\d&#123;9&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 18位身份证号码 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">CITIZEN_ID</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[1-9]\\d&#123;5&#125;[1-2]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([012]\\d)|3[0-1])\\d&#123;3&#125;(\\d|X|x)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 邮编 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">ZIP_CODE</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[1-9]\\d&#123;5&#125;(?!\\d)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 生日 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">BIRTHDAY</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^(\\d&#123;2,4&#125;)([/\\-.年]?)(\\d&#123;1,2&#125;)([/\\-.月]?)(\\d&#123;1,2&#125;)日?$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 时间正则 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Pattern</span> <span class="token constant">TIME</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\d&#123;1,2&#125;:\\d&#123;1,2&#125;(:\\d&#123;1,2&#125;)?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * URL */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[a-zA-z]+://[^\\s]*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * Http URL */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">URL_HTTP</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(https://|http://)?([\\w-]+\\.)+[\\w-]+(:\\d+)*(/[\\w- ./?%&amp;=]*)?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * UUID */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">UUID</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^[0-9a-z]&#123;8&#125;-[0-9a-z]&#123;4&#125;-[0-9a-z]&#123;4&#125;-[0-9a-z]&#123;4&#125;-[0-9a-z]&#123;12&#125;$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 不带横线的UUID */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">UUID_SIMPLE</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^[0-9a-z]&#123;32&#125;$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 货币 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">MONEY</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^(\\d+(?:\\.\\d+)?)$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * MAC地址正则 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Pattern</span> <span class="token constant">MAC_ADDRESS</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"((?:[A-F0-9]&#123;1,2&#125;[:-])&#123;5&#125;[A-F0-9]&#123;1,2&#125;)|(?:0x)(\\d&#123;12&#125;)(?:.+ETHER)"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 16进制字符串 */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Pattern</span> <span class="token constant">HEX</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^[a-f0-9]+$"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 中国车牌号码（兼容新能源车牌） */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">PLATE_NUMBER</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>        <span class="token string">"^(([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-Z](([0-9]&#123;5&#125;[ABCDEFGHJK])|([ABCDEFGHJK]([A-HJ-NP-Z0-9])[0-9]&#123;4&#125;)))|"</span> <span class="token operator">+</span>                <span class="token string">"([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领]\\d&#123;3&#125;\\d&#123;1,3&#125;[领])|"</span> <span class="token operator">+</span>                <span class="token string">"([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-Z][A-HJ-NP-Z0-9]&#123;4&#125;[A-HJ-NP-Z0-9挂学警港澳使领]))$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * 社会统一信用代码 * 第一部分：登记管理部门代码1位 (数字或大写英文字母) * 第二部分：机构类别代码1位 (数字或大写英文字母) * 第三部分：登记管理机关行政区划码6位 (数字) * 第四部分：主体标识码（组织机构代码）9位 (数字或大写英文字母) * 第五部分：校验码1位 (数字或大写英文字母) */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Pattern</span> <span class="token constant">CREDIT_CODE</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^[0-9A-HJ-NPQRTUWXY]&#123;2&#125;\\d&#123;6&#125;[0-9A-HJ-NPQRTUWXY]&#123;10&#125;$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * IP v4 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">IPV4</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\b((?!\\d\\d\\d)\\d+|1\\d\\d|2[0-4]\\d|25[0-5])\\.((?!\\d\\d\\d)\\d+|1\\d\\d|2[0-4]\\d|25[0-5])\\.((?!\\d\\d\\d)\\d+|1\\d\\d|2[0-4]\\d|25[0-5])\\.((?!\\d\\d\\d)\\d+|1\\d\\d|2[0-4]\\d|25[0-5])\\b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/** * IP v6 */</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">IPV6</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(([0-9a-fA-F]&#123;1,4&#125;:)&#123;7&#125;[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,7&#125;:|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,6&#125;:[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,5&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,2&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,3&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,3&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,2&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,5&#125;|[0-9a-fA-F]&#123;1,4&#125;:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,6&#125;)|:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,7&#125;|:)|fe80:(:[0-9a-fA-F]&#123;0,4&#125;)&#123;0,4&#125;%[0-9a-zA-Z]+|::(ffff(:0&#123;1,4&#125;)?:)?((25[0-5]|(2[0-4]|1?[0-9])?[0-9])\\.)&#123;3&#125;(25[0-5]|(2[0-4]|1?[0-9])?[0-9])|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;:((25[0-5]|(2[0-4]|1?[0-9])?[0-9])\\.)&#123;3&#125;(25[0-5]|(2[0-4]|1?[0-9])?[0-9]))"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="6-java中如何使用正则表达式">6. java中如何使用正则表达式</h2><h3 id="6-1-示例">6.1 示例</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>    <span class="token comment">/* 第一个反斜杠意为转义，\w意为匹配任何字类字符 &#123;3,&#125;意为至少匹配3次  */</span>    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"\\w&#123;3,&#125;"</span><span class="token punctuation">;</span>    <span class="token comment">/* 直接匹配 */</span>    <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"直接匹配："</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 构造相关类匹配 */</span>    <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造匹配："</span> <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* 替换、过滤 */</span>    <span class="token class-name">String</span> input <span class="token operator">=</span> <span class="token string">"hello &lt;b>Regular&lt;/b> &lt;i>Expression&lt;/i>"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> regex1 <span class="token operator">=</span> <span class="token string">"&lt;\\w+>|&lt;/\\w+>"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> output <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>regex1<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"替换过滤："</span> <span class="token operator">+</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="6-2-运行结果">6.2 运行结果</h3><pre class="language-java" data-language="java"><code class="language-java">直接匹配：<span class="token boolean">true</span>构造匹配：<span class="token boolean">true</span>替换过滤：hello <span class="token class-name">Regular</span> <span class="token class-name">Expression</span></code></pre><h2 id="7-参考链接">7. 参考链接</h2><ol><li><a href="https://blog.csdn.net/qq_36962569/article/details/80145139" title="点我查看原文">正则表达式基本语法总结</a></li><li><a href="https://www.cnblogs.com/hanhanhan/p/5785613.html" title="点我查看原文">正则表达式个人总结(一)：正则表达式语法的深入理解第一部分</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-什么是正则表达式-？&quot;&gt;1. 什么是正则表达式 ？&lt;/h2&gt;
&lt;p&gt;  正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。 --&amp;gt; &lt;a href=&quot;https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin&quot; title=&quot;点我去百度百科&quot;&gt;百度百科&lt;/a&gt;&lt;br&gt;
  简单来说就是用 &lt;strong&gt;特殊字符&lt;/strong&gt; 组成的 &lt;strong&gt;有一定规则&lt;/strong&gt; 的逻辑公式(规则字符串)，主要用于对字符串进行过滤操作。&lt;/p&gt;
&lt;h2 id=&quot;2-正则表达式的三个功能-：&quot;&gt;2. 正则表达式的三个功能 ：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;快速 &lt;strong&gt;&lt;code&gt;匹配&lt;/code&gt;&lt;/strong&gt; 指定的字符串；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;替换&lt;/code&gt;&lt;/strong&gt; 遵照正则表达式规则的字符串；&lt;/li&gt;
&lt;li&gt;在目标字符串中 &lt;strong&gt;&lt;code&gt;筛选&lt;/code&gt;&lt;/strong&gt; 指定的子字符串；&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.aliang.link/Java/"/>
    
    
    <category term="Java" scheme="https://www.aliang.link/tags/Java/"/>
    
    <category term="编程" scheme="https://www.aliang.link/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="正则表达式" scheme="https://www.aliang.link/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>GitHub高级搜索技巧</title>
    <link href="https://www.aliang.link/blog/220530.html"/>
    <id>https://www.aliang.link/blog/220530.html</id>
    <published>2022-05-30T06:27:01.000Z</published>
    <updated>2022-11-22T07:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GitHub高级搜索技巧">GitHub高级搜索技巧</h2><table><thead><tr><th style="text-align:left">语法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>in:name &lt;关键字&gt;</code></td><td style="text-align:left">仓库名称带关键字查询</td></tr><tr><td style="text-align:left"><code>in:description &lt;关键字&gt;</code></td><td style="text-align:left">仓库描述带关键字查询</td></tr><tr><td style="text-align:left"><code>in:readme &lt;关键字&gt;</code></td><td style="text-align:left">README文件带关键字查询</td></tr><tr><td style="text-align:left"><code>stars(fork): &gt;(=) &lt;数字&gt; &lt;关键字&gt;</code></td><td style="text-align:left">star或fork数大于(或等于)指定数字的带关键字查询</td></tr><tr><td style="text-align:left"><code>stars(fork): 10..20 &lt;关键词&gt;</code></td><td style="text-align:left">star或fork数在10到20之间的带关键字查询</td></tr><tr><td style="text-align:left"><code>size:&gt;=5000 &lt;关键词&gt;</code></td><td style="text-align:left">限定仓库大于等于5000K的带关键字查询</td></tr><tr><td style="text-align:left"><code>pushed(created):&gt;2019-11-15 &lt;关键字&gt;</code></td><td style="text-align:left">更新 或 创建 日期在2019年11月16日之后的带关键字查询</td></tr><tr><td style="text-align:left"><code>license:apache-2.0 &lt;关键字&gt;</code></td><td style="text-align:left">LICENSE为apache-2.0的带关键字查询</td></tr><tr><td style="text-align:left"><code>language:java &lt;关键词&gt;</code></td><td style="text-align:left">仓库语言为Java的带关键字查询</td></tr><tr><td style="text-align:left"><code>user:&lt;用户名&gt;</code></td><td style="text-align:left">查询某个用户的项目</td></tr><tr><td style="text-align:left"><code>org:&lt;组织名&gt;</code></td><td style="text-align:left">查询某个组织的项目</td></tr></tbody></table><span id="more"></span><p><strong>以上查询条件可组合使用，空格隔开</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 示例1：搜索仓库名包含javascript，并且stars数大于1000的项目</span>in:name javascript stars:<span class="token operator">></span><span class="token number">1000</span><span class="token comment"># 示例2：搜索描述中包含"小程序"，并且fork大于100，并且最近更新时间在2019-11-15之后的，并且使用开发语言为vue的项目</span>in:description 小程序 fork:<span class="token operator">></span><span class="token number">100</span> pushed:<span class="token operator">></span><span class="token number">2019</span>-11-15 language:vue</code></pre><h2 id="或使用高级搜索页搜索">或使用高级搜索页搜索</h2><p><a href="https://github.com/search/advanced">https://github.com/search/advanced</a></p><div class="note danger"><p>本文转自 <a href="https://xugaoyi.com/pages/4e8444e2d534d14f/">https://xugaoyi.com/pages/4e8444e2d534d14f/</a>，作者：xugaoyi。 <strong>如有不妥，请联系我删除</strong></p></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;GitHub高级搜索技巧&quot;&gt;GitHub高级搜索技巧&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;语法&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;in:name &amp;lt;关键字&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;仓库名称带关键字查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;in:description &amp;lt;关键字&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;仓库描述带关键字查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;in:readme &amp;lt;关键字&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;README文件带关键字查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;stars(fork): &amp;gt;(=) &amp;lt;数字&amp;gt; &amp;lt;关键字&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;star或fork数大于(或等于)指定数字的带关键字查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;stars(fork): 10..20 &amp;lt;关键词&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;star或fork数在10到20之间的带关键字查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;size:&amp;gt;=5000 &amp;lt;关键词&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;限定仓库大于等于5000K的带关键字查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;pushed(created):&amp;gt;2019-11-15 &amp;lt;关键字&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;更新 或 创建 日期在2019年11月16日之后的带关键字查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;license:apache-2.0 &amp;lt;关键字&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;LICENSE为apache-2.0的带关键字查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;language:java &amp;lt;关键词&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;仓库语言为Java的带关键字查询&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;user:&amp;lt;用户名&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;查询某个用户的项目&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;code&gt;org:&amp;lt;组织名&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;查询某个组织的项目&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary>
    
    
    
    <category term="技术文档" scheme="https://www.aliang.link/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="语法速查" scheme="https://www.aliang.link/tags/%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5/"/>
    
    <category term="GitHub" scheme="https://www.aliang.link/tags/GitHub/"/>
    
    <category term="技术文档" scheme="https://www.aliang.link/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    <category term="TeamSpeak3" scheme="https://www.aliang.link/tags/TeamSpeak3/"/>
    
  </entry>
  
  <entry>
    <title>npm常用命令</title>
    <link href="https://www.aliang.link/blog/220527.html"/>
    <id>https://www.aliang.link/blog/220527.html</id>
    <published>2022-05-27T06:27:01.000Z</published>
    <updated>2022-11-22T07:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p>npm是跟随node一起安装的包（模块）管理器。常见的使用场景有以下几种：</p><ul><li>允许用户从npm服务器下载别人编写的第三方包到本地使用。</li><li>允许用户从npm服务器下载并安装别人编写的命令行程序到本地使用。</li><li>允许用户将自己编写的包或命令行程序上传到npm服务器供别人使用。</li></ul><span id="more"></span><h2 id="常用命令">常用命令</h2><h4 id="检测是否安装及版本">检测是否安装及版本</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token parameter variable">-v</span> <span class="token comment"># 显示版本号说明已经安装相应的版本</span></code></pre><h4 id="生成package-json文件">生成package.json文件</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> init</code></pre><blockquote><p>package.json用来描述项目中用到的模块和其他信息</p></blockquote><h4 id="安装模块">安装模块</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token comment"># 安装package.json定义好的模块，简写 npm i</span><span class="token comment"># 安装包指定模块</span><span class="token function">npm</span> i <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span><span class="token comment"># 全局安装</span><span class="token function">npm</span> i <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> <span class="token parameter variable">-g</span> <span class="token comment"># 安装包的同时，将信息写入到package.json中的 dependencies 配置中</span><span class="token function">npm</span> i <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> <span class="token parameter variable">--save</span><span class="token comment"># 安装包的同时，将信息写入到package.json中的 devDependencies 配置中</span><span class="token function">npm</span> i <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> --save-dev<span class="token comment"># 安装多模块</span><span class="token function">npm</span> i <span class="token operator">&lt;</span>ModuleName<span class="token operator"><span class="token file-descriptor important">1</span>></span> <span class="token operator">&lt;</span>ModuleName<span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token comment"># 安装方式参数：</span><span class="token parameter variable">-save</span> <span class="token comment"># 简写-S，加入到生产依赖中</span>-save-dev <span class="token comment"># 简写-D，加入到开发依赖中</span><span class="token parameter variable">-g</span> <span class="token comment"># 全局安装 将安装包放在 /usr/local 下或者你 node 的安装目录</span></code></pre><h4 id="查看">查看</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看所有全局安装的包</span><span class="token function">npm</span> <span class="token function">ls</span> <span class="token parameter variable">-g</span><span class="token comment"># 查看本地项目中安装的包</span><span class="token function">npm</span> <span class="token function">ls</span><span class="token comment"># 查看包的 package.json文件</span><span class="token function">npm</span> view <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span><span class="token comment"># 查看包的依赖关系</span><span class="token function">npm</span> view <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> dependencies<span class="token comment"># 查看包的源文件地址</span><span class="token function">npm</span> view <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> repository.url<span class="token comment"># 查看包所依赖的node版本</span><span class="token function">npm</span> view <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> engines<span class="token comment"># 查看帮助</span><span class="token function">npm</span> <span class="token builtin class-name">help</span></code></pre><h4 id="更新模块">更新模块</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新本地模块</span><span class="token function">npm</span> update <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span><span class="token comment"># 更新全局模块</span><span class="token function">npm</span> update <span class="token parameter variable">-g</span> <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> <span class="token comment"># 更新全局软件包。</span><span class="token function">npm</span> update <span class="token parameter variable">-g</span> <span class="token comment"># 更新所有的全局软件包。</span><span class="token function">npm</span> outdated <span class="token parameter variable">-g</span> <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">0</span> <span class="token comment"># 找出需要更新的包。</span></code></pre><h4 id="卸载模块">卸载模块</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 卸载本地模块</span><span class="token function">npm</span> uninstall <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span><span class="token comment"># 卸载全局模块</span><span class="token function">npm</span> uninstall <span class="token parameter variable">-g</span> <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> <span class="token comment"># 卸载全局软件包。</span></code></pre><h4 id="清空缓存">清空缓存</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清空npm缓存</span><span class="token function">npm</span> cache <span class="token function">clear</span></code></pre><h4 id="使用淘宝镜像">使用淘宝镜像</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用淘宝镜像</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npm.taobao.org</code></pre><h4 id="其他">其他</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更改包内容后进行重建</span><span class="token function">npm</span> rebuild <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span><span class="token comment"># 检查包是否已经过时，此命令会列出所有已经过时的包，可以及时进行包的更新</span><span class="token function">npm</span> outdated<span class="token comment"># 访问npm的json文件，此命令将会打开一个网页</span><span class="token function">npm</span> <span class="token builtin class-name">help</span> json<span class="token comment"># 发布一个包的时候，需要检验某个包名是否存在</span><span class="token function">npm</span> search <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span><span class="token comment"># 撤销自己发布过的某个版本代码</span><span class="token function">npm</span> unpublish <span class="token operator">&lt;</span>package<span class="token operator">></span> <span class="token operator">&lt;</span>version<span class="token operator">></span></code></pre><h2 id="使用技巧">使用技巧</h2><h4 id="多次安装不成功尝试先清除缓存">多次安装不成功尝试先清除缓存</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> cache clean <span class="token parameter variable">-f</span></code></pre><h4 id="查看已安装的依赖包版本号">查看已安装的依赖包版本号</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">ls</span> <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span></code></pre><blockquote><p>注意：用此方法才能准确的知道项目使用的版本号，查看package.json时，有“^&quot; 符号表示大于此版本</p></blockquote><h2 id="npm发布包教程">npm发布包教程</h2><p><a href="https://segmentfault.com/a/1190000017461666">npm发布包教程</a></p><h2 id="nrm的作用与使用">nrm的作用与使用</h2><h4 id="nrm是什么？">nrm是什么？</h4><p>nrm(npm registry manager )是npm的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在 npm 源间切换</p><h4 id="nrm的安装">nrm的安装</h4><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> nrm</code></pre><h4 id="nrm命令">nrm命令</h4><pre class="language-bash" data-language="bash"><code class="language-bash">nrm <span class="token function">ls</span>　<span class="token comment">#查看可用的源（有*号的表示当前所使用的源,以下&lt;registry>表示源的名称）</span>nrm use <span class="token operator">&lt;</span>registry<span class="token operator">></span> <span class="token comment"># 将npm下载源切换成指定的源</span>nrm <span class="token function">add</span> <span class="token operator">&lt;</span>registry<span class="token operator">></span> <span class="token operator">&lt;</span>url<span class="token operator">></span> <span class="token comment"># 添加源，url为源的路径</span>nrm del <span class="token operator">&lt;</span>registry<span class="token operator">></span> <span class="token comment"># 删除源</span>nrm <span class="token builtin class-name">test</span> <span class="token operator">&lt;</span>registry<span class="token operator">></span> <span class="token comment"># 测试源的响应时间，可以作为使用哪个源的参考</span>nrm <span class="token builtin class-name">help</span>　<span class="token comment"># 查看nrm帮助</span>nrm home <span class="token operator">&lt;</span>registry<span class="token operator">></span>　<span class="token comment"># 跳转到指定源的官网</span></code></pre><h4 id="nrm使用">nrm使用</h4><p>如果在你的网络不太理想或者受到其他网络限制导致不能使用npm原本的源进行下载时，nrm就非常有用了，你只需要：</p><pre class="language-bash" data-language="bash"><code class="language-bash">nrm <span class="token function">ls</span> <span class="token comment"># 查看可用的源</span>nrm use <span class="token operator">&lt;</span>registry<span class="token operator">></span>　<span class="token comment"># 切换到指定源</span></code></pre><div class="note danger"><p>本文转自 <a href="https://xugaoyi.com/pages/61f2f95fd7da14fd/">https://xugaoyi.com/pages/61f2f95fd7da14fd/</a>，作者：xugaoyi。 <strong>如有不妥，请联系我删除</strong></p></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;npm是跟随node一起安装的包（模块）管理器。常见的使用场景有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;允许用户从npm服务器下载别人编写的第三方包到本地使用。&lt;/li&gt;
&lt;li&gt;允许用户从npm服务器下载并安装别人编写的命令行程序到本地使用。&lt;/li&gt;
&lt;li&gt;允许用户将自己编写的包或命令行程序上传到npm服务器供别人使用。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术文档" scheme="https://www.aliang.link/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="语法速查" scheme="https://www.aliang.link/tags/%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5/"/>
    
    <category term="技术文档" scheme="https://www.aliang.link/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    <category term="TeamSpeak3" scheme="https://www.aliang.link/tags/TeamSpeak3/"/>
    
    <category term="npm" scheme="https://www.aliang.link/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>curl命令速查</title>
    <link href="https://www.aliang.link/blog/220205.html"/>
    <id>https://www.aliang.link/blog/220205.html</id>
    <published>2022-02-05T14:35:10.000Z</published>
    <updated>2022-02-05T14:35:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介">简介</h2><p><strong>curl命令</strong> 是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。做网页处理流程和数据检索自动化，curl可以助一臂之力。</p><span id="more"></span><h2 id="语法">语法</h2><pre class="language-bash" data-language="bash"><code class="language-bash">curl<span class="token punctuation">(</span>选项<span class="token punctuation">)</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span></code></pre><h2 id="选项">选项</h2><pre class="language-bash" data-language="bash"><code class="language-bash">-a/--append                                   <span class="token comment"># 上传文件时，附加到目标文件 </span>-A/--user-agent                               <span class="token comment"># 设置用户代理发送给服务器 </span><span class="token parameter variable">-anyauth</span>                                      <span class="token comment"># 可以使用“任何”身份验证方法 </span>-b/--cookie                                   <span class="token comment"># cookie字符串或文件读取位置 </span>     <span class="token parameter variable">--basic</span>                                  <span class="token comment"># 使用HTTP基本验证 </span>-B/--use-ascii                                <span class="token comment"># 使用ASCII /文本传输 </span>-c/--cookie-jar                               <span class="token comment"># 操作结束后把cookie写入到这个文件中 </span>-C/--continue-at                              <span class="token comment"># 断点续传 </span>-d/--data                                     <span class="token comment"># HTTP POST方式传送数据 </span>     --data-ascii                             <span class="token comment"># 以ascii的方式post数据 </span>     --data-binary                            <span class="token comment"># 以二进制的方式post数据 </span>     <span class="token parameter variable">--negotiate</span>                              <span class="token comment"># 使用HTTP身份验证 </span>     <span class="token parameter variable">--digest</span>                                 <span class="token comment"># 使用数字身份验证 </span>     --disable-eprt                           <span class="token comment"># 禁止使用EPRT或LPRT </span>     --disable-epsv                           <span class="token comment"># 禁止使用EPSV </span>-D/--dump-header                              <span class="token comment"># 把header信息写入到该文件中 </span>     --egd-file                               <span class="token comment"># 为随机数据(SSL)设置EGD socket路径 </span>     --tcp-nodelay                            <span class="token comment"># 使用TCP\_NODELAY选项 </span>-e/--referer                                  <span class="token comment"># 来源网址 </span>-E/--cert                                     <span class="token comment"># 客户端证书文件和密码 (SSL)</span>     --cert-type                              <span class="token comment"># 证书文件类型 (DER/PEM/ENG) (SSL)</span>     <span class="token parameter variable">--key</span>                                    <span class="token comment"># 私钥文件名 (SSL)</span>     --key-type                               <span class="token comment"># 私钥文件类型 (DER/PEM/ENG) (SSL)</span>     <span class="token parameter variable">--pass</span>                                   <span class="token comment"># 私钥密码 (SSL)</span>     <span class="token parameter variable">--engine</span>                                 <span class="token comment"># 加密引擎使用 (SSL). "--engine list" for list </span>     <span class="token parameter variable">--cacert</span>                                 <span class="token comment"># CA证书 (SSL)</span>     <span class="token parameter variable">--capath</span>                                 <span class="token comment"># CA目录 (made using c\_rehash) to verify peer against (SSL)</span>     <span class="token parameter variable">--ciphers</span>                                <span class="token comment"># SSL密码 </span>     <span class="token parameter variable">--compressed</span>                             <span class="token comment"># 要求返回是压缩的形势 (using deflate or gzip)</span>     --connect-timeout                        <span class="token comment"># 设置最大请求时间 </span>     --create-dirs                            <span class="token comment"># 建立本地目录的目录层次结构 </span>     <span class="token parameter variable">--crlf</span>                                   <span class="token comment"># 上传是把LF转变成CRLF </span>-f/--fail                                     <span class="token comment"># 连接失败时不显示http错误 </span>     --ftp-create-dirs                        <span class="token comment"># 如果远程目录不存在，创建远程目录 </span>     --ftp-method <span class="token punctuation">\</span><span class="token punctuation">[</span>multicwd/nocwd/singlecwd<span class="token punctuation">]</span> <span class="token comment"># 控制CWD的使用 </span>     --ftp-pasv                               <span class="token comment"># 使用 PASV/EPSV 代替端口 </span>     --ftp-skip-pasv-ip                       <span class="token comment"># 使用PASV的时候,忽略该IP地址 </span>     --ftp-ssl                                <span class="token comment"># 尝试用 SSL/TLS 来进行ftp数据传输 </span>     --ftp-ssl-reqd                           <span class="token comment"># 要求用 SSL/TLS 来进行ftp数据传输 </span>-F/--form                                     <span class="token comment"># 模拟http表单提交数据 </span>     --form-string                            <span class="token comment"># 模拟http表单提交数据 </span>-g/--globoff                                  <span class="token comment"># 禁用网址序列和范围使用&#123;&#125;和\[] </span>-G/--get                                      <span class="token comment"># 以get的方式来发送数据 </span>-H/--header                                   <span class="token comment"># 自定义头信息传递给服务器 </span>     --ignore-content-length                  <span class="token comment"># 忽略的HTTP头信息的长度 </span>-i/--include                                  <span class="token comment"># 输出时包括protocol头信息 </span>-I/--head                                     <span class="token comment"># 只显示请求头信息 </span>-j/--junk-session-cookies                     <span class="token comment"># 读取文件进忽略session cookie </span>     <span class="token parameter variable">--interface</span>                              <span class="token comment"># 使用指定网络接口/地址 </span>     <span class="token parameter variable">--krb4</span>                                   <span class="token comment"># 使用指定安全级别的krb4 </span>-k/--insecure                                 <span class="token comment"># 允许不使用证书到SSL站点 </span>-K/--config                                   <span class="token comment"># 指定的配置文件读取 </span>-l/--list-only                                <span class="token comment"># 列出ftp目录下的文件名称 </span>     --limit-rate                             <span class="token comment"># 设置传输速度 </span>     --local-port                             <span class="token comment"># 强制使用本地端口号 </span>-m/--max-time                                 <span class="token comment"># 设置最大传输时间 </span>     --max-redirs                             <span class="token comment"># 设置最大读取的目录数 </span>     --max-filesize                           <span class="token comment"># 设置最大下载的文件总量 </span>-M/--manual                                   <span class="token comment"># 显示全手动 </span>-n/--netrc                                    <span class="token comment"># 从netrc文件中读取用户名和密码 </span>     --netrc-optional                         <span class="token comment"># 使用 .netrc 或者 URL来覆盖-n </span>     <span class="token parameter variable">--ntlm</span>                                   <span class="token comment"># 使用 HTTP NTLM 身份验证 </span>-N/--no-buffer                                <span class="token comment"># 禁用缓冲输出 </span>-o/--output                                   <span class="token comment"># 把输出写到该文件中 </span>-O/--remote-name                              <span class="token comment"># 把输出写到该文件中，保留远程文件的文件名 </span>-p/--proxytunnel                              <span class="token comment"># 使用HTTP代理 </span>     --proxy-anyauth                          <span class="token comment"># 选择任一代理身份验证方法 </span>     --proxy-basic                            <span class="token comment"># 在代理上使用基本身份验证 </span>     --proxy-digest                           <span class="token comment"># 在代理上使用数字身份验证 </span>     --proxy-ntlm                             <span class="token comment"># 在代理上使用ntlm身份验证 </span>-P/--ftp-port                                 <span class="token comment"># 使用端口地址，而不是使用PASV </span><span class="token parameter variable">-q</span>                                            <span class="token comment"># 作为第一个参数，关闭 .curlrc </span>-Q/--quote                                    <span class="token comment"># 文件传输前，发送命令到服务器 </span>-r/--range                                    <span class="token comment"># 检索来自HTTP/1.1或FTP服务器字节范围 </span>--range-file                                  <span class="token comment"># 读取（SSL）的随机文件 </span>-R/--remote-time                              <span class="token comment"># 在本地生成文件时，保留远程文件时间 </span>     <span class="token parameter variable">--retry</span>                                  <span class="token comment"># 传输出现问题时，重试的次数 </span>     --retry-delay                            <span class="token comment"># 传输出现问题时，设置重试间隔时间 </span>     --retry-max-time                         <span class="token comment"># 传输出现问题时，设置最大重试时间 </span>-s/--silent                                   <span class="token comment"># 静默模式。不输出任何东西 </span>-S/--show-error                               <span class="token comment"># 显示错误 </span>     <span class="token parameter variable">--socks4</span>                                 <span class="token comment"># 用socks4代理给定主机和端口 </span>     <span class="token parameter variable">--socks5</span>                                 <span class="token comment"># 用socks5代理给定主机和端口 </span>     <span class="token parameter variable">--stderr</span>                                 <span class="token comment">#   </span>-t/--telnet-option                            <span class="token comment"># Telnet选项设置 </span>     <span class="token parameter variable">--trace</span>                                  <span class="token comment"># 对指定文件进行debug </span>     --trace-ascii                            <span class="token comment"># Like --跟踪但没有hex输出 </span>     --trace-time                             <span class="token comment"># 跟踪/详细输出时，添加时间戳 </span>-T/--upload-file                              <span class="token comment"># 上传文件 </span>     <span class="token parameter variable">--url</span>                                    <span class="token comment"># Spet URL to work with </span>-u/--user                                     <span class="token comment"># 设置服务器的用户和密码 </span>-U/--proxy-user                               <span class="token comment"># 设置代理用户名和密码 </span>-w/--write-out <span class="token punctuation">\</span><span class="token punctuation">[</span>format<span class="token punctuation">]</span>                      <span class="token comment"># 什么输出完成后 </span>-x/--proxy                                    <span class="token comment"># 在给定的端口上使用HTTP代理 </span>-X/--request                                  <span class="token comment"># 指定什么命令 </span>-y/--speed-time                               <span class="token comment"># 放弃限速所要的时间，默认为30 </span>-Y/--speed-limit                              <span class="token comment"># 停止传输速度的限制，速度时间 </span></code></pre><h2 id="实例">实例</h2><h3 id="文件下载">文件下载</h3><p>curl命令可以用来执行下载、发送各种HTTP请求，指定HTTP头部等操作。如果系统没有curl可以使用<code>yum install curl</code>安装，也可以下载安装。curl是将下载文件输出到stdout，将进度信息输出到stderr，不显示进度信息使用<code>--silent</code>选项。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> URL <span class="token parameter variable">--silent</span></code></pre><p>这条命令是将下载文件输出到终端，所有下载的数据都被写入到stdout。</p><p>使用选项<code>-O</code>将下载的数据写入到文件，必须使用文件的绝对地址：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://example.com/text.iso <span class="token parameter variable">--silent</span> <span class="token parameter variable">-O</span></code></pre><p>选项<code>-o</code>将下载数据写入到指定名称的文件中，并使用<code>--progress</code>显示进度条：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://example.com/test.iso <span class="token parameter variable">-o</span> filename.iso <span class="token parameter variable">--progress</span><span class="token comment">############################ 100.0%</span></code></pre><p><strong>不输出错误和进度信息</strong></p><p><code>-s</code> 参数将不输出错误和进度信息。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://www.example.com<span class="token comment"># 上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</span></code></pre><p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-o</span> /dev/null https://google.com</code></pre><p><strong>断点续传</strong></p><p>curl能够从特定的文件偏移处继续下载，它可以通过指定一个便宜量来下载部分文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> URL/File <span class="token parameter variable">-C</span> 偏移量<span class="token comment">#偏移量是以字节为单位的整数，如果让curl自动推断出正确的续传位置使用-C -：</span><span class="token function">curl</span> <span class="token parameter variable">-C</span> <span class="token parameter variable">-URL</span></code></pre><p><strong>使用curl设置参照页字符串</strong></p><p>参照页是位于HTTP头部中的一个字符串，用来表示用户是从哪个页面到达当前页面的，如果用户点击网页A中的某个连接，那么用户就会跳转到B网页，网页B头部的参照页字符串就包含网页A的URL。</p><p>使用<code>--referer</code>选项指定参照页字符串：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--referer</span> http://www.google.com https://baidu.com</code></pre><p><strong>用curl设置用户代理字符串</strong></p><p>有些网站访问会提示只能使用IE浏览器来访问，这是因为这些网站设置了检查用户代理，可以使用curl把用户代理设置为IE，这样就可以访问了。使用<code>--user-agent</code>或者<code>-A</code>选项：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> URL --user-agent <span class="token string">"Mozilla/5.0"</span><span class="token function">curl</span> URL <span class="token parameter variable">-A</span> <span class="token string">"Mozilla/5.0"</span></code></pre><p>其他HTTP头部信息也可以使用curl来发送，使用<code>-H</code>&quot;头部信息&quot; 传递多个头部信息，例如：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">"Host:baidu.com"</span> <span class="token parameter variable">-H</span> <span class="token string">"accept-language:zh-cn"</span> URL</code></pre><p><strong>curl的带宽控制和下载配额</strong></p><p>使用<code>--limit-rate</code>限制curl的下载速度：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> URL --limit-rate 50k</code></pre><p>命令中用k（千字节）和m（兆字节）指定下载速度限制。</p><p>使用<code>--max-filesize</code>指定可下载的最大文件大小：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> URL --max-filesize bytes</code></pre><p>如果文件大小超出限制，命令则返回一个非0退出码，如果命令正常则返回0。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> --limit-rate 200k https://example.com<span class="token comment"># 上面命令将带宽限制在每秒 200K 字节。</span></code></pre><p><strong>用curl进行认证</strong></p><p>使用curl选项 -u 可以完成HTTP或者FTP的认证，可以指定密码，也可以不指定密码在后续操作中输入密码：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-u</span> user:pwd https://baidu.com<span class="token function">curl</span> <span class="token parameter variable">-u</span> user https://baidu.com</code></pre><p><strong>只打印响应头部信息</strong></p><p>通过<code>-I</code>或者<code>-head</code>可以只打印出HTTP头部信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost text<span class="token punctuation">]</span><span class="token comment"># curl -I https://baidu.com</span>HTTP/1.1 <span class="token number">200</span> OKServer: nginx/1.2.5date: Mon, <span class="token number">10</span> Dec <span class="token number">2012</span> 09:24:34 GMTContent-Type: text/html<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8Connection: keep-aliveVary: Accept-EncodingX-Pingback: https://baidu.com/xmlrpc.php</code></pre><h3 id="get请求">get请求</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token string">"http://www.baidu.com"</span>    <span class="token comment"># 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地</span><span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token string">"http://www.baidu.com"</span> <span class="token comment"># 显示全部信息</span><span class="token function">curl</span> <span class="token parameter variable">-l</span> <span class="token string">"http://www.baidu.com"</span> <span class="token comment"># 显示页面内容</span><span class="token function">curl</span> <span class="token parameter variable">-v</span> <span class="token string">"http://www.baidu.com"</span> <span class="token comment"># 显示get请求全过程解析</span></code></pre><h3 id="post请求">post请求</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">"param1=value1&amp;param2=value2"</span> <span class="token string">"http://www.baidu.com/login"</span><span class="token function">curl</span> -d<span class="token string">'login=emma&amp;password=123'</span> <span class="token parameter variable">-X</span> POST https://baidu.com/login<span class="token comment"># 或者</span><span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">'login=emma'</span> <span class="token parameter variable">-d</span> <span class="token string">'password=123'</span> <span class="token parameter variable">-X</span> POST  https://baidu.com/login</code></pre><p><code>--data-urlencode</code> 参数等同于 <code>-d</code>，发送 <code>POST</code> 请求的数据体，区别在于会自动将发送的数据进行 <code>URL</code> 编码。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> --data-urlencode <span class="token string">'comment=hello world'</span> https://baidu.com/login<span class="token comment"># 上面代码中，发送的数据hello world之间有一个空格，需要进行 URL 编码。</span></code></pre><p><strong>读取本地文本文件的数据，向服务器发送</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">'@data.txt'</span> https://baidu.com/upload<span class="token comment"># 读取data.txt文件的内容，作为数据体向服务器发送。</span></code></pre><p><strong>json格式的post请求</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-l</span> <span class="token parameter variable">-H</span> <span class="token string">"Content-type: application/json"</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-d</span> <span class="token string">'&#123;"phone":"13521389587","password":"test"&#125;'</span> https://baidu.com/apis/users.json</code></pre><p><strong>向服务器发送 Cookie</strong></p><p>使用<code>--cookie &quot;COKKIES&quot;</code>选项来指定cookie，多个cookie使用分号分隔：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://baidu.com <span class="token parameter variable">--cookie</span> <span class="token string">"user=root;pass=123456"</span></code></pre><p>将cookie另存为一个文件，使用<code>--cookie-jar</code>选项：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> URL --cookie-jar cookie_file</code></pre><p><code>-b</code> 参数用来向服务器发送 Cookie。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-b</span> <span class="token string">'foo=bar'</span> https://taobao.com<span class="token comment"># 上面命令会生成一个标头Cookie: foo=bar，向服务器发送一个名为foo、值为bar的 Cookie。</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-b</span> <span class="token string">'foo1=bar'</span> <span class="token parameter variable">-b</span> <span class="token string">'foo2=baz'</span> https://taobao.com<span class="token comment"># 上面命令发送两个 Cookie。</span>```shell<span class="token function">curl</span> <span class="token parameter variable">-b</span> cookies.txt https://www.taobao.com<span class="token comment"># 上面命令读取本地文件 cookies.txt，里面是服务器设置的 Cookie（参见-c参数），将其发送到服务器。</span></code></pre><p><strong>Cookie 写入一个文件</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-c</span> cookies.txt https://www.taobao.com<span class="token comment"># 上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件cookies.txt。</span></code></pre><p><strong>请求的来源</strong></p><p><code>-e</code> 参数用来设置 <code>HTTP</code> 的标头 <code>Referer</code>，表示请求的来源。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-e</span> <span class="token string">'https://taobao.com?q=example'</span> https://www.example.com<span class="token comment"># 上面命令将Referer标头设为 https://taobao.com?q=example。</span></code></pre><p><code>-H</code> 参数可以通过直接添加标头 <code>Referer</code>，达到同样效果。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">'Referer: https://taobao.com?q=example'</span> https://www.example.com</code></pre><p><strong>上传二进制文件</strong></p><p><code>-F</code> 参数用来向服务器上传二进制文件。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-F</span> <span class="token string">'file=@photo.png'</span> https://taobao.com/profile<span class="token comment"># 上面命令会给 HTTP 请求加上标头 Content-Type: multipart/form-data ，然后将文件photo.png作为file字段上传。</span></code></pre><p><code>-F</code> 参数可以指定 <code>MIME</code> 类型。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-F</span> <span class="token string">'file=@photo.png;type=image/png'</span> https://taobao.com/profile<span class="token comment"># 上面命令指定 MIME 类型为image/png，否则 curl 会把 MIME 类型设为 application/octet-stream。</span></code></pre><p><code>-F</code> 参数也可以指定文件名。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-F</span> <span class="token string">'file=@photo.png;filename=me.png'</span> https://taobao.com/profile<span class="token comment"># 上面命令中，原始文件名为photo.png，但是服务器接收到的文件名为me.png。</span></code></pre><p><strong>设置请求头</strong></p><p><code>-H</code> 参数添加 <code>HTTP</code> 请求的标头。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">'Accept-Language: en-US'</span> https://google.com<span class="token comment"># 上面命令添加 HTTP 标头 Accept-Language: en-US。</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">'Accept-Language: en-US'</span> <span class="token parameter variable">-H</span> <span class="token string">'Secret-Message: xyzzy'</span> https://google.com<span class="token comment"># 上面命令添加两个 HTTP 标头。</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">'&#123;"login": "emma", "pass": "123"&#125;'</span> <span class="token parameter variable">-H</span> <span class="token string">'Content-Type: application/json'</span> https://google.com/login<span class="token comment"># 上面命令添加 HTTP 请求的标头是 Content-Type: application/json，然后用 -d 参数发送 JSON 数据。</span></code></pre><p><strong>跳过 SSL 检测</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-k</span> https://www.example.com<span class="token comment"># 上面命令不会检查服务器的 SSL 证书是否正确。</span></code></pre><p><strong>请求跟随服务器的重定向</strong></p><p><code>-L</code> 参数会让 <code>HTTP</code> 请求跟随服务器的重定向。<code>curl</code> 默认不跟随重定向。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token parameter variable">-d</span> <span class="token string">'tweet=hi'</span> https://api.example.com/tweet</code></pre><p><strong>调试参数</strong></p><p><code>-v</code> 参数输出通信的整个过程，用于调试。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-v</span> https://www.example.com<span class="token comment"># --trace参数也可以用于调试，还会输出原始的二进制数据。</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token parameter variable">--trace</span> - https://www.example.com</code></pre><p><strong>获取本机外网ip</strong></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> ipecho.net/plain</code></pre><p><strong>使用 curl 测试网站加载速度</strong></p><p>命令有一个鲜为人知的选项，<code>-w</code>，该选项在请求结束之后打印本次请求的统计数据到标准输出。</p><p>首先，我们定义控制打印行为的格式化字符串。新建文本文件 <code>fmt.txt</code>，并填入下面的内容：</p><pre class="language-ruby" data-language="ruby"><code class="language-ruby">\nResponse <span class="token builtin">Time</span> <span class="token keyword">for</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">%&#123;url_effective&#125;</span></span>\n\n<span class="token constant">DNS</span> Lookup <span class="token builtin">Time</span><span class="token operator">:</span>\t\t<span class="token string-literal"><span class="token string">%&#123;time_namelookup&#125;</span></span>s\nRedirection <span class="token builtin">Time</span><span class="token operator">:</span>\t\t<span class="token string-literal"><span class="token string">%&#123;time_redirect&#125;</span></span>s\nConnection <span class="token builtin">Time</span><span class="token operator">:</span>\t\t<span class="token string-literal"><span class="token string">%&#123;time_connect&#125;</span></span>s\nApp Connection <span class="token builtin">Time</span><span class="token operator">:</span>\t\t<span class="token string-literal"><span class="token string">%&#123;time_appconnect&#125;</span></span>s\nPre<span class="token operator">-</span>transfer <span class="token builtin">Time</span><span class="token operator">:</span>\t\t<span class="token string-literal"><span class="token string">%&#123;time_pretransfer&#125;</span></span>s\nStart<span class="token operator">-</span>transfer <span class="token builtin">Time</span><span class="token operator">:</span>\t\t<span class="token string-literal"><span class="token string">%&#123;time_starttransfer&#125;</span></span>s\n\nTotal <span class="token builtin">Time</span><span class="token operator">:</span>\t\t\t<span class="token string-literal"><span class="token string">%&#123;time_total&#125;</span></span>s\n</code></pre><p>curl 提供了很多置换变量，可以在格式化字符串中通过 <code>%&#123;var&#125;</code> 的形式使用。完整的变量列表可以在 <code>curl</code> 的 <code>manpage</code> 中查看。简单介绍一下我们使用的这几个变量：</p><ul><li><code>url_effective</code>: 执行完地址重定向之后的最终 URL；</li><li><code>time_namelookup</code>: 从请求开始至完成名称解析所花的时间，单位为秒，下同；</li><li><code>time_redirect</code>: 执行所有重定向所花的时间；</li><li><code>time_connect</code>: 从请求开始至建立 TCP 连接所花的时间；</li><li><code>time_appconnect</code>: 从请求开始至完成 SSL/SSH 握手所花的时间；</li><li><code>time_pretransfer</code>: 从请求开始至服务器准备传送文件所花的时间，包含了传送协商时间；</li><li><code>time_starttransfer</code>: 从请求开始至服务器准备传送第一个字节所花的时间；</li><li><code>time_total</code>: 完整耗时。</li></ul><p>然后执行请求，通过 @filename 指定保存了格式化字符串的文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-w</span> @fmt.txt <span class="token parameter variable">-o</span> /dev/null http://www.google.com</code></pre><p>输出：</p><pre class="language-c" data-language="c"><code class="language-c">Response Time <span class="token keyword">for</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token comment">//www.google.co.jp/?gfe_rd=cr&amp;dcr=0&amp;ei=cjIaWpTkHeiQ8QfnxYzoBA</span>DNS Lookup Time<span class="token operator">:</span>        <span class="token number">0.000038</span>sRedirection Time<span class="token operator">:</span>       <span class="token number">0.207271</span>sConnection Time<span class="token operator">:</span>        <span class="token number">0.000039</span>sApp Connection Time<span class="token operator">:</span>    <span class="token number">0.000039</span>sPre<span class="token operator">-</span>transfer Time<span class="token operator">:</span>      <span class="token number">0.000067</span>sStart<span class="token operator">-</span>transfer Time<span class="token operator">:</span>    <span class="token number">0.260115</span>sTotal Time<span class="token operator">:</span>             <span class="token number">0.467691</span>s</code></pre><h2 id="要求返回是压缩的状态">要求返回是压缩的状态</h2><pre class="language-bash" data-language="bash"><code class="language-bash">▶ <span class="token function">curl</span> <span class="token parameter variable">--compressed</span> -o- <span class="token parameter variable">-L</span> https://yarnpkg.com/install.sh <span class="token operator">|</span> <span class="token function">bash</span>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed<span class="token number">100</span>    <span class="token number">54</span>  <span class="token number">100</span>    <span class="token number">54</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">42</span>      <span class="token number">0</span>  <span class="token number">0</span>:00:01  <span class="token number">0</span>:00:01 --:--:--    <span class="token number">42</span><span class="token number">100</span>  <span class="token number">2341</span>  <span class="token number">100</span>  <span class="token number">2341</span>    <span class="token number">0</span>     <span class="token number">0</span>   <span class="token number">1202</span>      <span class="token number">0</span>  <span class="token number">0</span>:00:01  <span class="token number">0</span>:00:01 --:--:--  <span class="token number">9289</span>Installing Yarn<span class="token operator">!</span><span class="token operator">></span> Downloading tarball<span class="token punctuation">..</span>.<span class="token punctuation">[</span><span class="token number">1</span>/2<span class="token punctuation">]</span>: https://yarnpkg.com/latest.tar.gz --<span class="token operator">></span> /var/folders/j7/3xly5sk567s65ny5dnr__3b80000gn/T/yarn.tar.gz.XXXXXXXXXX.9hJsBsrA  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current                                 Dload  Upload   Total   Spent    Left  Speed<span class="token number">100</span>    <span class="token number">57</span>  <span class="token number">100</span>    <span class="token number">57</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">72</span>      <span class="token number">0</span> --:--:-- --:--:-- --:--:--    <span class="token number">72</span><span class="token number">100</span>    <span class="token number">93</span>  <span class="token number">100</span>    <span class="token number">93</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">63</span>      <span class="token number">0</span>  <span class="token number">0</span>:00:01  <span class="token number">0</span>:00:01 --:--:--    <span class="token number">63</span><span class="token number">100</span>   <span class="token number">643</span>  <span class="token number">100</span>   <span class="token number">643</span>    <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">248</span>      <span class="token number">0</span>  <span class="token number">0</span>:00:02  <span class="token number">0</span>:00:02 --:--:--   <span class="token number">707</span><span class="token number">100</span> 1215k  <span class="token number">100</span> 1215k    <span class="token number">0</span>     <span class="token number">0</span>   153k      <span class="token number">0</span>  <span class="token number">0</span>:00:07  <span class="token number">0</span>:00:07 --:--:--  305k<span class="token punctuation">[</span><span class="token number">2</span>/2<span class="token punctuation">]</span>: https://yarnpkg.com/latest.tar.gz.asc --<span class="token operator">></span> /var/folders/j7/3xly5sk567s65ny5dnr__3b80000gn/T/yarn.tar.gz.XXXXXXXXXX.9hJsBsrA.asc<span class="token number">100</span>    <span class="token number">61</span>  <span class="token number">100</span>    <span class="token number">61</span>    <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">356</span>      <span class="token number">0</span> --:--:-- --:--:-- --:--:--   <span class="token number">356</span><span class="token number">100</span>    <span class="token number">97</span>  <span class="token number">100</span>    <span class="token number">97</span>    <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">325</span>      <span class="token number">0</span> --:--:-- --:--:-- --:--:--   <span class="token number">325</span><span class="token number">100</span>   <span class="token number">647</span>  <span class="token number">100</span>   <span class="token number">647</span>    <span class="token number">0</span>     <span class="token number">0</span>   <span class="token number">1283</span>      <span class="token number">0</span> --:--:-- --:--:-- --:--:--  <span class="token number">1283</span><span class="token number">100</span>   <span class="token number">832</span>  <span class="token number">100</span>   <span class="token number">832</span>    <span class="token number">0</span>     <span class="token number">0</span>   <span class="token number">1107</span>      <span class="token number">0</span> --:--:-- --:--:-- --:--:--  812k</code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;简介&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;curl命令&lt;/strong&gt; 是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。做网页处理流程和数据检索自动化，curl可以助一臂之力。&lt;/p&gt;</summary>
    
    
    
    <category term="技术文档" scheme="https://www.aliang.link/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="语法速查" scheme="https://www.aliang.link/tags/%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5/"/>
    
    <category term="技术文档" scheme="https://www.aliang.link/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    <category term="Linux" scheme="https://www.aliang.link/tags/Linux/"/>
    
    <category term="curl" scheme="https://www.aliang.link/tags/curl/"/>
    
  </entry>
  
  <entry>
    <title>MySQL更改用户密码的四种方法</title>
    <link href="https://www.aliang.link/blog/210802.html"/>
    <id>https://www.aliang.link/blog/210802.html</id>
    <published>2021-08-02T07:45:30.000Z</published>
    <updated>2022-11-22T07:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-用-set-password-命令">1. 用 <code>set password</code> 命令</h2><p><code>需要先登录MySql</code></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> password <span class="token keyword">for</span> 用户名<span class="token variable">@localhost</span> <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'新密码'</span><span class="token punctuation">)</span></code></pre><span id="more"></span><h2 id="2-用update直接更新user表">2. 用<code>update</code>直接更新user表</h2><p><code>需要先登录MySql</code></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'新密码'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token operator">and</span> host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">;</span> flush <span class="token keyword">privileges</span><span class="token punctuation">;</span> </code></pre><h2 id="3-用-mysqladmin-命令">3. 用 <code>mysqladmin</code> 命令</h2><pre class="language-sql" data-language="sql"><code class="language-sql">mysqladmin <span class="token operator">-</span>u用户名 <span class="token operator">-</span>p旧密码 password 新密码 </code></pre><h2 id="4-忘记root密码">4. 忘记root密码</h2><h3 id="windows：">windows：</h3><ol><li>停止MySQL服务 <code>net stop mysql</code></li><li>管理员权限打开cmd窗口，到mysql\bin目录下（即mysqld.exe所在目录）</li><li>设置启动MySQL服务时跳过权限表认证 <code>mysqld --skip-grant-tables</code> （MySQL8.0.x版本使用 <code>mysqld --console --skip-grant-tables --shared-memory</code>）</li><li>再开一个新的cmd窗口，同样转到mysql\bin目录。</li><li>输入mysql回车。</li><li>连接权限数据库： <code>use mysql;</code> 。</li><li>改密码：<code>update user set password=password(&quot;新密码&quot;) where user=&quot;root&quot;;</code>。</li><li>刷新权限：<code>flush privileges;</code>　。</li><li>退出 <code>quit;</code></li><li>此时如果无法登录就重启系统。</li></ol><h3 id="linux：">linux：</h3><ol><li>停止MySQL服务 <code>service mysqld stop</code></li><li>修改mysql的配置文件my.conf(一般在/etc目录下) <code>vi /etc/my.cnf</code></li><li>在文件的[mysqld]标签下添加一句： <code>skip-grant-tables</code></li><li>然后wq保存退出</li><li>重启数据库<code>service mysqld start</code></li><li>直接连数据库<code>mysql -u root</code></li><li>连接权限数据库： <code>use mysql;</code> 。</li><li>改密码：<code>update user set password=password(&quot;新密码&quot;) where user=&quot;root&quot;;</code>。</li><li>刷新权限：<code>flush privileges;</code>　。</li><li>退出 <code>quit;</code></li><li>把第3步加的那句话去掉，然后重启mysql，然后就可以使用新密码登录了。</li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-用-set-password-命令&quot;&gt;1. 用 &lt;code&gt;set password&lt;/code&gt; 命令&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;需要先登录MySql&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot; data-language=&quot;sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt; password &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; 用户名&lt;span class=&quot;token variable&quot;&gt;@localhost&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; password&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;新密码&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.aliang.link/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Java" scheme="https://www.aliang.link/tags/Java/"/>
    
    <category term="编程" scheme="https://www.aliang.link/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="MySQL" scheme="https://www.aliang.link/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>MySQL常用命令</title>
    <link href="https://www.aliang.link/blog/210801.html"/>
    <id>https://www.aliang.link/blog/210801.html</id>
    <published>2021-08-01T07:45:30.000Z</published>
    <updated>2022-11-22T07:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-系统命令">1. 系统命令</h2><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">语法</th></tr></thead><tbody><tr><td style="text-align:left">连接</td><td style="text-align:left"><strong>mysql -h 主机地址 -u 用户名 -p 密码</strong> (当mysql为本地服务时 -h可以省略)</td></tr><tr><td style="text-align:left">退出</td><td style="text-align:left"><strong>exit</strong> 或 <strong>quit</strong></td></tr></tbody></table><span id="more"></span><h2 id="2-数据库操作">2. 数据库操作</h2><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">语法</th></tr></thead><tbody><tr><td style="text-align:left">创建库</td><td style="text-align:left"><strong>create database 库名</strong></td></tr><tr><td style="text-align:left">删除库</td><td style="text-align:left"><strong>drop database 库名</strong></td></tr><tr><td style="text-align:left">显示库</td><td style="text-align:left"><strong>show databases</strong></td></tr><tr><td style="text-align:left">使用库</td><td style="text-align:left"><strong>use 库名</strong></td></tr><tr><td style="text-align:left">查看当前使用的库</td><td style="text-align:left"><strong>select database()</strong></td></tr></tbody></table><h2 id="3-表操作">3. 表操作</h2><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">语法</th></tr></thead><tbody><tr><td style="text-align:left">显示表</td><td style="text-align:left"><strong>show tables</strong></td></tr><tr><td style="text-align:left">使用表</td><td style="text-align:left"><strong>use 表名</strong></td></tr><tr><td style="text-align:left">删除表</td><td style="text-align:left"><strong>drop table 表名</strong></td></tr><tr><td style="text-align:left">显示表结构</td><td style="text-align:left"><strong>describe 表名</strong> 可简写为 <strong>desc 表名</strong>，或者 **show columns from 表名 **</td></tr><tr><td style="text-align:left">更改表名</td><td style="text-align:left"><strong>rename table 原表名 to 新表名</strong></td></tr><tr><td style="text-align:left">创建表</td><td style="text-align:left"><strong>create table 表名 ( 字段名 类型 [,…字段名n 类型n] )</strong></td></tr><tr><td style="text-align:left">表中增加字段</td><td style="text-align:left"><strong>alter table 表名 add 字段名 类型 其他</strong></td></tr><tr><td style="text-align:left">表中删除字段</td><td style="text-align:left"><strong>alter table 表名 drop column 字段名</strong></td></tr><tr><td style="text-align:left">表中修改字段类型</td><td style="text-align:left"><code>alter table 表名 modify 字段名 类型 其他</code></td></tr><tr><td style="text-align:left">表中修改字段</td><td style="text-align:left"><strong>alter table 表名 change  旧字段名 新字段名 类型 其他</strong>  (change与modify相比，可以修改字段名)</td></tr></tbody></table><h2 id="4-表SQL">4. 表SQL</h2><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">语法</th></tr></thead><tbody><tr><td style="text-align:left">插入数据</td><td style="text-align:left"><strong>insert into 表名 [( 字段名[,…字段名n  ])] values ( 值 [,…值n )]</strong>  (当values前面的字段名省略时，表示插入所有字段)</td></tr><tr><td style="text-align:left">删除数据</td><td style="text-align:left"><strong>delete from 表名 where 表达式</strong></td></tr><tr><td style="text-align:left">修改数据</td><td style="text-align:left"><strong>update 表名 set 字段=新值,… where 条件</strong></td></tr><tr><td style="text-align:left">查询数据</td><td style="text-align:left"><strong>select 字段,字段,… from 表名  where  表达式</strong></td></tr><tr><td style="text-align:left">分页查</td><td style="text-align:left"><strong>limit 起始位,分页大小</strong></td></tr></tbody></table><h2 id="5-分析查询语句">5. 分析查询语句</h2><blockquote><p><code>explain</code> <strong>select语句</strong> 或 <code>describe</code> <strong>select语句</strong>(可简写为desc)</p></blockquote><table><thead><tr><th style="text-align:left">查询结果值</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">id</td><td style="text-align:left">编号</td></tr><tr><td style="text-align:left">select_type</td><td style="text-align:left">类型：<code>SIMPLE</code>简单查询，其中不包括连接查询和子查询；<code>PRIMARY</code>表示主查询，或者是最外层的查询语句；<code>UNION</code>表示连接查询的第二个或后面的查询语句</td></tr><tr><td style="text-align:left">table</td><td style="text-align:left">查询的表</td></tr><tr><td style="text-align:left">type</td><td style="text-align:left">表的连接类型：<br><code>const</code>表示表中有多条记录，但只从表中查询一条记录；<br><code>eq_ref</code>表示多表连接时，后面的表使用了UNIQUE或者PRIMARY KEY；<br><code>ref</code>表示多表查询时，后面的表使用了普通索引；<br><code>unique_ subquery</code>表示子查询中使用了UNIQUE或者PRIMARY KEY；<br><code>index_ subquery</code>表示子查询中使用了普通索引；<br><code>range</code>表示查询语句中给出了查询范围；<br><code>index</code>表示对表中的索引进行了完整的扫描；<br><code>all</code>表示此次查询进行了全表扫描</td></tr><tr><td style="text-align:left">possible_keys</td><td style="text-align:left">表示查询中可能使用的索引，如果备选的数量大于3那说明已经太多了，因为太多会导致选择索引而损耗性能， 所以建表时字段最好精简，同时也要建立联合索引，避免无效的单列索引</td></tr><tr><td style="text-align:left"><code>key</code></td><td style="text-align:left">表示查询使用到的索引</td></tr><tr><td style="text-align:left">key_len</td><td style="text-align:left">表示索引字段的长度</td></tr><tr><td style="text-align:left">ref</td><td style="text-align:left">表示使用哪个列或常数与索引一起来查询记录</td></tr><tr><td style="text-align:left"><code>rows</code></td><td style="text-align:left">表示查询的行数（估值，越小越好）</td></tr><tr><td style="text-align:left">Extra</td><td style="text-align:left">表示查询过程的附件信息</td></tr></tbody></table><h2 id="6-索引">6. 索引</h2><table><thead><tr><th style="text-align:left">索引类型</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left"><code>INDEX</code></td><td style="text-align:left">普通索引：可重复</td></tr><tr><td style="text-align:left"><code>UNIQUE</code></td><td style="text-align:left">唯一索引：唯一、可为NULL</td></tr><tr><td style="text-align:left"><code>PROMARY KEY</code></td><td style="text-align:left">主键索引：唯一、不为空</td></tr><tr><td style="text-align:left"><code>FULLTEXT</code></td><td style="text-align:left">全文索引：可以针对值中的某个单词，但效率确实不敢恭维</td></tr></tbody></table><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">语法</th></tr></thead><tbody><tr><td style="text-align:left">修改表结构的方式创建索引</td><td style="text-align:left"><code>alter table 表名 add 索引类型 [索引名] (字段名 [...,字段名])</code></td></tr><tr><td style="text-align:left">直接创建索引</td><td style="text-align:left"><strong>create 索引类型 索引名 on 表名(字段名 […,字段名])</strong></td></tr><tr><td style="text-align:left">创建表的同时创建索引</td><td style="text-align:left">—</td></tr></tbody></table><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>al_test<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>al_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>al_no<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>al_type<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>al_desc<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>al_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>uk_no<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>al_no<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_type<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>al_type<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>  FULLTEXT <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>ft_desc<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>al_desc<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>latin1<span class="token punctuation">;</span></code></pre><table><thead><tr><th style="text-align:left">功能</th><th style="text-align:left">语法</th></tr></thead><tbody><tr><td style="text-align:left">修改表结构的方式删除索引</td><td style="text-align:left"><code>alter table 表名 drop index 索引名</code></td></tr><tr><td style="text-align:left">直接删除索引</td><td style="text-align:left"><strong>drop index 索引名 on 表名</strong></td></tr><tr><td style="text-align:left">查看表的索引</td><td style="text-align:left"><strong>show indexes from 表名</strong> 或   <strong>show keys from 表名</strong></td></tr><tr><td style="text-align:left">修改索引</td><td style="text-align:left">MySQL索引没有修改，可以先删除，再添加</td></tr></tbody></table><h2 id="7-导入、导出-备份">7. 导入、导出(备份)</h2><table><thead><tr><th style="text-align:left">导出 SQL 格式的数据</th><th style="text-align:left">语法</th></tr></thead><tbody><tr><td style="text-align:left">导出所有</td><td style="text-align:left"><strong>mysqldump -u 用户名 -p --all-databases &gt;  &gt; 导出的文件名.sql</strong></td></tr><tr><td style="text-align:left">导出指定数据库</td><td style="text-align:left"><strong>mysqldump -u 用户名 -p 数据库名 [表名] &gt; 导出的文件名.sql</strong>  (当不指明表名时导出整个数据库)</td></tr><tr><td style="text-align:left">仅导出结构</td><td style="text-align:left"><strong>mysqldump -u 用户名 -p -d 数据库名 [表名] &gt; 导出的文件名.sql</strong>  (-d代表不导出数据)</td></tr><tr><td style="text-align:left">导入数据库</td><td style="text-align:left">**source 文件名.sql ** (需要先登录mysql并且指定数据库)</td></tr></tbody></table><table><thead><tr><th style="text-align:left">导出查询出来的数据</th><th style="text-align:left">语法</th></tr></thead><tbody><tr><td style="text-align:left">导出查询结果到文件</td><td style="text-align:left"><strong>查询语句 into outfile ‘文件名’</strong></td></tr><tr><td style="text-align:left">如：</td><td style="text-align:left"><strong>select * from al_test into outfile ‘/al_test.txt’</strong></td></tr></tbody></table><p>常见异常：  <code>The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</code><br>表示导出的文件目录错误（没有权限导出到此目录）<br>可以执行<code>show variables like &quot;secure_file_priv&quot;</code> 查看允许的目录<br>如果value值为null，则为禁止所有目录；如果为空，则不限制目录；如果有文件夹目录，则只允许改目录下文件。<br>可以进入mysql配置文件配置修改 secure_file_priv =<br>修改之后需要重启mysql生效。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-系统命令&quot;&gt;1. 系统命令&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;功能&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;语法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;连接&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;strong&gt;mysql -h 主机地址 -u 用户名 -p 密码&lt;/strong&gt; (当mysql为本地服务时 -h可以省略)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;退出&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;&lt;strong&gt;exit&lt;/strong&gt; 或 &lt;strong&gt;quit&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.aliang.link/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Java" scheme="https://www.aliang.link/tags/Java/"/>
    
    <category term="编程" scheme="https://www.aliang.link/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="语法速查" scheme="https://www.aliang.link/tags/%E8%AF%AD%E6%B3%95%E9%80%9F%E6%9F%A5/"/>
    
    <category term="MySQL" scheme="https://www.aliang.link/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Gitmoji</title>
    <link href="https://www.aliang.link/blog/210718.html"/>
    <id>https://www.aliang.link/blog/210718.html</id>
    <published>2021-07-18T07:45:30.000Z</published>
    <updated>2022-11-22T07:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Gitmoji-官方-GitHub-地址">Gitmoji 官方 GitHub 地址</h2><p>为你的Git日志增加一些趣味性，更加清晰明了。</p><p><strong>Gitmoji Github :</strong> <a href="https://github.com/carloscuesta/gitmoji">https://github.com/carloscuesta/gitmoji</a><br><strong>Gitmoji 官网 :</strong> <a href="https://gitmoji.dev">https://gitmoji.dev</a></p><span id="more"></span><h2 id="Gitmoji-常用示例">Gitmoji 常用示例</h2><p><span class="emoji" alias="tada" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">🎉</span></p><table><thead><tr><th style="text-align:left">Gitmoji</th><th style="text-align:center">代码</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">🎉 (庆祝)</td><td style="text-align:center"><code>​:tada​:</code></td><td style="text-align:left">初次提交</td></tr><tr><td style="text-align:left">📝 (备忘录)</td><td style="text-align:center"><code>​:memo​:</code></td><td style="text-align:left">撰写文档</td></tr><tr><td style="text-align:left">✨ (火花)</td><td style="text-align:center"><code>​:sparkles​:</code></td><td style="text-align:left">引入新功能</td></tr><tr><td style="text-align:left">🎨 (调色板)</td><td style="text-align:center"><code>​:art​:</code></td><td style="text-align:left">改进代码结构/代码格式</td></tr><tr><td style="text-align:left">🚧 (施工)</td><td style="text-align:center"><code>​:construction​:</code></td><td style="text-align:left">工作进行中</td></tr><tr><td style="text-align:left">🔥 (火焰)</td><td style="text-align:center"><code>​:fire​:</code></td><td style="text-align:left">移除代码或文件</td></tr><tr><td style="text-align:left">🐛 (bug)</td><td style="text-align:center"><code>​:bug​:</code></td><td style="text-align:left">修复 bug</td></tr><tr><td style="text-align:left">🚑 (急救车)</td><td style="text-align:center"><code>​:ambulance​:</code></td><td style="text-align:left">重要补丁</td></tr><tr><td style="text-align:left">⚡️ (闪电)</td><td style="text-align:center"><code>​:zap​:</code></td><td style="text-align:left">提升性能</td></tr><tr><td style="text-align:left">🚀 (火箭)</td><td style="text-align:center"><code>​:rocket​:</code></td><td style="text-align:left">部署功能</td></tr><tr><td style="text-align:left">💄 (口红)</td><td style="text-align:center"><code>​:lipstick​:</code></td><td style="text-align:left">更新 UI 和样式文件</td></tr><tr><td style="text-align:left">🔀 (合并)</td><td style="text-align:center"><code>​:twisted_rightwards_arrows​:</code></td><td style="text-align:left">Merge 分支</td></tr><tr><td style="text-align:left">✅ (复选框)</td><td style="text-align:center"><code>​:white_check_mark​:</code></td><td style="text-align:left">增加测试</td></tr><tr><td style="text-align:left">🔖 (书签)</td><td style="text-align:center"><code>​:bookmark​:</code></td><td style="text-align:left">发行/版本标签</td></tr><tr><td style="text-align:left">🚨 (警车灯)</td><td style="text-align:center"><code>​:rotating_light​:</code></td><td style="text-align:left">移除 linter 警告</td></tr><tr><td style="text-align:left">💚 (绿心)</td><td style="text-align:center"><code>​:green_heart​:</code></td><td style="text-align:left">修复 CI 构建问题</td></tr><tr><td style="text-align:left">⬇️ (下降箭头)</td><td style="text-align:center"><code>​:arrow_down​:</code></td><td style="text-align:left">降级依赖</td></tr><tr><td style="text-align:left">⬆️ (上升箭头)</td><td style="text-align:center"><code>​:arrow_up​:</code></td><td style="text-align:left">升级依赖</td></tr><tr><td style="text-align:left">📌 (图钉)</td><td style="text-align:center"><code>​:pushpin​:</code></td><td style="text-align:left">依赖固定到特定版本</td></tr><tr><td style="text-align:left">👷 (工人)</td><td style="text-align:center"><code>​:construction_worker​:</code></td><td style="text-align:left">添加 CI 构建系统</td></tr><tr><td style="text-align:left">📈 (上升趋势图)</td><td style="text-align:center"><code>​:chart_with_upwards_trend​:</code></td><td style="text-align:left">添加分析或跟踪代码</td></tr><tr><td style="text-align:left">♻️ (回收)</td><td style="text-align:center"><code>​:recycle​:</code></td><td style="text-align:left">重构代码</td></tr><tr><td style="text-align:left">🐳 (鲸鱼)</td><td style="text-align:center"><code>​:whale​:</code></td><td style="text-align:left">Docker 相关工作</td></tr><tr><td style="text-align:left">🔨 (锤子)</td><td style="text-align:center"><code>​:hammer​:</code></td><td style="text-align:left">重大重构</td></tr><tr><td style="text-align:left">➕ (加号)</td><td style="text-align:center"><code>​:heavy_plus_sign​:</code></td><td style="text-align:left">增加一个依赖</td></tr><tr><td style="text-align:left">➖ (减号)</td><td style="text-align:center"><code>​:heavy_minus_sign​:</code></td><td style="text-align:left">减少一个依赖</td></tr><tr><td style="text-align:left">🔧 (扳手)</td><td style="text-align:center"><code>​:wrench​:</code></td><td style="text-align:left">修改配置文件</td></tr><tr><td style="text-align:left">🌐 (地球)</td><td style="text-align:center"><code>​:globe_with_meridians​:</code></td><td style="text-align:left">国际化与本地化</td></tr><tr><td style="text-align:left">✏️ (铅笔)</td><td style="text-align:center"><code>​:pencil2​:</code></td><td style="text-align:left">修复错别字</td></tr><tr><td style="text-align:left">💩 (粑粑)</td><td style="text-align:center"><code>​:poop​:</code></td><td style="text-align:left">编写需要改进的错误代码</td></tr><tr><td style="text-align:left">⏪ (后退)</td><td style="text-align:center"><code>​:rewind​:</code></td><td style="text-align:left">还原更改</td></tr><tr><td style="text-align:left">📦 (包裹)</td><td style="text-align:center"><code>​:package​:</code></td><td style="text-align:left">更新编译文件或Package</td></tr><tr><td style="text-align:left">👽 (外星人)</td><td style="text-align:center"><code>​:alien​:</code></td><td style="text-align:left">由于外部API的更改而更新了代码</td></tr><tr><td style="text-align:left">🚚 (卡车)</td><td style="text-align:center"><code>​:truck​:</code></td><td style="text-align:left">移动或重命名文件</td></tr><tr><td style="text-align:left">📄 (文件)</td><td style="text-align:center"><code>​:page_facing_up​:</code></td><td style="text-align:left">添加或更新 Licence</td></tr><tr><td style="text-align:left">💥 (隆隆声)</td><td style="text-align:center"><code>​:boom​:</code></td><td style="text-align:left">引入重大变化</td></tr><tr><td style="text-align:left">🍱 (便当)</td><td style="text-align:center"><code>​:bento​:</code></td><td style="text-align:left">添加或更新 Assets</td></tr><tr><td style="text-align:left">👌(OK)</td><td style="text-align:center"><code>​:ok_hand​:</code></td><td style="text-align:left">由于代码评审更改而更新代码</td></tr><tr><td style="text-align:left">♿️ (轮椅)</td><td style="text-align:center"><code>​:wheelchair​:</code></td><td style="text-align:left">提高可访问性</td></tr><tr><td style="text-align:left">💡 (电灯泡)</td><td style="text-align:center"><code>​:bulb​:</code></td><td style="text-align:left">记录源代码</td></tr><tr><td style="text-align:left">🍻 (啤酒)</td><td style="text-align:center"><code>​:beers​:</code></td><td style="text-align:left">醉醺醺地编写代码</td></tr><tr><td style="text-align:left">💬 (发言)</td><td style="text-align:center"><code>​:speech_balloon​:</code></td><td style="text-align:left">更新文本和文字</td></tr><tr><td style="text-align:left">🗃 (文件盒)</td><td style="text-align:center"><code>​:card_file_box​:</code></td><td style="text-align:left">执行与数据库相关的更改</td></tr><tr><td style="text-align:left">🔊 (巨大声响)</td><td style="text-align:center"><code>​:loud_sound​:</code></td><td style="text-align:left">添加日志</td></tr><tr><td style="text-align:left">🔇 (静音)</td><td style="text-align:center"><code>​:mute​:</code></td><td style="text-align:left">移除日志</td></tr><tr><td style="text-align:left">👥 (轮廓半身像)</td><td style="text-align:center"><code>​:busts_in_silhouette​:</code></td><td style="text-align:left">添加贡献者</td></tr><tr><td style="text-align:left">🚸 (儿童通过)</td><td style="text-align:center"><code>​:children_crossing​:</code></td><td style="text-align:left">提高用户体验/可用性</td></tr><tr><td style="text-align:left">🏗 (房屋)</td><td style="text-align:center"><code>​:building_construction​:</code></td><td style="text-align:left">使建筑变化</td></tr><tr><td style="text-align:left">📱 (苹果手机)</td><td style="text-align:center"><code>​:iphone​:</code></td><td style="text-align:left">致力于响应式设计</td></tr><tr><td style="text-align:left">🤡 (小丑)</td><td style="text-align:center"><code>​:clown_face​:</code></td><td style="text-align:left">Mock 相关</td></tr><tr><td style="text-align:left">🥚 (彩蛋)</td><td style="text-align:center"><code>​:egg​:</code></td><td style="text-align:left">加入一个复活节彩蛋</td></tr><tr><td style="text-align:left">🙈 (非礼勿视)</td><td style="text-align:center"><code>​:see_no_evil​:</code></td><td style="text-align:left">添加或更新 .gitignore 文件</td></tr><tr><td style="text-align:left">📸 (相机)</td><td style="text-align:center"><code>​:camera_flash​:</code></td><td style="text-align:left">添加或更新快照</td></tr><tr><td style="text-align:left">⚗️ (蒸馏器)</td><td style="text-align:center"><code>​:alembic​:</code></td><td style="text-align:left">尝试新事物</td></tr><tr><td style="text-align:left">🔍 (放大镜)</td><td style="text-align:center"><code>​:mag​:</code></td><td style="text-align:left">SEO 提升</td></tr><tr><td style="text-align:left">☸️ (达摩车轮)</td><td style="text-align:center"><code>​:wheel_of_dharma​:</code></td><td style="text-align:left">Kubernetes 相关工作</td></tr><tr><td style="text-align:left">🏷 (标签)</td><td style="text-align:center"><code>​:label​:</code></td><td style="text-align:left">添加或更新 types (Flow, TypeScript)</td></tr><tr><td style="text-align:left">🌱 (种子)</td><td style="text-align:center"><code>​:seedling​:</code></td><td style="text-align:left">添加或更新种子文件</td></tr><tr><td style="text-align:left">🚩 (旗帜)</td><td style="text-align:center"><code>​:triangular_flag_on_post​:</code></td><td style="text-align:left">添加、更新或删除功能标志</td></tr><tr><td style="text-align:left">💫 (头昏眼花)</td><td style="text-align:center"><code>​:dizzy​:</code></td><td style="text-align:left">添加或更新动画和转换</td></tr><tr><td style="text-align:left">🔒 (锁)</td><td style="text-align:center"><code>​:lock​:</code></td><td style="text-align:left">修复安全问题</td></tr><tr><td style="text-align:left">🍎 (苹果)</td><td style="text-align:center"><code>​:apple​:</code></td><td style="text-align:left">修复 macOS 下的问题</td></tr><tr><td style="text-align:left">🐧 (企鹅)</td><td style="text-align:center"><code>​:penguin​:</code></td><td style="text-align:left">修复 Linux 下的问题</td></tr><tr><td style="text-align:left">🏁 (旗帜)</td><td style="text-align:center"><code>​:checkered_flag​:</code></td><td style="text-align:left">修复 Windows 下的问题</td></tr><tr><td style="text-align:left">🤖 (机器人)</td><td style="text-align:center"><code>​:robot​:</code></td><td style="text-align:left">修复 Android 下的问题</td></tr><tr><td style="text-align:left">🍏 (苹果)</td><td style="text-align:center"><code>​:green_apple​:</code></td><td style="text-align:left">修复 IOS下的问题</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Gitmoji-官方-GitHub-地址&quot;&gt;Gitmoji 官方 GitHub 地址&lt;/h2&gt;
&lt;p&gt;为你的Git日志增加一些趣味性，更加清晰明了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gitmoji Github :&lt;/strong&gt; &lt;a href=&quot;https://github.com/carloscuesta/gitmoji&quot;&gt;https://github.com/carloscuesta/gitmoji&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Gitmoji 官网 :&lt;/strong&gt; &lt;a href=&quot;https://gitmoji.dev&quot;&gt;https://gitmoji.dev&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="技术文档" scheme="https://www.aliang.link/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
    
    <category term="GitHub" scheme="https://www.aliang.link/tags/GitHub/"/>
    
    <category term="Gitmoji" scheme="https://www.aliang.link/tags/Gitmoji/"/>
    
    <category term="技术文档" scheme="https://www.aliang.link/tags/%E6%8A%80%E6%9C%AF%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>海贼王分享</title>
    <link href="https://www.aliang.link/blog/210714.html"/>
    <id>https://www.aliang.link/blog/210714.html</id>
    <published>2021-07-14T13:25:31.000Z</published>
    <updated>2022-11-22T07:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="海贼王（onepiece）-分享">海贼王（onepiece） 分享</h2><div class="note danger no-icon"><p>所有资源都来自于网络，仅供学习研究、下载之后请24小时内删除，不得用于任何商业用途。</p></div><div class="note info no-icon"><p>特点：全部是1080P画质，所有集数都已重命名便于查看<br>来源：枫雪动漫<br>内容：0001-最新（1000+） + 14部剧场版<br>大小：750GB+</p></div><span id="more"></span><h2 id="内容预览">内容预览</h2><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="/assets/img/2021/210714_1.jpg" alt=""></div><div class="group-picture-column"><img data-src="/assets/img/2021/210714_2.jpg" alt=""></div></div></div><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="/assets/img/2021/210714_3.jpg" alt=""></div><div class="group-picture-column"><img data-src="/assets/img/2021/210714_4.jpg" alt=""></div></div></div><div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="/assets/img/2021/210714_5.jpg" alt=""></div><div class="group-picture-column"><img data-src="/assets/img/2021/210714_6.jpg" alt=""></div></div></div><h2 id="阿里云盘链接">阿里云盘链接</h2><blockquote><p>阿里云盘链接: <a href="https://www.aliyundrive.com/s/Xg3Eur6e8JU" title="点我查看">https://www.aliyundrive.com/s/Xg3Eur6e8JU</a></p></blockquote><p><strong>所有视频都有字幕，都是内封字幕，建议下载之后配合下面的软件观看最佳</strong></p><h2 id="阿里云盘达人招募计划">阿里云盘达人招募计划</h2><div class="note primary"><p>点击此链接<br><a href="https://pages.aliyundrive.com/mobile-page/web/signup.html?code=bd04a5e" title="点我查看">https://pages.aliyundrive.com/mobile-page/web/signup.html?code=bd04a5e</a><br>加入阿里云盘达人招募计划，参与享最高50TB容量、延期卡等福利。</p></div><h2 id="播放工具">播放工具</h2><div class="note info"><p>手机建议使用 MXPlayer 观看：<br><a href="https://x-ling.lanzouo.com/iDVCjxg4yna" title="点我查看">https://x-ling.lanzouo.com/iDVCjxg4yna</a></p><p>电脑建议使用 PotPlayer 观看：<br><a href="https://x-ling.lanzouo.com/b01hw890d?password=2060" title="点我查看">https://x-ling.lanzouo.com/b01hw890d?password=2060</a></p></div>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;海贼王（onepiece）-分享&quot;&gt;海贼王（onepiece） 分享&lt;/h2&gt;
&lt;div class=&quot;note danger no-icon&quot;&gt;&lt;p&gt;所有资源都来自于网络，仅供学习研究、下载之后请24小时内删除，不得用于任何商业用途。&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;特点：全部是1080P画质，所有集数都已重命名便于查看&lt;br&gt;
来源：枫雪动漫&lt;br&gt;
内容：0001-最新（1000+） + 14部剧场版&lt;br&gt;
大小：750GB+&lt;/p&gt;
&lt;/div&gt;</summary>
    
    
    
    <category term="资源分享" scheme="https://www.aliang.link/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="资源分享" scheme="https://www.aliang.link/tags/%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
    
    <category term="海贼王" scheme="https://www.aliang.link/tags/%E6%B5%B7%E8%B4%BC%E7%8E%8B/"/>
    
    <category term="动漫" scheme="https://www.aliang.link/tags/%E5%8A%A8%E6%BC%AB/"/>
    
  </entry>
  
  <entry>
    <title>面试总结-JVM篇</title>
    <link href="https://www.aliang.link/blog/210608.html"/>
    <id>https://www.aliang.link/blog/210608.html</id>
    <published>2021-06-08T07:45:30.000Z</published>
    <updated>2022-11-22T07:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2-01-什么情况下会发生栈内存溢出。">2.01 什么情况下会发生栈内存溢出。</h2><p>栈溢出（StackOverflowError）就是方法执行时创建的栈帧超过了栈的深度。那么最有可能的就是方法递归调用产生这种结果（方法a里面继续调a方法）。</p><p>我们可以使用参数 <strong>-Xss</strong> （比如-Xmx2M）去调整JVM栈的大小来扩大栈的深度。</p><span id="more"></span><h2 id="2-01-什么情况下会发生栈内存溢出。-2">2.01 什么情况下会发生栈内存溢出。</h2><p>堆溢出(OutOfMemoryError:java heap space)就是方法执行时创建的栈帧超过了栈的深度。那么最有可能的就是方法递归调用产生这种结果（方法a里面继续调a方法）。</p><p>我们可以使用参数 <strong>-Xmx</strong> （比如-Xmx4096M）去调整堆的总大小来扩大栈的深度。</p><h2 id="2-01-JVM的内存结构，Eden和Survivor比例。">2.01 JVM的内存结构，Eden和Survivor比例。</h2><h2 id="2-01-JVM内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为Eden和Survivor。">2.01 JVM内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为Eden和Survivor。</h2><h2 id="2-01-JVM中一次完整的GC流程是怎样的，对象如何晋升到老年代，说说你知道的几种主要的JVM参数。">2.01 JVM中一次完整的GC流程是怎样的，对象如何晋升到老年代，说说你知道的几种主要的JVM参数。</h2><h2 id="2-01-你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms和G1，包括原理，流程，优缺点。">2.01 你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms和G1，包括原理，流程，优缺点。</h2><h2 id="2-01-垃圾回收算法的实现原理。">2.01 垃圾回收算法的实现原理。</h2><h2 id="2-01-当出现了内存溢出，你怎么排错。">2.01 当出现了内存溢出，你怎么排错。</h2><h2 id="2-01-JVM内存模型的相关知识了解多少，比如重排序，内存屏障，happen-before，主内存，工作内存等。">2.01 JVM内存模型的相关知识了解多少，比如重排序，内存屏障，happen-before，主内存，工作内存等。</h2><h2 id="2-01-简单说说你了解的类加载器，可以打破双亲委派么，怎么打破。">2.01 简单说说你了解的类加载器，可以打破双亲委派么，怎么打破。</h2><h2 id="2-01-讲讲JAVA的反射机制。">2.01 讲讲JAVA的反射机制。</h2><h2 id="2-01-你们线上应用的JVM参数有哪些。">2.01 你们线上应用的JVM参数有哪些。</h2><h2 id="2-01-g1和cms区别-吞吐量优先和响应优先的垃圾收集器选择。">2.01 g1和cms区别,吞吐量优先和响应优先的垃圾收集器选择。</h2><h2 id="2-01-怎么打出线程栈信息。">2.01 怎么打出线程栈信息。</h2><h2 id="参考链接">参考链接</h2><ol><li><a href="https://github.com/0voice/interview_internal_reference" title="点我查看原文">interview_internal_reference</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;2-01-什么情况下会发生栈内存溢出。&quot;&gt;2.01 什么情况下会发生栈内存溢出。&lt;/h2&gt;
&lt;p&gt;栈溢出（StackOverflowError）就是方法执行时创建的栈帧超过了栈的深度。那么最有可能的就是方法递归调用产生这种结果（方法a里面继续调a方法）。&lt;/p&gt;
&lt;p&gt;我们可以使用参数 &lt;strong&gt;-Xss&lt;/strong&gt; （比如-Xmx2M）去调整JVM栈的大小来扩大栈的深度。&lt;/p&gt;</summary>
    
    
    
    <category term="面试总结" scheme="https://www.aliang.link/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="Java" scheme="https://www.aliang.link/tags/Java/"/>
    
    <category term="编程" scheme="https://www.aliang.link/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="面试问题" scheme="https://www.aliang.link/tags/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
    
    <category term="JVM" scheme="https://www.aliang.link/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>面试总结-Redis篇</title>
    <link href="https://www.aliang.link/blog/210607.html"/>
    <id>https://www.aliang.link/blog/210607.html</id>
    <published>2021-06-07T07:45:30.000Z</published>
    <updated>2022-11-22T07:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="4-01-使用Redis有哪些好处">4.01 使用Redis有哪些好处</h2><ul><li>速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)</li><li>支持丰富数据类型，支持string，list，set，sorted set，hashsz</li><li>支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</li><li>丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</li></ul><span id="more"></span><h2 id="4-02-redis-最适合的场景">4.02 redis 最适合的场景</h2><h3 id="4-02-1-缓存">4.02.1 缓存</h3><p>缓存现在几乎是所有中大型网站都在用的必杀技，合理的利用缓存不仅能够提升网站访问速度，还能大大降低数据库的压力。Redis提供了键过期功能，也提供了灵活的键淘汰策略，所以，现在Redis用在缓存的场合非常多。</p><h3 id="4-02-2-排行榜">4.02.2 排行榜</h3><p>很多网站都有排行榜应用的，如京东的月度销量榜单、商品按时间的上新排行榜等。Redis提供的有序集合数据类构能实现各种复杂的排行榜应用。</p><h3 id="4-02-3-计数器">4.02.3 计数器</h3><p>什么是计数器，如电商网站商品的浏览量、视频网站视频的播放数等。为了保证数据实时效，每次浏览都得给+1，并发量高时如果每次都请求数据库操作无疑是种挑战和压力。Redis提供的incr命令来实现计数器功能，内存操作，性能非常好，非常适用于这些计数场景。</p><h3 id="4-02-4-分布式会话">4.02.4 分布式会话</h3><p>集群模式下，在应用不多的情况下一般使用容器自带的session复制功能就能满足，当应用增多相对复杂的系统中，一般都会搭建以Redis等内存数据库为中心的session服务，session不再由容器管理，而是由session服务及内存数据库管理。</p><h3 id="4-02-5-分布式锁">4.02.5 分布式锁</h3><p>在很多互联网公司中都使用了分布式技术，分布式技术带来的技术挑战是对同一个资源的并发访问，如全局ID、减库存、秒杀等场景，并发量不大的场景可以使用数据库的悲观锁、乐观锁来实现，但在并发量高的场合中，利用数据库锁来控制资源的并发访问是不太理想的，大大影响了数据库的性能。可以利用Redis的 <strong>setnx</strong> 功能来编写分布式的锁，如果设置返回1说明获取锁成功，否则获取锁失败，实际应用中要考虑的细节要更多。</p><h3 id="4-02-6-最新列表">4.02.6 最新列表</h3><p>Redis列表结构，LPUSH可以在列表头部插入一个内容ID作为关键字，LTRIM可用来限制列表的数量，这样列表永远为N个ID，无需查询最新的列表，直接根据ID去到对应的内容页即可。</p><h3 id="4-02-7-社交网络">4.02.7 社交网络</h3><p>点赞、踩、关注/被关注、共同好友等是社交网站的基本功能，社交网站的访问量通常来说比较大，而且传统的关系数据库类型不适合存储这种类型的数据，Redis提供的哈希、集合等数据结构能很方便的的实现这些功能。</p><h3 id="4-02-8-消息系统">4.02.8 消息系统</h3><p>消息队列是大型网站必用中间件，如ActiveMQ、RabbitMQ、Kafka等流行的消息队列中间件，主要用于业务解耦、流量削峰及异步处理实时性低的业务。Redis提供了发布/订阅及阻塞队列功能，能实现一个简单的消息队列系统。另外，这个不能和专业的消息中间件相比。</p><h2 id="4-03-Redis-常见的性能问题都有哪些">4.03 Redis 常见的性能问题都有哪些</h2><h3 id="4-03-1-常见的性能问题">4.03.1 常见的性能问题</h3><ol><li>Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。</li><li>Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。</li><li>Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。</li></ol><h3 id="4-03-2-如何解决">4.03.2 如何解决</h3><ol><li>Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件</li><li>如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次</li><li>为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内</li><li>尽量避免在压力很大的主库上增加从库</li><li>主从复制不要用图状结构，用单向链表结构更为稳定，即：Master &lt;- Slave1 &lt;- Slave2 &lt;- Slave3… 这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。</li></ol><h2 id="4-04-MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据">4.04 MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</h2><p><strong>redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。</strong></p><p><strong>redis 提供 6种数据淘汰策略：</strong></p><ul><li>voltile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li><li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li><li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li><li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li><li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li><li>no-enviction（驱逐）：不进行删除，达到最大内存时，直接返回错误信息。<br><strong>redis 默认使用no-enviction策略，来保证数据不被丢失；推荐使用voltile-lru策略</strong></li></ul><h2 id="4-15-redis集群如何保证一致性？">4.15 redis集群如何保证一致性？</h2><p>redis集群无法保证强一致性，但是redis的最终一致性会使master和slave的数据是最终一致。</p><p>redis的最终一致性通过主从复制来实现：</p><ul><li><p>redis的复制功能是支持多个数据库之间的数据同步。一类是主数据库（master）一类是从数据库（slave），主数据库可以进行读写操作，当发生写操作的时候自动将数据同步到从数据库，而从数据库一般是只读的，并接收主数据库同步过来的数据，一个主数据库可以有多个从数据库，而一个从数据库只能有一个主数据库。</p></li><li><p>通过redis的复制功能可以很好的实现数据库的读写分离，提高服务器的负载能力。主数据库主要进行写操作，而从数据库负责读操作。</p></li></ul><h2 id="4-06-Redis的同步机制了解么？">4.06 Redis的同步机制了解么？</h2><p>Redis的同步机制有 <strong>全同步</strong> 和 <strong>部分同步</strong> 两种。</p><p>全同步是指<strong>slave启动时进行的初始化同步</strong>。</p><ol><li>当一个从数据库启动时，会向主数据库发送sync命令，</li><li>主数据库接收到sync命令后会开始在后台保存快照（执行rdb操作），并将保存期间接收到的命令缓存起来</li><li>当快照完成后，redis会将快照文件和所有缓存的命令发送给从数据库。</li><li>从数据库收到后，会载入快照文件并执行收到的缓存的命令。</li></ol><p>部分同步是指<strong>Redis运行过程中的修改同步</strong>。</p><ol><li>master收到一个操作，然后判断是否需要同步到salve。</li><li>如果需要同步，则将操作记录到aof文件中。</li><li>遍历所有的salve，将操作的指令和参数写入到savle的回复缓存中。</li><li>一旦slave对应的socket发送缓存中有空间写入数据，即将数据通过socket发出去。</li></ol><h2 id="4-07-是否使用过Redis集群，集群的原理是什么？">4.07 是否使用过Redis集群，集群的原理是什么？</h2><p>Redis Sentinel（哨兵）模式保证高可用，在master宕机时会自动将slave提升为master，继续提供服务。</p><p>Redis Cluster 基本架构来保证扩展性，在单个redis内存不足时，使用Cluster进行分片存储。</p><h2 id="4-08-redis相比memcached有哪些优势？">4.08 redis相比memcached有哪些优势？</h2><ul><li>memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型</li><li>redis的速度比memcached快很多</li><li>redis可以持久化其数据</li></ul><h2 id="4-09-Redis与Memcache的区别都有哪些？">4.09 Redis与Memcache的区别都有哪些？</h2><ol><li>Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li><li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用</li><li>value大小，redis最大可以达到1GB，memcache只有1MB。</li></ol><h2 id="参考链接">参考链接</h2><ol><li><a href="https://github.com/0voice/interview_internal_reference" title="点我查看原文">interview_internal_reference</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;4-01-使用Redis有哪些好处&quot;&gt;4.01 使用Redis有哪些好处&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)&lt;/li&gt;
&lt;li&gt;支持丰富数据类型，支持string，list，set，sorted set，hashsz&lt;/li&gt;
&lt;li&gt;支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行&lt;/li&gt;
&lt;li&gt;丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="面试总结" scheme="https://www.aliang.link/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="Java" scheme="https://www.aliang.link/tags/Java/"/>
    
    <category term="编程" scheme="https://www.aliang.link/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Redis" scheme="https://www.aliang.link/tags/Redis/"/>
    
    <category term="面试问题" scheme="https://www.aliang.link/tags/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>面试总结-基础篇</title>
    <link href="https://www.aliang.link/blog/210606.html"/>
    <id>https://www.aliang.link/blog/210606.html</id>
    <published>2021-06-06T07:45:30.000Z</published>
    <updated>2022-11-22T07:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-JAVA中的几种基本数据类型是什么，各自占用多少字节？">01. JAVA中的几种基本数据类型是什么，各自占用多少字节？</h2><p><strong>JAVA的八种基本数据类型</strong></p><ul><li>整型<ul><li>byte 、 short 、 int 、 long</li></ul></li><li>浮点型<ul><li>float 、 double</li></ul></li><li>字符型<ul><li>char</li></ul></li><li>布尔型<ul><li>boolean</li></ul></li></ul><span id="more"></span><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">占用字节</th><th style="text-align:center">默认值</th><th style="text-align:center">封装类</th></tr></thead><tbody><tr><td style="text-align:center"><strong>byte(字节型)</strong></td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center"><strong>Byte</strong></td></tr><tr><td style="text-align:center"><strong>short(短整形)</strong></td><td style="text-align:center">2</td><td style="text-align:center">0</td><td style="text-align:center"><strong>Short</strong></td></tr><tr><td style="text-align:center"><strong>int(整形)</strong></td><td style="text-align:center">4</td><td style="text-align:center">0</td><td style="text-align:center"><strong>Integer</strong></td></tr><tr><td style="text-align:center"><strong>long(长整形)</strong></td><td style="text-align:center">8</td><td style="text-align:center">0.0l</td><td style="text-align:center"><strong>Long</strong></td></tr><tr><td style="text-align:center"><strong>float(浮点型)</strong></td><td style="text-align:center">4</td><td style="text-align:center">0.0f</td><td style="text-align:center"><strong>Float</strong></td></tr><tr><td style="text-align:center"><strong>double(双精度浮点型)</strong></td><td style="text-align:center">8</td><td style="text-align:center">0</td><td style="text-align:center"><strong>Double</strong></td></tr><tr><td style="text-align:center"><strong>char(字符型)</strong></td><td style="text-align:center">2</td><td style="text-align:center">\u0000(空格)</td><td style="text-align:center"><strong>Character</strong></td></tr><tr><td style="text-align:center"><strong>boolean(布尔型)</strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><strong>Boolean</strong></td></tr></tbody></table><!-- more --><div class="note primary"><h4 id="注：">注：</h4><p>boolean在java规范里并没有规定大小；<br>网上说的大小有很多，比如1个bit（1/8个字节）、1个字节、4个字节；<br>我更倾向于4个字节，因为boolean类型会被编译为int类型，等于是说JVM里占用字节和int完全一样，int是4个字节，所以boolean也是4字节</p></div><h2 id="02-String类能被继承吗，为什么？">02. String类能被继承吗，为什么？</h2><p><strong>不能</strong> 因为String被关键字final修饰。</p><h2 id="03-final的用途">03. final的用途</h2><p>final是一种修饰符，是一种规定，可以用于修饰类、成员方法和成员变量</p><ul><li>final所修饰的类：不能被继承，不能有子类</li><li>final所修饰的方法：不能被重写</li><li>final所修饰的变量：是不可以修改的，是常量</li></ul><h2 id="04-String，Stringbuffer，StringBuilder的区别？">04. String，Stringbuffer，StringBuilder的区别？</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center"><div style="width:80px">值是否可变</div></th><th style="text-align:center"><div style="width:70px">线程安全</div></th><th style="text-align:center"><div style="width:80px">常用</div></th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:center"><strong>String</strong></td><td style="text-align:center">不可变</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:left">String的值是不可变的，这就导致每次对String的操作都会生成新的String对象，不仅效率低下，而且浪费大量优先的内存空间</td></tr><tr><td style="text-align:center"><strong>StringBuffer</strong></td><td style="text-align:center">可变</td><td style="text-align:center">线程安全</td><td style="text-align:center">多线程操作字符串</td><td style="text-align:left">StringBuffer是可变类，和线程安全的字符串操作类，任何对它指向的字符串的操作都不会产生新的对象。每个StringBuffer对象都有一定的缓冲区容量，当字符串大小没有超过容量时，不会分配新的容量，当字符串大小超过容量时，会自动增加容量</td></tr><tr><td style="text-align:center"><strong>StringBuilder</strong></td><td style="text-align:center">可变</td><td style="text-align:center">线程不安全</td><td style="text-align:center">单线程操作字符串</td><td style="text-align:left">可变类，速度更快</td></tr></tbody></table><blockquote><p>对于字符串拼接，我们实际使用中不用过于纠结是使用String还是StringBuffer与StringBuilder；现代JDK中编译时就会进行优化会将字符串拼接（+号拼接）优化为StringBuffer，甚至如&quot;a&quot;+“b&quot;这样的凭借会直接编译优化为&quot;ab”；因此还是优先考虑代码的可读性和美观，但是通过for循环拼接字符串时请使用StringBuffer或StringBuilder。</p></blockquote><h2 id="05-ArrayList和LinkedList有什么区别？">05. ArrayList和LinkedList有什么区别？</h2><div class="note success"><ul><li>ArrayList 查询快</li><li>LinkedList 增删快</li><li>因为ArrayList底层是一个数组，所以查询快；LinkedList底层是一个链表，所以增删快。</li></ul></div><p><img data-src="/assets/img/2021/01-05-1.jpg" alt="ArrayList与LinkedList" title="ArrayList与LinkedList"></p><p>如图所示，假设有一int类型类型的数组，每个int对象都有内存大小，占用4个字节。如果我们要查找第3个对象,可以通过(3-1)*4=8，故9到12字节就是我们要找的对象。是不是很快呢？而链表却不能做到这样的效率。如上图，我们要找到A3，必须先找到A2，要想找到A2，又必须先找到A1；这样的查找效率会大大降低。</p><p><img data-src="/assets/img/2021/01-05-2.jpg" alt="ArrayList与LinkedList插入图解" title="ArrayList与LinkedList插入图解"></p><p>如上图所示，数组的插入也相当的浪费效率；如果要在数组内的某一个位置进行插入，需要先将插入位置的前面复制一份，然后在新的数组后面添加新的元素，最后将旧的数组后半部分添加的新的数组后面；而在链表中插入就变得相当简单了，比如我要在A1和A2中插入A10,只需定位到A1的指针和A2的数据即可,将A1的指针指向A10的值,将A10的指针指向A2的值，A10就插入进了链表。</p><h2 id="06-讲讲类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，当new的时候，他们的执行顺序。">06. 讲讲类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，当new的时候，他们的执行顺序。</h2><div class="note success"><h4 id="类的实例化顺序：">类的实例化顺序：</h4><ol><li><strong>先静态</strong>： 先静态，后非静态</li><li><strong>先父后子</strong>： 先父类同级，后子类同级</li><li><strong>优先级： 字段 &gt; 带参构造函数 &gt; 无参构造函数 &gt; 普通函数</strong></li><li>同级： 从上到下依次执行</li></ol></div><h2 id="07-用过哪些Map类，都有什么区别，HashMap是线程安全的吗，并发下使用的Map是什么，他们内部原理分别是什么，比如存储方式，hashcode，扩容，默认容量等。">07. 用过哪些Map类，都有什么区别，HashMap是线程安全的吗，并发下使用的Map是什么，他们内部原理分别是什么，比如存储方式，hashcode，扩容，默认容量等。</h2><p>常见的Map类有 <strong>HashMap</strong> 、 <strong>ConcurrentHashMap</strong> 、 <strong>HashTable</strong> 、 <strong>LinkedHashMap</strong> 和 <strong>TreeMap</strong> 。</p><p>并发下常使用 <strong>ConcurrentHashMap</strong></p><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center"><div style="width:80px">存储方式</div></th><th style="text-align:center">是否允许空值</th></tr></thead><tbody><tr><td style="text-align:center"><strong>HashMap</strong></td><td style="text-align:center">根据键的HashCode值存储数据</td><td style="text-align:center">最多只允许一条记录的键为 Null；允许多条记录的值为 Null</td></tr><tr><td style="text-align:center"><strong>HashTable</strong></td><td style="text-align:center">同上</td><td style="text-align:center">键或值都不允许为 Null</td></tr><tr><td style="text-align:center"><strong>LinkedHashMap</strong></td><td style="text-align:center">同上</td><td style="text-align:center">同 HashMap</td></tr><tr><td style="text-align:center"><strong>TreeMap</strong></td><td style="text-align:center">同上</td><td style="text-align:center">不允许键为Null；允许多条记录的值为 Null</td></tr></tbody></table><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">默认容量</th><th style="text-align:center">扩容机制</th><th style="text-align:center">是否有序</th></tr></thead><tbody><tr><td style="text-align:center"><strong>HashMap</strong></td><td style="text-align:center">16（必须为2的整数次幂）</td><td style="text-align:center">容量变为原来的2倍</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center"><strong>HashTable</strong></td><td style="text-align:center">11（不要求底层数组的容量一定要为2的整数次幂）</td><td style="text-align:center">容量变为原来的2倍加1</td><td style="text-align:center">否</td></tr><tr><td style="text-align:center"><strong>LinkedHashMap</strong></td><td style="text-align:center">容量没有限制</td><td style="text-align:center">-</td><td style="text-align:center">默认是数据插入顺序</td></tr><tr><td style="text-align:center"><strong>TreeMap</strong></td><td style="text-align:center">容量没有限制</td><td style="text-align:center">-</td><td style="text-align:center">默认是key升序</td></tr></tbody></table><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center"><div style="width:80px">线程安全</div></th><th style="text-align:center">优缺点</th></tr></thead><tbody><tr><td style="text-align:center"><strong>HashMap</strong></td><td style="text-align:center">否</td><td style="text-align:center">很快的访问速度，而且在Map中插入、删除和定位元素，HashMap 是最好的选择。</td></tr><tr><td style="text-align:center"><strong>HashTable</strong></td><td style="text-align:center">是</td><td style="text-align:center">它支持线程的同步，即任一时刻只有一个线程能写Hashtable，因此也导致了 Hashtable在写入时会比较慢</td></tr><tr><td style="text-align:center"><strong>LinkedHashMap</strong></td><td style="text-align:center">否</td><td style="text-align:center">LinkedHashMap是HashMap的一个子类，如果需要输出的顺序和输入的相同，那么用LinkedHashMap可以实现，它还可以按读取顺序来排列，像连接池中可以应用。</td></tr><tr><td style="text-align:center"><strong>TreeMap</strong></td><td style="text-align:center">否</td><td style="text-align:center">TreeMap取出来的是排序后的键值对。但如果要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。</td></tr></tbody></table><h2 id="08-JAVA8的ConcurrentHashMap为什么放弃了分段锁，有什么问题吗，如果你来设计，你如何设计。">08. JAVA8的ConcurrentHashMap为什么放弃了分段锁，有什么问题吗，如果你来设计，你如何设计。</h2><p>弃用原因：</p><ul><li>加入多个分段锁浪费内存空间。</li><li>生产环境中， map 在放入时竞争同一个锁的概率非常小，分段锁反而会造成更新等操作的长时间等待。</li><li>为了提高 GC（垃圾回收） 的效率。</li><li>为了降低锁的粒度，提高性能。</li></ul><blockquote><p>JDK8 放弃了分段锁而是用了 <mark>Node数组+链表+红黑树</mark> 的数据结构来实现，并发控制使用 <strong>Synchronized</strong> 和 <strong>CAS</strong> 来操作，在没有hash冲突的情况下直接使用cas来操作，没有锁的性能开销，当hash冲突时，则直接用链表第一个object加锁，这里加的锁是synchronized，虽然效率不如 ReentrantLock， 但节约了空间，整个看起来就像是优化过且线程安全的HashMap。</p></blockquote><h2 id="09-ConcurrentHashMap-JDK1-8-为什么要使用synchronized而不是如ReentranLock这样的可重入锁？">09. ConcurrentHashMap(JDK1.8)为什么要使用synchronized而不是如ReentranLock这样的可重入锁？</h2><ul><li>减少内存开销<br>假设使用可重入锁来获得同步支持，那么每个节点都需要通过继承AQS来获得同步支持。但并不是每个节点都需要获得同步支持的，只有链表的头节点（红黑树的根节点）需要同步，这无疑带来了巨大内存浪费。</li><li>获得JVM的支持<br>可重入锁毕竟是API这个级别的，后续的性能优化空间很小。<br>synchronized则是JVM直接支持的，JVM能够在运行时作出相应的优化措施：锁粗化、锁消除、锁自旋等等。这就使得synchronized能够随着JDK版本的升级而不改动代码的前提下获得性能上的提升。</li></ul><h2 id="10-有没有有顺序的Map实现类，如果有，他们是怎么保证有序的？">10. 有没有有顺序的Map实现类，如果有，他们是怎么保证有序的？</h2><p>TreeMap和LinkedHashmap都是有序的</p><p>TreeMap默认是 <strong>key升序</strong> ，也可以自定义排序规则：要实现Comparator接口</p><p>LinkedHashmap默认是数据 <strong>插入顺序</strong></p><p><strong>TreeMap 底层存储结构是二叉树，二叉树的中序遍历保证了数据的有序性</strong></p><p><strong>LinkedHashMap 底层存储结构是哈希表+链表，链表记录了添加数据的顺序</strong></p><h2 id="11-抽象类和接口的区别，类可以继承多个类么，接口可以继承多个接口么，可以实现多个接口么？">11. 抽象类和接口的区别，类可以继承多个类么，接口可以继承多个接口么，可以实现多个接口么？</h2><ul><li><p>不同点：</p><ul><li>抽象类要被子类继承，接口要被类实现。</li><li>接口只能做方法申明，抽象类中可以做方法申明，也可以做方法实现</li><li>接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。</li></ul></li><li><p>共同点：</p><ul><li>抽象类和接口都不能直接实例化，如果要实例化，抽象类变量必须指向实现所有抽象方法的子类对象，接口变量必须指向实现所有接口方法的类对象。</li><li>抽象类里的抽象方法必须全部被子类所实现，如果子类不能全部实现父类抽象方法，那么该子类只能是抽象类。同样，一个实现接口的时候，如不能全部实现接口方法，那么该类也只能为抽象类。</li><li>抽象方法只能申明，不能实现。abstract void abc();不能写成abstract void abc(){}。</li></ul></li><li><p>其它：</p><ul><li>抽象类里可以没有抽象方法</li><li>如果一个类里有抽象方法，那么这个类只能是抽象类</li><li>抽象方法要被实现，所以不能是静态的，也不能是私有的。</li></ul></li></ul><div class="note warning"><h4 id="注意">注意</h4><ul><li>类只能继承一个类，但是可以实现多个接口。</li><li><strong>接口</strong>只能继承接口，但是<strong>可多继承接口</strong>。</li></ul></div><h2 id="12-继承和聚合的区别在哪？">12. 继承和聚合的区别在哪？</h2><ul><li><p>继承指的是一个类继承另外的一个类的功能，并可以增加它自己的新功能的能力，继承是类与类或者接口与接口之间最常见的关系；在Java中此类关系通过关键字extends明确标识。</p></li><li><p>聚合体现的是整体与部分、拥有的关系，此时整体与部分之间是可分离的，他们可以具有各自的生命周期；比如计算机与CPU、公司与员工的关系等；在java中表现在代码层面，只能从语义级别来区分。</p></li></ul><p>扩展：</p><ul><li>实现：指的是一个class类实现interface接口（可以是多个）的功能；实现是类与接口之间最常见的关系；在Java中此类关系通过关键字implements明确标识</li><li>依赖：可以简单的理解，就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是B类的变化会影响到A；比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖；表现在代码层面，为类B作为参数被类A在某个method方法中使用。</li><li>关联：体现的是两个类、或者类与接口之间语义级别的一种强依赖关系，表现在代码层面，为被关联类B以类属性的形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量。</li><li>组合：组合也是关联关系的一种特例，他体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合；他同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束；比如你和你的大脑；表现在代码层面，和关联关系是一致的，只能从语义级别来区分。</li></ul><h2 id="13-什么是IO模型？有哪些，讲讲你理解的nio-，他和bio，aio的区别是啥，谈谈reactor模型。">13. 什么是IO模型？有哪些，讲讲你理解的nio ，他和bio，aio的区别是啥，谈谈reactor模型。</h2><ul><li>什么是IO模型？<ul><li>IO模型就是说用什么样的通道进行数据的发送和接收，Java共支持3种网络编程IO模式：NIO、BIO、AIO</li></ul></li><li>介绍：<ul><li><mark>NIO</mark>：同步非阻塞，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有IO请求时才启动一个线程进行处理</li><li><mark>BIO</mark>：同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程并处理，如果这个连接不做任何事情会造成不必要的开销，当然可以通过线程池机制改善</li><li><mark>AIO(NIO2)</mark>：异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理</li></ul></li><li>使用场景：<ul><li>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。</li><li>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。</li><li>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。</li></ul></li></ul><h2 id="14-反射的原理，反射创建类实例的三种方式是什么？">14. 反射的原理，反射创建类实例的三种方式是什么？</h2><ul><li>反射的原理：<ul><li>我们都知道java类的执行需要编译、加载、连接、初始化四步。反射的原理就是加载时，jvm通过字节码class文件，生成相应的对象。</li></ul></li><li>反射创建类实例的三种方式：<ul><li><strong>对象.getClass()</strong></li><li><strong>类.class</strong></li><li><strong>Class.forName(“全路径名称”)</strong></li></ul></li><li>详细介绍请移步：<a href="/pages/92ad8f/" title="点我查看">什么是反射</a></li></ul><h2 id="15-反射中，Class-forName和ClassLoader区别-。">15. 反射中，Class.forName和ClassLoader区别 。</h2><ul><li>Java中Class.forName和classloader都可以用来对类进行加载。</li><li>Class.forName除了将类的 .class文件 加载到jvm中之外，还会对类进行解释，执行类中的static块。</li><li>而classloader只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容，只有在newInstance才会去执行static块。</li><li>Class.forName(name,initialize,loader)带参数也可控制是否加载static块。</li></ul><h2 id="16-描述动态代理的几种实现方式，分别说出相应的优缺点">16. 描述动态代理的几种实现方式，分别说出相应的优缺点</h2><p>常见的动态代理有 <strong>jdk动态代理</strong> 、 <strong>cglib动态代理</strong></p><ul><li><p>jdk动态代理是由java内部的反射机制来实现的，它是jdk原生就支持的一种代理方式，它的实现原理，就是通过让target类和代理类实现同一接口，代理类持有target对象，来达到方法拦截的作用，这样通过接口的方式有两个弊端，一个是必须保证target类有接口，第二个是如果想要对target类的方法进行代理拦截，那么就要保证这些方法都要在接口中声明，实现上略微有点限制。</p></li><li><p>cglib动态代理是通过继承来实现的，底层则是借助asm(Java 字节码操控框架)来实现的（采用字节码的方式，给A类创建一个子类B，子类B使用方法拦截的技术拦截所有父类的方法调用）。</p></li><li><p>优缺点：</p><ul><li><strong>jdk动态代理有一定的局限性，只能基于接口。</strong></li><li><strong>cglib这种第三方类库实现的动态代理应用更加广泛，且在效率上更有优势。但无法处理final的情况，通过继承。</strong></li></ul></li></ul><h2 id="17-jdk动态代理与cglib动态代理的区别">17. jdk动态代理与cglib动态代理的区别</h2><ul><li>jdk动态代理只能对实现了接口的类生成代理，而不能针对类 ;</li><li>cglib是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法 ; 因为是继承，所以该类或方法最好不要声明成final ，final可以阻止继承和多态。</li></ul><p>详情：<a href="/pages/3830a5/#%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E3%80%81%E4%BC%98%E7%BC%BA%E7%82%B9%E3%80%81%E4%B8%A4%E8%80%85%E5%8C%BA%E5%88%AB">实现原理、优缺点、两者区别</a></p><h2 id="18-写出三种单例模式的实现">18. 写出三种单例模式的实现</h2><h4 id="18-1-单例模式之饿汉式">18.1 单例模式之饿汉式</h4><p>在类加载时就初始化一个类对象，使用静态加载，但是在类加载时就实例化对象，单例对象较大的时候会影响系统加载速度</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is constructor."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> getInstance <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="18-2-延迟加载的singleton">18.2 延迟加载的singleton</h4><p>只有在访问到单例对象的时候才去检查和实例化单例对象，满足延迟加载，但多线程访问时需要加线程同步，影响访问效率</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> instance <span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> getInstance <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//对于多线程访问的需加synchronized</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h4 id="18-3-使用静态内部类来作为singleton的容器">18.3 使用静态内部类来作为singleton的容器</h4><p>既能延迟加载，又能保证线程安全</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticSingleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">StaticSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">&#123;</span> <span class="token comment">//私有内部类在StaticSingleton 加载时，不初始化</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">StaticSingleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StaticSingleton</span> getInstance <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="19-请结合OO设计理念，谈谈访问修饰符public、private、protected、default在应用设计中的作用。">19. 请结合OO设计理念，谈谈访问修饰符public、private、protected、default在应用设计中的作用。</h2><ul><li>OO 即 Object Oriented 面向对象的设计模式。</li><li>public：Java语言中访问限制最宽的修饰符，一般称之为“公共的”。被其修饰的类、属性以及方法不仅可以跨类访问，而且允许跨包（package）访问。</li><li>private：Java语言中对访问权限限制的最窄的修饰符，一般称之为“私有的”。被其修饰的类、属性以及方法只能被该类的对象访问，其子类不能访问，更不能允许跨包访问。</li><li>protected：介于public 和 private 之间的一种访问修饰符，一般称之为“保护形”。被其修饰的类、属性以及方法只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。</li><li>default：即不加任何访问修饰符，通常称为“默认访问模式“。该模式下，只允许在同一个包中进行访问。</li><li>作用域基本如下，越往下越小。<table><thead><tr><th style="text-align:center">作用域</th><th style="text-align:center">当前类</th><th style="text-align:center">同一package</th><th style="text-align:center">子孙类</th><th style="text-align:center">其它package</th></tr></thead><tbody><tr><td style="text-align:center"><strong>public</strong></td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center"><strong>protected</strong></td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center"><strong>default</strong></td><td style="text-align:center">√</td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center"><strong>private</strong></td><td style="text-align:center">√</td><td style="text-align:center">×</td><td style="text-align:center">×</td><td style="text-align:center">×</td></tr></tbody></table></li></ul><h2 id="20-深拷贝和浅拷贝区别">20. 深拷贝和浅拷贝区别</h2><p><strong><code>浅拷贝</code></strong> 基本类型拷贝值，引用类型只拷贝引用地址。</p><p><strong><code>深拷贝</code></strong> 引用类型也是拷贝他的值，重新生成的对像，clone出来对象与原对象互不影响。</p><h2 id="21-如何在父类中为子类自动完成所有的hashcode和equals实现？这么做有何优劣？">21. 如何在父类中为子类自动完成所有的hashcode和equals实现？这么做有何优劣？</h2><p>父类中重写hashcode和equals即可</p><p>优点：子类中我们不用再写。</p><p>缺点：有时候父类中equals和hashcode方法不满足我们的需求，需要重写。</p><h2 id="22-说一说你对java-lang-Object对象中hashCode和equals方法的理解。在什么场景下需要重新实现这两个方法？">22. 说一说你对java.lang.Object对象中hashCode和equals方法的理解。在什么场景下需要重新实现这两个方法？</h2><ul><li>hashCode与equals方法都是Java Object对象中的方法，也就是说Java的一切对象都提供这两个方法。</li><li>当集合要添加新的元素时，首先会调用这个元素的hashCode方法，定位到它的物理位置；<br>如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了；<br>如果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址。<br>所以这里存在一个冲突解决的问题，这个时候就需要重写。</li></ul><h2 id="23-有没有可能2个不相等的对象有相同的hashcode？">23. 有没有可能2个不相等的对象有相同的hashcode？</h2><ul><li>hashCode是所有java对象的固有方法；</li><li>如果不重载的话，返回的实际上是 <strong>该对象在jvm堆上的内存地址</strong> ，而不同对象的内存地址肯定不同，所以这个hashCode也就肯定不同了。</li><li>如果重载了的话，由于采用的算法的问题，有可能导致两个不同对象的hashCode相同。</li></ul><h2 id="24-这样的a-hashcode-有什么用，与a-equals-b-有什么关系。">24. 这样的a.hashcode() 有什么用，与a.equals(b)有什么关系。</h2><ul><li>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。</li><li>equals() 主要是用于比对两者的对象是否相同，相对于hashCode()是比较简单的。</li><li>两者主要在数据的存储方面有联系；</li><li>equals()的时间复杂度为O(n)，而hashCode()判断是否有相同元素的代价，只是一次哈希计算，时间复杂度为O(1)，这极大地提高了数据的存储性能。</li><li>当hashcode有冲突时，容器就能判断：这个新加入的元素已经存在，需要另作处理：覆盖掉原来的元素（key）或舍弃。</li><li>此时就需要再进行一个equals()的比对，只有当equals()也返回true的时候，才会认为元素重复，舍弃存储</li></ul><h2 id="25-数组和链表数据结构描述，各自的时间复杂度。">25. 数组和链表数据结构描述，各自的时间复杂度。</h2><h4 id="25-1-各自的特点">25.1 各自的特点</h4><ul><li><p>两种数据结构都是线性表，在排序和查找等算法中都有广泛的应用</p></li><li><p>数组：<br>数组是将元素在内存中连续存放，由于每个元素占用内存相同，可以通过下标迅速访问数组中任何元素。但是如果要在数组中增加一个元素，需要移动大量元素（插入时），在内存中空出一个元素的空间，然后将要增加的元素放在其中。同样的道理，如果想删除一个元素，同样需要移动大量元素去填掉被移动的元素。如果应用需要快速访问数据，很少或不插入和删除元素，就应该用数组。</p></li><li><p>链表：<br>链表恰好相反，链表中的元素在内存中不是顺序存储的，而是通过存在元素中的指针联系到一起。比如：上一个元素有个指针指到下一个元素，以此类推，直到最后一个元素。如果要访问链表中一个元素，需要从第一个元素开始，一直找到需要的元素位置。但是增加和删除一个元素对于链表数据结构就非常简单了，只要修改元素中的指针就可以了。如果应用需要经常插入和删除元素你就需要用链表数据结构了。</p></li></ul><h4 id="25-2-数组和链表的区别">25.2 数组和链表的区别</h4><ol><li>从逻辑结构角度来看：<ul><li>数组必须事先定义固定的长度（元素个数），不能适应数据动态地增减的情况。当数据增加时，可能超出原先定义的元素个数；当数据减少时，造成内存浪费。</li><li>链表动态地进行存储分配，可以适应数据动态地增减的情况，且可以方便地插入、删除数据项。（数组中插入、删除数据项时，需要移动其它数据项）</li></ul></li><li>数组元素在栈区，链表元素在堆区；</li><li>从内存存储角度来看：<ul><li>(静态)数组从栈中分配空间, 对于程序员方便快速,但自由度小。</li><li>链表从堆中分配空间, 自由度大但申请管理比较麻烦。</li><li>数组利用下标定位，时间复杂度为O(1)，链表定位元素时间复杂度O(n)；</li><li>数组插入或删除元素的时间复杂度O(n)，链表的时间复杂度O(1)。</li></ul></li></ol><h2 id="26-error和exception的区别，CheckedException，RuntimeException的区别。">26. error和exception的区别，CheckedException，RuntimeException的区别。</h2><ul><li><p>首先Exception和Error都是继承于Throwable 类，在 Java 中只有 Throwable 类型的实例才可以被抛出（throw）或者捕获（catch），它是异常处理机制的基本组成类型。</p></li><li><p>Exception 是程序正常运行过程中可以预料到的意外情况，并且应该被开发者捕获，进行相应的处理。</p></li><li><p>Error是java程序运行中不可预料的异常情况（正常情况下不大可能出现的情况），这种异常发生以后，会直接导致JVM不可处理或者不可恢复的情况。所以这种异常不可能抓取到，比如OutOfMemoryError、NoClassDefFoundError等。【表示由JVM所侦测到的无法预期的错误，由于这是属于JVM层次的严重错误 ，导致JVM无法继续执行，因此，这是不可捕捉到的，无法采取任何恢复的操作，顶多只能显示错误信息。 Error类体系描述了Java运行系统中的内部错误以及资源耗尽的情形。应用程序不应该抛出这种类型的对象(一般是由虚拟机抛出)。假如出现这种错误，除了尽力使程序安全退出外，在其他方面是无能为力的。】</p></li><li><p>其中的Exception又分为检查性异常（checked）和非检查性异常（unchecked）（也叫RuntimeException）。</p></li><li><p>两个根本的区别在于：</p><ul><li>检查性异常 必须在编写代码时，使用try catch捕获（比如：IOException异常）。</li><li>非检查性异常 在代码编写使，可以忽略捕获操作（比如：ArrayIndexOutOfBoundsException），这种异常是在代码编写或者使用过程中通过规范可以避免发生的，具体根据需要来判断是否需要捕获，并不会在编译器强制要求。</li></ul></li></ul><h2 id="27-常见运行时异常-RuntimeException">27. 常见运行时异常 (RuntimeException)</h2><ul><li>NullPointerException (空指针异常)</li><li>IllegalArgumentException (传递非法参数异常)</li><li>ClassCastException (类转换异常)</li><li>IndexOutOfBoundsException (下标越界异常)</li><li>ArrayIndexOutOfBoundsException (数组越界异常)</li><li>ArrayStoreException (数据存储异常，操作数组时类型不一致)</li><li>NumberFormatException (数字格式异常)</li><li>BufferOverflowException (缓冲区溢出异常)</li><li>AruthmeticException (算术异常)</li></ul><h2 id="28-常见非运行时异常-CheckedException">28. 常见非运行时异常 (CheckedException)</h2><ul><li>IOException (IO 操作异常)</li><li>ClassNotFoundException (找不到指定 class 的异常)</li><li>FileNotFoundException (文件不存在异常)</li><li>SQLException (SQL语句异常）</li><li>InterruptedException (中断异常-调用线程睡眠时候)</li></ul><h2 id="29-常见错误-Error">29. 常见错误 (Error)</h2><ul><li>OutOfMemoryError (内存溢出错误)</li><li>NoClassDefFoundError (找不到 class 定义错误)</li><li>StackOverflowError (深递归导致栈被耗尽而抛出的错误)</li></ul><h2 id="30-在自己的代码中，如果创建一个java-lang-String类，这个类是否可以被类加载器加载？为什么？">30. 在自己的代码中，如果创建一个java.lang.String类，这个类是否可以被类加载器加载？为什么？</h2><p><strong>不能</strong></p><p><img data-src="/assets/img/2021/01-30.png" alt="JVM的四种类加载器" title="JVM的四种类加载器"></p><p>Java使用的是 <strong>双亲委托机制</strong> ：如果一个类加载器收到了类加载的请求，它首先不会自己尝试去加载这个类，而是把这个请求委派给父类加载器（BootStrap），每一个层次的类加载器都是加此，因此所有的加载请求最终到达顶层的启动类加载器，只有当父类加载器反馈自己无法完成加载请求时（指它的搜索范围没有找到所需的类），子类加载器才会尝试自己去加载。</p><p>因此，当你创建一个java.lang.String类时，启动类加载器首先加载的是java.lang.String本类，<br>加载你自己的java.lang.String类时，就会由虚拟机抛出的 <strong>java.lang.SecurityException:Prohibited package name:java.lang</strong> 异常。</p><h2 id="31-什么是向下转型和向上转型">31. 什么是向下转型和向上转型?</h2><ul><li>面向对象的转型只会发生在具有继承关系的父子类中（接口也是继承的一种）</li><li>向上转型：其核心目的在于参数的统一上，根本不需要强制类型转换。<br>向下转型：是为了操作子类定义的特殊功能，需要强制类型转换，可是现在存在的问题是：向下转型其实是一种非常不安全的操作，因为为编译的时候，程序不会报错，而在运行的时候会报错。</li></ul><h2 id="32-在jdk1-5中，引入了泛型，泛型的存在是用来解决什么问题。">32. 在jdk1.5中，引入了泛型，泛型的存在是用来解决什么问题。</h2><ul><li><p><strong>泛型是用来解决向下转型时所带来的安全隐患（ClassCastException）</strong></p></li><li><p>泛型的核心意义在于：类在进行定义的时候可以使用一个标记，此标记就表示类中属性或者方法以及参数的类型，标记在使用的时候，才会去动态的设置类型。</p></li></ul><h2 id="33-Java中的HashSet内部是如何工作的。">33. Java中的HashSet内部是如何工作的。</h2><ul><li>HashSet 的内部采用 HashMap来实现。</li><li>由于 Map 需要 key 和 value，所以HashSet中所有 key 的都有一个默认 value。</li><li>类似于 HashMap，HashSet 不允许重复的 key，只允许有一个null key，意思就是 HashSet 中只允许存储一个 null 对象。</li><li>HashSet 把存储的值作为 key。</li></ul><h2 id="34-什么是序列化，怎么序列化，为什么序列化，反序列化会遇到什么问题，如何解决？">34. 什么是序列化，怎么序列化，为什么序列化，反序列化会遇到什么问题，如何解决？</h2><ul><li>序列化：把对象转换为字节序列的过程称为对象的序列化。</li><li>反序列化：把字节序列恢复为对象的过程称为对象的反序列化。</li><li>为什么序列化：序列化是为了将一个对象的状态（各个属性值）保存起来，然后在适当的时候再获得。</li><li>怎么序列化：实现Serializable接口即可</li><li>反序列化会遇到什么问题：随着版本的迭代，可能出现不认识旧数据的bug</li><li>解决办法：实现 Serializable 接口的时候，一定要给这个 <strong>serialVersionUID</strong> 赋值，赋值为 <strong>1L</strong> 即可。</li></ul><h2 id="35-HTTP-GET和-HTTP-POST-的区别是什么？">35. HTTP GET和 HTTP POST 的区别是什么？</h2><ol><li>GET参数通过URL传递，POST放在Request body中。</li><li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li><li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li><li>GET请求只能进行url编码，而POST支持多种编码方式。</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li><li>GET产生的URL地址可以被Bookmark，而POST不可以。</li><li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li><li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li></ol><blockquote><p><strong>但是GET和POST本质上都是TCP链接，并无差别。只是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。</strong></p></blockquote><h2 id="36-java8的新特性">36. java8的新特性</h2><ul><li>Lambda表达式和函数式接口</li><li>接口的默认方法和静态方法</li><li>方法引用</li><li>重复注解</li><li>更好的类型推断</li><li>Stream流</li></ul><p>详解：<a href="https://www.aliang.link/pages/cc01c3/" title="点我查看">JAVA8 新特性</a></p><h2 id="致谢">致谢</h2><ol><li><a href="https://github.com/0voice/interview_internal_reference" title="点我查看原文">interview_internal_reference</a></li><li><a href="https://blog.csdn.net/kevin_darkelf/article/details/11371353" title="点我查看原文">继承、实现、依赖、关联、聚合、组合的联系与区别</a></li><li><a href="https://blog.csdn.net/weixin_42656794/article/details/90700595" title="点我查看原文">IO模型有哪些，讲讲你理解的nio ，他和bio，aio的区别是啥，谈谈reactor模型</a></li><li><a href="https://blog.csdn.net/riemann_/article/details/86849078" title="点我查看原文">描述Java动态代理的几种实现方式，分别说出相应的优缺点。</a></li><li><a href="https://www.csdn.net/tags/MtTacgwsNzE5MjEtYmxvZwO0O0OO0O0O.html" title="点我查看原文">动态代理的几种实现方式</a></li><li><a href="https://blog.csdn.net/gsw204/article/details/52452873" title="点我查看原文">Java单例模式的三种实现方式</a></li><li><a href="https://blog.csdn.net/riemann_/article/details/87217229" title="点我查看原文">Java深入理解深拷贝和浅拷贝区别</a></li><li><a href="https://blog.csdn.net/riemann_/article/details/87564524" title="点我查看原文">数组和链表数据结构描述，各自的时间复杂度</a></li><li><a href="https://blog.csdn.net/riemann_/article/details/87522352" title="点我查看原文">Java异常error和exception的区别，CheckedException，RuntimeException的区别。</a></li><li><a href="http://www.hellojava.com/a/90595.html" title="点我查看原文">Java中Error和Exception的异同以及运行时异常（Runtime exception)与检查型异常（checked exception）的区别</a></li><li><a href="https://www.cnblogs.com/idea360/p/12377464.html" title="点我查看原文">JVM类加载器是否可以加载自定义的String</a></li><li><a href="https://www.jianshu.com/p/1280aa1ca58a" title="点我查看原文">JAVA基础面试试题及答案（阿里面试题-JAVA基础篇）</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;01-JAVA中的几种基本数据类型是什么，各自占用多少字节？&quot;&gt;01. JAVA中的几种基本数据类型是什么，各自占用多少字节？&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;JAVA的八种基本数据类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;整型
&lt;ul&gt;
&lt;li&gt;byte 、 short 、 int 、 long&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;浮点型
&lt;ul&gt;
&lt;li&gt;float 、 double&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;字符型
&lt;ul&gt;
&lt;li&gt;char&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;布尔型
&lt;ul&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="面试总结" scheme="https://www.aliang.link/%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
    
    
    <category term="Java" scheme="https://www.aliang.link/tags/Java/"/>
    
    <category term="编程" scheme="https://www.aliang.link/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="面试问题" scheme="https://www.aliang.link/tags/%E9%9D%A2%E8%AF%95%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Redis 常见问题</title>
    <link href="https://www.aliang.link/blog/210523.html"/>
    <id>https://www.aliang.link/blog/210523.html</id>
    <published>2021-05-23T05:53:35.000Z</published>
    <updated>2022-11-22T07:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-缓存穿透">1. 缓存穿透</h2><p><strong><code>缓存穿透：key中对应的缓存数据不存在，导致去请求数据库，造成数据库的压力倍增的情况。</code></strong></p><p><strong>解决方案：</strong></p><ol><li>采用布隆过滤器（BloomFilter）进行数据拦截，在查询的时候先去 <strong>BloomFilter</strong> 去查询 <strong>key</strong> 是否存在，如果不存在就直接返回，存在再走查 缓存 -&gt; 查 DB。</li><li>如果请求的数据为空，我们可以将空值也进行一次缓存（过期时间设置短点），这样再请求的时候就会返回null。</li><li>后端接口层增加 用户鉴权校验，参数做校验等。</li><li>单个IP每秒访问次数超过阈值直接拉黑IP，关进小黑屋1天。</li></ol><span id="more"></span><h2 id="2-缓存击穿">2. 缓存击穿</h2><p><strong><code>缓存击穿：redis过期后的一瞬间，有大量用户请求同一个缓存数据，导致这些请求都去请求数据库，造成数据库压力倍增的情况，针对一个key而言。</code></strong></p><p><strong>解决方案：</strong></p><ol><li>使用互斥锁(mutex key)，就是一个key过期时，多个请求过来允许其中一个请求去操作数据库，其他请求等待第一个请求成功返回结果后再请求。</li><li>设置热点数据永远不过期。</li></ol><h2 id="3-缓存雪崩">3. 缓存雪崩</h2><p><strong><code>缓存雪崩：缓存服务器宕机或者大量缓存集中某个时间段失效，导致请求全部去到数据库，造成数据库压力倍增的情况，这个是针对多个key而言。</code></strong></p><p><strong>解决方案：</strong></p><ol><li>缓存数据的过期时间加上个随机值，防止同一时间大量数据过期现象发生。</li><li>如果缓存数据库是分布式部署，将热点数据均匀分布在不同的缓存数据库中。</li><li>设置热点数据永远不过期。</li><li>加锁排队，这种有点像上面缓存击穿的解决方式，但是这种请求量太大，比如5000个请求过来，4999个都需要等待，这必然是指标不治本，不仅用户体验性差，分布式环境下就更加复杂，因此在高并发场景下很少使用</li><li>最好的解决方法，是使用缓存标记，判断该标记是否过期，过期则去请求数据库，而缓存数据的过期时间要设置的比缓存标记的长，这样当一个请求去操作数据库的时候，其他请求拿的是上一次缓存数据</li></ol><h2 id="4-双写一致性">4. 双写一致性</h2><p><strong><code>即缓存跟数据库均更新数据，如何保证数据一致性？</code></strong></p><p>遵循 Cache Aside Pattern</p><ul><li>失效：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。</li><li>命中：应用程序从cache中取数据，取到后返回。</li><li>更新：先把数据存到数据库中，成功后，再让缓存失效。</li></ul><h2 id="5-脑裂">5. 脑裂</h2><p>脑裂是指因为网络原因，导致master节点、slave节点 和 sentinel集群处于不用的网络分区，此时因为sentinel集群无法感知到master的存在，所以将slave节点提升为master节点。</p><p>此时存在两个不同的master节点就像一个大脑分裂成了两个。</p><p>集群脑裂问题中，如果客户端还在基于原来的master节点继续写入数据那么新的master节点将无法同步这些数据，当网络问题解决后sentinel集群将原先的master节点降为slave节点，此时再从新的master中同步数据将造成大量的数据丢失。</p><p><strong>Redis处理方案是redis的配置文件中存在两个参数</strong></p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">min-replicas-to-write</span><span class="token punctuation">:</span> 3    表示连接到master的最少slave数量<span class="token key atrule">min-replicas-max-lag</span><span class="token punctuation">:</span> 10    表示slave连接到master的最大延迟时间</code></pre><p>如果连接到master的slave数量 &lt; 第一个参数(3) 且 ping的延迟时间 &lt;= 第二个参数(10)那么master就会拒绝写请求，</p><p>配置了这两个参数后如果发生了集群脑裂则原先的master节点接收到客户端的写入请求会拒绝就可以减少数据同步之后的数据丢失。</p><h2 id="6-事务">6. 事务</h2><p><strong><code>步骤：开始事务 -&gt; 命令入队 -&gt; 执行事务</code></strong></p><ol><li>redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。</li><li>Redis事务没有<code>隔离级别</code>的概念：批量操作在发送 <code>EXEC</code> 命令前被放入队列缓存，并不会被实际执行，也就不存在事务内的查询要看到事务里的更新，事务外查询不能看到。</li><li>Redis<code>不保证原子性</code>：Redis中单条命令是原子性执行的，但事务不保证原子性。</li><li>Redis编译型错误事务中所有代码均不执行，指令使用错误。运行时异常是错误命令导致异常，其他命令可正常执行。</li><li><code>watch</code>指令类似于<code>乐观锁</code>，在事务提交时，如果<code>watch</code>监控的多个KEY中任何KEY的值已经被其他客户端更改，则使用<code>EXEC</code>执行事务时，事务队列将不会被执行。</li></ol><h2 id="7-正确的Redis开发步骤">7. 正确的Redis开发步骤</h2><p><strong>上线前：</strong> Redis 高可用，主从+哨兵，Redis cluster，避免全盘崩溃。</p><p><strong>上线时：</strong> 本地 ehcache 缓存 + Hystrix 限流 + 降级，避免MySQL扛不住。</p><p><strong>上线后：</strong> Redis 持久化采用 RDB + AOF 来保证断点后自动从磁盘上加载数据，快速恢复缓存数据。</p><h2 id="8-参考链接">8. 参考链接</h2><ol><li><a href="https://blog.csdn.net/sufu1065/article/details/111503419" title="点我查看原文">硬核Redis总结，看这篇就够了！</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-缓存穿透&quot;&gt;1. 缓存穿透&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;缓存穿透：key中对应的缓存数据不存在，导致去请求数据库，造成数据库的压力倍增的情况。&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;采用布隆过滤器（BloomFilter）进行数据拦截，在查询的时候先去 &lt;strong&gt;BloomFilter&lt;/strong&gt; 去查询 &lt;strong&gt;key&lt;/strong&gt; 是否存在，如果不存在就直接返回，存在再走查 缓存 -&amp;gt; 查 DB。&lt;/li&gt;
&lt;li&gt;如果请求的数据为空，我们可以将空值也进行一次缓存（过期时间设置短点），这样再请求的时候就会返回null。&lt;/li&gt;
&lt;li&gt;后端接口层增加 用户鉴权校验，参数做校验等。&lt;/li&gt;
&lt;li&gt;单个IP每秒访问次数超过阈值直接拉黑IP，关进小黑屋1天。&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="数据库" scheme="https://www.aliang.link/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
    <category term="Java" scheme="https://www.aliang.link/tags/Java/"/>
    
    <category term="编程" scheme="https://www.aliang.link/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Redis" scheme="https://www.aliang.link/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Maven单、多仓库配置</title>
    <link href="https://www.aliang.link/blog/210518.html"/>
    <id>https://www.aliang.link/blog/210518.html</id>
    <published>2021-05-18T14:17:35.000Z</published>
    <updated>2022-11-22T07:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-单独仓库配置">1. 单独仓库配置</h2><ul><li>打开Maven配置文件 <code>apache-maven-3.6.3\conf\settings.xml</code></li><li>在<code>&lt;mirrors&gt;&lt;/mirrors&gt;</code>标签里新增一个<code>mirror</code>配置即可。</li></ul><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span></code></pre><span id="more"></span><table><thead><tr><th style="text-align:center">标签</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:center"><strong>id</strong></td><td style="text-align:left">镜像的唯一标识</td></tr><tr><td style="text-align:center"><strong>name</strong></td><td style="text-align:left">名称描述</td></tr><tr><td style="text-align:center"><strong>url</strong></td><td style="text-align:left">地址</td></tr><tr><td style="text-align:center"><strong>mirrorOf</strong></td><td style="text-align:left">指定镜像规则，什么情况下从镜像仓库拉取</td></tr></tbody></table><table><thead><tr><th style="text-align:center">mirrorOf规则</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:center"><strong>*</strong></td><td style="text-align:left">匹配所有，所有内容都从镜像拉取</td></tr><tr><td style="text-align:center"><strong>external:*</strong></td><td style="text-align:left">除了本地缓存的所有从镜像仓库拉取</td></tr><tr><td style="text-align:center"><strong>central</strong></td><td style="text-align:left">覆盖默认的仓库</td></tr><tr><td style="text-align:center"><strong>repo1,repo2</strong></td><td style="text-align:left">匹配仓库repo1和repo2,使用逗号分割多个远程仓库</td></tr></tbody></table><p>比如：镜像配置的规则 <code>&lt;mirrorOf&gt;repo1&lt;/mirrorOf&gt;</code>，意为：匹配到目标仓库 <code>&lt;id&gt;repo1&lt;/id&gt;</code>；</p><p>所以maven认为目标仓库central被镜像了； 不再去 <a href="https://repo.maven.apache.org/maven2/">https://repo.maven.apache.org/maven2/</a> 地址下载jar包；</p><p>而是去镜像仓库 <a href="http://maven.aliyun.com/nexus/content/groups/public/">http://maven.aliyun.com/nexus/content/groups/public/</a> 下载jar包。</p><h2 id="2-多仓库配置">2. 多仓库配置</h2><p>有时候我们需要的jar包公有仓库没有，此时就必须启用多仓库配置，使maven同时使用私有仓库和公有仓库。</p><ul><li>在<code>&lt;profiles&gt;&lt;/profiles&gt;</code>标签里配置多个<code>profile</code>配置。</li></ul><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyun-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">></span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jboss-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jboss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repository.jboss.org/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">></span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://central.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">></span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span></code></pre><ul><li>在<code>&lt;activeProfiles&gt;&lt;/activeProfiles&gt;</code>标签里使用<code>&lt;activeProfile&gt;&lt;/activeProfile&gt;</code>标签启用配置。</li></ul><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfiles</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>aliyun-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>jboss-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>maven-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfiles</span><span class="token punctuation">></span></span></code></pre>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-单独仓库配置&quot;&gt;1. 单独仓库配置&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;打开Maven配置文件 &lt;code&gt;apache-maven-3.6.3\conf\settings.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在&lt;code&gt;&amp;lt;mirrors&amp;gt;&amp;lt;/mirrors&amp;gt;&lt;/code&gt;标签里新增一个&lt;code&gt;mirror&lt;/code&gt;配置即可。&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&quot;language-markup&quot; data-language=&quot;markup&quot;&gt;&lt;code class=&quot;language-markup&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;mirrors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;mirror&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;aliyun&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;id&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;aliyun maven&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;http://maven.aliyun.com/nexus/content/groups/public/&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;url&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;&lt;/span&gt;mirrorOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;*&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;mirrorOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;mirror&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;/&lt;/span&gt;mirrors&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.aliang.link/Java/"/>
    
    
    <category term="Java" scheme="https://www.aliang.link/tags/Java/"/>
    
    <category term="编程" scheme="https://www.aliang.link/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="Maven" scheme="https://www.aliang.link/tags/Maven/"/>
    
  </entry>
  
  <entry>
    <title>什么是反射</title>
    <link href="https://www.aliang.link/blog/210402.html"/>
    <id>https://www.aliang.link/blog/210402.html</id>
    <published>2021-04-02T13:15:27.000Z</published>
    <updated>2022-11-22T07:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是Java反射机制？">1. 什么是Java反射机制？</h2><p>java反射机制就是java程序在运行的时候 <strong>动态</strong> 的 <strong>创建类并调用类的方法以及属性</strong> 。</p><h2 id="2-反射的原理？">2. 反射的原理？</h2><div class="note info"><p>简单来说就是类加载时，jvm通过字节码class文件，生成相应的对象。</p></div><span id="more"></span><p>我们都知道java类的执行需要编译、加载、连接、初始化四步。</p><ul><li>编译：java文件编译后生成 <strong>.class</strong> 字节码文件。</li><li>加载：类加载器负责根据一个类的全限定名来读取此类的二进制字节流到JVM内部，并存储在运行时内存区的方法区，然后将其转换为一个与目标类型对应的java.lang.Class对象实例</li><li>连接：细分三步<ul><li>验证：格式（class文件规范） 语义（final类是否有子类） 操作</li><li>准备：静态变量赋初值和内存空间，final修饰的内存空间直接赋原值，此处不是用户指定的初值。</li><li>解析：符号引用转化为直接引用，分配地址</li></ul></li><li>初始化：有父类先初始化父类，然后初始化自己；将static修饰代码执行一遍，如果是静态变量，则用用户指定值覆盖原有初值；如果是代码块，则执行一遍操作。</li></ul><p>Java的反射就是利用上面第二步加载到jvm中的 <strong>.class</strong> 文件来进行操作的。 <strong>.class</strong> 文件中包含java类的所有信息，当你不知道某个类具体信息时，可以使用反射获取class，然后进行各种操作。</p><p>Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。</p><p>总结说：反射就是把java类中的各种成分映射成一个个的Java对象，并且可以进行操作。</p><h2 id="3-反射创建类实例的三种方式">3. 反射创建类实例的三种方式</h2><p>JavaBean</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>liang<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>bloglog<span class="token punctuation">.</span>article</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo24_Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Demo24_Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Demo24_Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-1-对象-getClass">3.1 对象.getClass()</h3><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Demo24_Car</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo24_Car</span><span class="token punctuation">(</span><span class="token string">"火车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Class</span> class1 <span class="token operator">=</span> d1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-2-类-class">3.2 类.class</h3><p>需要输入一个明确的类，任意一个类型都有一个静态的class属性</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> class3 <span class="token operator">=</span> <span class="token class-name">Demo24_Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></code></pre><h3 id="3-3-Class-forName-“全路径名称”">3.3 Class.forName(“全路径名称”)</h3><ul><li>通过Class类的一个 <strong>forName（String className)</strong> 静态方法返回一个Class对象，className必须是全路径名称</li><li>全路径名称只需要以字符串的方式传入即可</li><li>Class.forName() 有 ClassNotFoundException 异常</li></ul><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> class4 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.liang.stu.bloglog.article.Demo24_Car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="Class-forName-和-ClassLoader-区别">Class.forName 和 ClassLoader 区别</h2><ul><li>Java中Class.forName和classloader都可以用来对类进行加载。</li><li>Class.forName除了将类的 .class文件 加载到jvm中之外，还会对类进行解释，执行类中的static块。</li><li>而classloader只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容，只有在newInstance才会去执行static块。</li><li>Class.forName(name,initialize,loader)带参数也可控制是否加载static块。</li></ul><h2 id="4-参考链接">4. 参考链接</h2><ol><li><a href="https://blog.csdn.net/riemann_/article/details/86766915" title="点我查看原文">Java反射机制的原理以及创建类实例的三种方式是什么？</a></li><li><a href="https://blog.csdn.net/h2604396739/article/details/83109292" title="点我查看原文">java反射的原理，作用</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-什么是Java反射机制？&quot;&gt;1. 什么是Java反射机制？&lt;/h2&gt;
&lt;p&gt;java反射机制就是java程序在运行的时候 &lt;strong&gt;动态&lt;/strong&gt; 的 &lt;strong&gt;创建类并调用类的方法以及属性&lt;/strong&gt; 。&lt;/p&gt;
&lt;h2 id=&quot;2-反射的原理？&quot;&gt;2. 反射的原理？&lt;/h2&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;简单来说就是类加载时，jvm通过字节码class文件，生成相应的对象。&lt;/p&gt;
&lt;/div&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.aliang.link/Java/"/>
    
    
    <category term="Java" scheme="https://www.aliang.link/tags/Java/"/>
    
    <category term="反射" scheme="https://www.aliang.link/tags/%E5%8F%8D%E5%B0%84/"/>
    
    <category term="编程" scheme="https://www.aliang.link/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>HashMap 相关问题总结</title>
    <link href="https://www.aliang.link/blog/210401.html"/>
    <id>https://www.aliang.link/blog/210401.html</id>
    <published>2021-04-01T08:15:27.000Z</published>
    <updated>2022-11-22T07:45:30.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-基本概念">1. 基本概念</h2><h3 id="1-1-HashMap：">1.1 HashMap：</h3><p>HashMap是一个实现了Map接口的基于哈希表的类。</p><p>查找时，给出一个关键字key，我们可以根据hash算法计算出key-value的存储位置然后取出value。</p><p>存储时，我们根据哈希算法计算出该键值对应该存储的位置，将其存进去。</p><p>HashMap是以键值对的形式存储和操作数据的容器类型。插入和查询“键值对”的开销是固定的，可以通过构造器设置容量和加载因子，以调整容器性能。</p><p>推介加载因子为0.75，0.75是一个折中选择后的推介值，能解决大多数场景问题。</p><span id="more"></span><h3 id="1-2-HashTable：">1.2 HashTable：</h3><p>HashTable是线程安全的，用了synchronized限制了每个方法，并且Key和Value都不能是Null。其它和HashMap没什么差别。</p><h3 id="1-3-LinkHashMap：">1.3 LinkHashMap：</h3><p>LinkHashMap 类似HashMap，但是迭代遍历他的时候，取得“键值对”的顺序是其插入的顺序，可以理解为“桶结构” 。</p><p>速度比hashMap慢一点，而迭代的访问速度反而更快，用链表来维护内部数据。</p><p>LinkedHashMap是HashMap的子类，意味着它继承了HashMap的特性。</p><p>除此之外，LinkedHashMap还保存了插入顺序。</p><h3 id="1-4-TreeMap：">1.4 TreeMap：</h3><p>TreeMap则是基于红黑树的一种提供顺序访问的Map。</p><p>和HashMap不同，它的get、put、remove之类操作都是O（log(n)）的时间复杂度，具体顺序可以由指定 的Comparator来决定（String对象已经实现Comparator），或者根据键的自然顺序来判断。</p><p>TreeMap得到的结果都经过排序的。</p><p>TreeMap是Map中唯一一个带有subMap（）方法的Map，它可以返回一个子树。</p><h3 id="1-5-ConcurrentHashMap：">1.5 ConcurrentHashMap：</h3><h2 id="2-HashMap、HashTable和ConcurrentHashMap的线程安全问题">2. HashMap、HashTable和ConcurrentHashMap的线程安全问题</h2><table><thead><tr><th style="text-align:center">类型</th><th style="text-align:center">安全问题</th></tr></thead><tbody><tr><td style="text-align:center"><strong>HashMap</strong></td><td style="text-align:center">线程不安全的</td></tr><tr><td style="text-align:center"><strong>HashTable</strong></td><td style="text-align:center">锁住整张hash表，让线程独占。hashMap允许为空。通过分析Hashtable就知道，synchronized是针对整张Hash表的，即每次锁住整张表让线程独占，安全的背后是巨大的资源浪费</td></tr><tr><td style="text-align:center"><strong>ConcurrentHashMap</strong></td><td style="text-align:center">一个更快的hashmap，它提供了好得多的并发性。多个读操作几乎总可以并发地执行。他是锁段（默认：把hash表分为16个段），在get，put，remove等操作中，ConcurrentHashMap只锁定当前需要用到的段，只有在求size的时候才锁定整张hash表。</td></tr></tbody></table><h2 id="参考链接">参考链接</h2><ol><li><a href="https://blog.csdn.net/q624726271/article/details/79505414" title="点我查看原文">HashMap的存储结构简析和HashTable的区别</a></li><li><a href="https://blog.csdn.net/wangyejing1870/article/details/88325565" title="点我查看原文">HashMap、HashTable、LinkedHashMap、TreeMap初理解</a></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-基本概念&quot;&gt;1. 基本概念&lt;/h2&gt;
&lt;h3 id=&quot;1-1-HashMap：&quot;&gt;1.1 HashMap：&lt;/h3&gt;
&lt;p&gt;HashMap是一个实现了Map接口的基于哈希表的类。&lt;/p&gt;
&lt;p&gt;查找时，给出一个关键字key，我们可以根据hash算法计算出key-value的存储位置然后取出value。&lt;/p&gt;
&lt;p&gt;存储时，我们根据哈希算法计算出该键值对应该存储的位置，将其存进去。&lt;/p&gt;
&lt;p&gt;HashMap是以键值对的形式存储和操作数据的容器类型。插入和查询“键值对”的开销是固定的，可以通过构造器设置容量和加载因子，以调整容器性能。&lt;/p&gt;
&lt;p&gt;推介加载因子为0.75，0.75是一个折中选择后的推介值，能解决大多数场景问题。&lt;/p&gt;</summary>
    
    
    
    <category term="Java" scheme="https://www.aliang.link/Java/"/>
    
    
    <category term="Java" scheme="https://www.aliang.link/tags/Java/"/>
    
    <category term="编程" scheme="https://www.aliang.link/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="HashMap" scheme="https://www.aliang.link/tags/HashMap/"/>
    
  </entry>
  
</feed>
