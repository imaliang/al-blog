<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>什么是反射</title>
    <url>//blog/210402.html</url>
    <content><![CDATA[<h2 id="1-什么是Java反射机制？">1. 什么是Java反射机制？</h2>
<p>java反射机制就是java程序在运行的时候 <strong>动态</strong> 的 <strong>创建类并调用类的方法以及属性</strong> 。</p>
<h2 id="2-反射的原理？">2. 反射的原理？</h2>
<div class="note info"><p>简单来说就是类加载时，jvm通过字节码class文件，生成相应的对象。</p>
</div>
<span id="more"></span>
<p>我们都知道java类的执行需要编译、加载、连接、初始化四步。</p>
<ul>
<li>编译：java文件编译后生成 <strong>.class</strong> 字节码文件。</li>
<li>加载：类加载器负责根据一个类的全限定名来读取此类的二进制字节流到JVM内部，并存储在运行时内存区的方法区，然后将其转换为一个与目标类型对应的java.lang.Class对象实例</li>
<li>连接：细分三步
<ul>
<li>验证：格式（class文件规范） 语义（final类是否有子类） 操作</li>
<li>准备：静态变量赋初值和内存空间，final修饰的内存空间直接赋原值，此处不是用户指定的初值。</li>
<li>解析：符号引用转化为直接引用，分配地址</li>
</ul>
</li>
<li>初始化：有父类先初始化父类，然后初始化自己；将static修饰代码执行一遍，如果是静态变量，则用用户指定值覆盖原有初值；如果是代码块，则执行一遍操作。</li>
</ul>
<p>Java的反射就是利用上面第二步加载到jvm中的 <strong>.class</strong> 文件来进行操作的。 <strong>.class</strong> 文件中包含java类的所有信息，当你不知道某个类具体信息时，可以使用反射获取class，然后进行各种操作。</p>
<p>Java反射就是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意方法和属性；并且能改变它的属性。</p>
<p>总结说：反射就是把java类中的各种成分映射成一个个的Java对象，并且可以进行操作。</p>
<h2 id="3-反射创建类实例的三种方式">3. 反射创建类实例的三种方式</h2>
<p>JavaBean</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>liang<span class="token punctuation">.</span>stu<span class="token punctuation">.</span>bloglog<span class="token punctuation">.</span>article</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo24_Car</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">Demo24_Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Demo24_Car</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="3-1-对象-getClass">3.1 对象.getClass()</h3>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Demo24_Car</span> d1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo24_Car</span><span class="token punctuation">(</span><span class="token string">"火车"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">Class</span> class1 <span class="token operator">=</span> d1<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h3 id="3-2-类-class">3.2 类.class</h3>
<p>需要输入一个明确的类，任意一个类型都有一个静态的class属性</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> class3 <span class="token operator">=</span> <span class="token class-name">Demo24_Car</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span></code></pre>
<h3 id="3-3-Class-forName-“全路径名称”">3.3 Class.forName(“全路径名称”)</h3>
<ul>
<li>通过Class类的一个 <strong>forName（String className)</strong> 静态方法返回一个Class对象，className必须是全路径名称</li>
<li>全路径名称只需要以字符串的方式传入即可</li>
<li>Class.forName() 有 ClassNotFoundException 异常</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Class</span> class4 <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.liang.stu.bloglog.article.Demo24_Car"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="Class-forName-和-ClassLoader-区别">Class.forName 和 ClassLoader 区别</h2>
<ul>
<li>Java中Class.forName和classloader都可以用来对类进行加载。</li>
<li>Class.forName除了将类的 .class文件 加载到jvm中之外，还会对类进行解释，执行类中的static块。</li>
<li>而classloader只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容，只有在newInstance才会去执行static块。</li>
<li>Class.forName(name,initialize,loader)带参数也可控制是否加载static块。</li>
</ul>
<h2 id="4-参考链接">4. 参考链接</h2>
<ol>
<li><a href="https://blog.csdn.net/riemann_/article/details/86766915" title="点我查看原文">Java反射机制的原理以及创建类实例的三种方式是什么？</a></li>
<li><a href="https://blog.csdn.net/h2604396739/article/details/83109292" title="点我查看原文">java反射的原理，作用</a></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反射</tag>
        <tag>编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Java动态代理</title>
    <url>//blog/220818.html</url>
    <content><![CDATA[<h2 id="什么是动态代理">什么是动态代理</h2>
<blockquote>
<p>动态代理就是在 <strong>程序运行期</strong> ，创建目标对象的 <strong>代理对象</strong> ，对 <strong>目标对象</strong> 中的 <strong>方法</strong> 进行 <strong>功能性增强</strong> 的一种技术</p>
</blockquote>
<p>核心概念：<br>
动态代理能够让真实对象专注于自己的核心功能，让代理对象拦截客户对真实对象的访问，另外可以在不修改方法源码的情况下，增强被代理对象的方法的功能。</p>
<p>我们在做项目的时候把日志和异常统一处理就是利用了动态代理，让我们能够关注核心业务。</p>
<p>举个例子，小明（真实角色）的主要业务是唱歌，在还没火的时候自己跑东跑西去街头、酒吧等地方唱歌，在这期间需要自己负责找合适的场地，以及和酒吧老板谈工资等业务，突然有一天他火了，很多人要请他唱歌，所有的事亲历亲为他根本忙不过来，这个时候经纪人（代理角色）出现了，客户们要请小明唱歌，不能直接找到小明了，而是需要和经纪人谈，经纪人在商业等方面的理解比小明强（对代理对象的方法增强）。这样小明就可以专注于自己的唱歌业务了，经纪人的存在就是拦截了客户对小明（真实对象）的访问。</p>
<span id="more"></span>
<h2 id="动态代理的常用方式">动态代理的常用方式</h2>
<ol>
<li>JDK动态代理：JDK自带的动态代理功能（基于接口的动态代理），它的实现前提是现有类必须拥有一个接口，因为它是通过 <strong>对现有类接口的实现</strong> 来完成的。</li>
<li>CGLIB代理：一个开源工具包（基于类的动态代理），它的实现是通过 <strong>继承现有类</strong> ，然后 <strong>重写现有类的方法</strong> 实现的。</li>
</ol>
<h2 id="JDK动态代理">JDK动态代理</h2>
<div class="note info"><p>在java的 <code>java.lang.reflect</code> 包下提供了一个 <code>Proxy</code> 类和一个 <code>InvocationHandler</code> 接口，通过这个类和这个接口可以生成JDK动态代理类和动态代理对象。</p>
</div>
<h3 id="代码实现">代码实现</h3>
<p>我们以上述小明故事的场景，代理对象代理了小明的谈演出费的方法，看看具体怎么实现</p>
<ol>
<li>首先定义一个接口，这个接口是一个公共接口，这个接口有一个talk()方法</li>
</ol>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//谈薪</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="2">
<li>创建真实对象，实现上述接口，那么代理对象需要代理的就是这个接口</li>
</ol>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoMing</span> <span class="token keyword">implements</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小明成功收取唱歌费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="3">
<li>创建BrokerInvocationHandler类，这个类实现了 <code>InvocationHandler</code> 接口，我们通过这个类来动态生成代理类，InvocationHandler中有一个 <code>invoke</code> 方法，所有执行代理对象的方法都会被替换成执行invoke方法。然后通过反射在invoke方法中执行代理类的方法。在代理过程中，在执行代理类的方法前或者后可以执行自己的操作，这就是spring aop的主要原理。</li>
</ol>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//用这个类自动生成代理类（这个并不是代理类，我们通过这个生成代理类）</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrokerInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//被代理的接口</span>
    <span class="token keyword">private</span> <span class="token class-name">Person</span> person<span class="token punctuation">;</span>
 
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPerson</span><span class="token punctuation">(</span><span class="token class-name">Person</span> person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>person <span class="token operator">=</span> person<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//生成得到代理类 固定的代码</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>person<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     *处理代理实例并返回结果
     * @param proxy：代表动态代理对象
     * @param method：代表正在执行的方法
     * @param args：代表调用目标方法时传入的实参
     * @return
     * @throws Throwable
     */</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//代理过程中插入其他操作 对方法的增强</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户和经纪人交流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//动态代理本质就是使用反射机制！！如下</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="4">
<li>创建客户对象，通过BrokerInvocationHandler生成代理对象，客户通过访问代理对象实现谈薪</li>
</ol>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//真实角色</span>
        <span class="token class-name">XiaoMing</span> xiaoming <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//代理角色：现在没有 先得到BrokerInvocationHandler对象</span>
        <span class="token class-name">BrokerInvocationHandler</span> bid <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BrokerInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//通过调用程序处理角色来处理我们要调用的接口对象（知道我们要调用的是实现这个接口的哪个对象）</span>
        bid<span class="token punctuation">.</span><span class="token function">setPerson</span><span class="token punctuation">(</span>xiaoming<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//得到代理对象</span>
        <span class="token class-name">Person</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">)</span> bid<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这里的proxy是动态生成的，我们并未写!!</span>
        proxy<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="5">
<li>输出结果如下</li>
</ol>
<pre class="language-java" data-language="java"><code class="language-java">客户和经纪人交流
小明成功收取唱歌费</code></pre>
<h3 id="小结">小结</h3>
<p>可以看到，代理对象成功代理了小明的talk()方法；</p>
<blockquote>
<p>JDK动态代理首先需要创建一个interface然后一个class实现这个interface，然后对这个class进行代理，这个class必须实现至少一个接口，否则不能进行代理。</p>
</blockquote>
<div class="note info"><h4 id="JDK动态代理实现步骤总结">JDK动态代理实现步骤总结</h4>
<ol>
<li>实现 <code>InvocationHandler</code> 接口，将我们具体地增强逻辑代码写在 <code>invoke()</code> 方法中</li>
<li>使用 <code>Proxy</code> 类的 <code>newProxyInstance()</code> 方法去创建一个代理类的实例对象.</li>
<li>使用这个代理类对象</li>
</ol>
</div>
<h2 id="CGLIB动态代理">CGLIB动态代理</h2>
<p>JDK动态代理需要被代理类实现接口，如果被代理类没有实现接口，就只能使用CGLib了。</p>
<p>这种代理方式就叫做CGlib代理。</p>
<p>CGlib代理也叫作子类代理，他是通过在内存中构建一个子类，并在子类中采用方法拦截的技术拦截所有父类方法的调用，然后加入自己需要的操作。</p>
<p>因为使用的是继承的方式，所以不能代理final 类。</p>
<blockquote>
<p>CGLIB是一个功能强大，高性能的 <code>代码生成包</code> （CGLIB就是用来生成代码的，它也是在内存中动态的去生成的）</p>
</blockquote>
<h3 id="代码实现-2">代码实现</h3>
<p>同样以上述小明故事的场景，代理对象代理了小明的谈演出费的方法，看看具体怎么实现</p>
<ol>
<li>CGLIB是第三方提供的包，所以我们需要在maven工程中引入对应jar包</li>
</ol>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--CGLIB--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>cglib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<p>2.新建被代理类，此时并不需要再新建接口，因为我们现在是要使用CGLIB进行代理</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaoMing</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小明成功收取唱歌费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="3">
<li>继续创建BrokerInvocationHandler类，这个类实现了 <code>MethodInterceptor</code> 接口，我们通过这个类来动态生成代理类，此时，获得的代理类就是目标对象所属类的子类。</li>
</ol>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">Enhancer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodInterceptor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">net<span class="token punctuation">.</span>sf<span class="token punctuation">.</span>cglib<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span></span><span class="token class-name">MethodProxy</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BrokerInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">MethodInterceptor</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">//被代理类</span>
    <span class="token keyword">private</span> <span class="token class-name">XiaoMing</span> xiaoMing<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setXiaoMing</span><span class="token punctuation">(</span><span class="token class-name">XiaoMing</span> xiaoMing<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>xiaoMing <span class="token operator">=</span> xiaoMing<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">//生成得到代理类 固定的代码</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token comment">// 1. 创建Enhancer类对象，它类似于JDK动态代理中的Proxy类，该类就是用来获取代理对象的</span>
        <span class="token class-name">Enhancer</span> enhancer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Enhancer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2. 设置父类的字节码对象。为啥子要这样做呢？因为使用CGLIB生成的代理类是属于目标类的子类的，也就是说代理类是要继承自目标类的</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>xiaoMing<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3. 设置回调函数</span>
        enhancer<span class="token punctuation">.</span><span class="token function">setCallback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4. 创建代理对象</span>
        <span class="token keyword">return</span> enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//代理过程中插入其他操作 对方法的增强</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"客户和经纪人交流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> invoke <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>xiaoMing<span class="token punctuation">,</span> objects<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> invoke<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
```  

<span class="token number">4.</span> 创建测试类测试
```java
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMain</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//真实角色</span>
        <span class="token class-name">XiaoMing</span> xiaoMing <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaoMing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//代理角色：现在没有 先得到BrokerInvocationHandler对象</span>
        <span class="token class-name">BrokerInvocationHandler</span> brokerInvocationHandler <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">BrokerInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        brokerInvocationHandler<span class="token punctuation">.</span><span class="token function">setXiaoMing</span><span class="token punctuation">(</span>xiaoMing<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//得到代理对象</span>
        <span class="token class-name">XiaoMing</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">XiaoMing</span><span class="token punctuation">)</span> brokerInvocationHandler<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        proxy<span class="token punctuation">.</span><span class="token function">talk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ol start="5">
<li>输出结果如下</li>
</ol>
<pre class="language-java" data-language="java"><code class="language-java">客户和经纪人交流
小明成功收取唱歌费</code></pre>
<h3 id="小结-2">小结</h3>
<p>可以看到，代理对象同样成功代理了小明的talk()方法；</p>
<blockquote>
<p>CGLIB动态代理不需要创建一个interface，代理的class不需要实现接口。</p>
</blockquote>
<div class="note info"><h4 id="CGLIB动态代理实现步骤总结">CGLIB动态代理实现步骤总结</h4>
<ol>
<li>实现 <code>MethodInterceptor</code> 接口，将我们具体地增强逻辑代码写在 <code>intercept()</code> 方法中</li>
<li>使用 <code>Enhancer.create()</code> 方法去创建一个代理类的实例对象.</li>
<li>使用这个代理类对象</li>
</ol>
</div>
<h2 id="实现原理、优缺点、两者区别">实现原理、优缺点、两者区别</h2>
<table>
<thead>
<tr>
<th style="text-align:center"></th>
<th style="text-align:left">JDK</th>
<th style="text-align:left">CGLIB</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">实现原理</td>
<td style="text-align:left">JDK动态代理是由Java内部的反射机制来实现的，它是JDK原生就支持的一种代理方式，它的实现原理，就是通过让target类和代理类实现同一接口，代理类持有target对象，来达到方法拦截的作用，这样通过接口的方式有两个弊端，一个是必须保证target类有接口，第二个是如果想要对target类的方法进行代理拦截，那么就要保证这些方法都要在接口中声明，实现上略微有点限制。</td>
<td style="text-align:left">CGLIB动态代理是通过继承来实现的，底层则是借助asm(Java 字节码操控框架)来实现的（采用字节码的方式，给A类创建一个子类B，子类B使用方法拦截的技术拦截所有父类的方法调用）。</td>
</tr>
<tr>
<td style="text-align:center">优缺点</td>
<td style="text-align:left">JDK动态代理有一定的局限性，只能基于接口。</td>
<td style="text-align:left">CGLIB这种第三方类库实现的动态代理应用更加广泛，且在效率上更有优势。但无法处理final的情况，因为它通过继承实现。</td>
</tr>
<tr>
<td style="text-align:center">两者区别</td>
<td style="text-align:left">JDK动态代理只能对实现了接口的类生成代理，而不能针对类。</td>
<td style="text-align:left">CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法，但不能代理final修饰的类。</td>
</tr>
</tbody>
</table>
<h2 id="参考链接">参考链接</h2>
<ol>
<li><a href="https://blog.csdn.net/weixin_61543601/article/details/124656001" title="点我查看">https://blog.csdn.net/weixin_61543601/article/details/124656001</a></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>动态代理</tag>
      </tags>
  </entry>
  <entry>
    <title>神奇的正则表达式</title>
    <url>//blog/220629.html</url>
    <content><![CDATA[<h2 id="1-什么是正则表达式-？">1. 什么是正则表达式 ？</h2>
<p>  正则表达式，又称规则表达式。（英语：Regular Expression，在代码中常简写为regex、regexp或RE），计算机科学的一个概念。 --&gt; <a href="https://baike.baidu.com/item/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/1700215?fr=aladdin" title="点我去百度百科">百度百科</a><br>
  简单来说就是用 <strong>特殊字符</strong> 组成的 <strong>有一定规则</strong> 的逻辑公式(规则字符串)，主要用于对字符串进行过滤操作。</p>
<h2 id="2-正则表达式的三个功能-：">2. 正则表达式的三个功能 ：</h2>
<ul>
<li>快速 <strong><code>匹配</code></strong> 指定的字符串；</li>
<li><strong><code>替换</code></strong> 遵照正则表达式规则的字符串；</li>
<li>在目标字符串中 <strong><code>筛选</code></strong> 指定的子字符串；</li>
</ul>
<span id="more"></span>
<h2 id="3-正则表达式的语法：">3. 正则表达式的语法：</h2>
<p>  正则表达式是由 <strong><code>普通字符</code></strong> (例如:a-z)和 <strong><code>元字符</code></strong> (特殊字符)组成的文字模式，正则表达式作为一个模板(规则字符串,将目标字符串与所搜索的字符串进行匹配)</p>
<h2 id="4-常用元字符：">4. 常用元字符：</h2>
<h3 id="4-1-限定符">4.1 限定符</h3>
<table>
<thead>
<tr>
<th style="text-align:center">限定符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">?</td>
<td style="text-align:center">零次或一次匹配前面的字符或子表达式，相当于{0,1}</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td style="text-align:center">零次或多次匹配前面字符或子表达式，相当于{0,}</td>
</tr>
<tr>
<td style="text-align:center">+</td>
<td style="text-align:center">一次或多次匹配前面字符或子表达式，相当于{1,}</td>
</tr>
<tr>
<td style="text-align:center">{n}</td>
<td style="text-align:center">匹配n次</td>
</tr>
<tr>
<td style="text-align:center">{n,}</td>
<td style="text-align:center">匹配至少n次</td>
</tr>
<tr>
<td style="text-align:center">{n,m}</td>
<td style="text-align:center">匹配n到m次</td>
</tr>
</tbody>
</table>
<h3 id="4-2-匹配符">4.2 匹配符</h3>
<table>
<thead>
<tr>
<th style="text-align:center">匹配符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">\d</td>
<td style="text-align:center">数字字符匹配，等效于[0-9]</td>
</tr>
<tr>
<td style="text-align:center">\D</td>
<td style="text-align:center">非数字字符匹配，等效于[^0-9]</td>
</tr>
<tr>
<td style="text-align:center">\w</td>
<td style="text-align:center">匹配任何字类字符，等效于[A-Za-z0-9]</td>
</tr>
<tr>
<td style="text-align:center">\W</td>
<td style="text-align:center">匹配任何非字类字符，等效于[<sup>A-Z</sup>a-z^0-9]</td>
</tr>
<tr>
<td style="text-align:center">\f</td>
<td style="text-align:center">换页符匹配</td>
</tr>
<tr>
<td style="text-align:center">\n</td>
<td style="text-align:center">换行符匹配</td>
</tr>
<tr>
<td style="text-align:center">\r</td>
<td style="text-align:center">匹配一个回车符</td>
</tr>
<tr>
<td style="text-align:center">\s</td>
<td style="text-align:center">匹配任何空白字符</td>
</tr>
<tr>
<td style="text-align:center">\S</td>
<td style="text-align:center">匹配任何非空白字符</td>
</tr>
<tr>
<td style="text-align:center">\t</td>
<td style="text-align:center">制表符匹配</td>
</tr>
</tbody>
</table>
<h3 id="4-3-判断符">4.3 判断符</h3>
<table>
<thead>
<tr>
<th style="text-align:center">判断符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">x|y</td>
<td style="text-align:center">匹配x或y</td>
</tr>
<tr>
<td style="text-align:center">[xyz]</td>
<td style="text-align:center">匹配包含的任一字符</td>
</tr>
<tr>
<td style="text-align:center">[^xyz]</td>
<td style="text-align:center">反向匹配，匹配不包含任何字符</td>
</tr>
<tr>
<td style="text-align:center">[a-z]</td>
<td style="text-align:center">匹配指定范围的任何字符</td>
</tr>
</tbody>
</table>
<h3 id="4-4-定位符">4.4 定位符</h3>
<table>
<thead>
<tr>
<th style="text-align:center">定位符</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">^</td>
<td style="text-align:center">匹配输入字符串起始位置</td>
</tr>
<tr>
<td style="text-align:center">$</td>
<td style="text-align:center">匹配输入字符串结尾位置</td>
</tr>
<tr>
<td style="text-align:center">\b</td>
<td style="text-align:center">匹配字和空格间的位置</td>
</tr>
<tr>
<td style="text-align:center">\B</td>
<td style="text-align:center">非字边界匹配</td>
</tr>
</tbody>
</table>
<h2 id="5-常用正则表达式">5. 常用正则表达式</h2>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * 数字
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">NUMBERS</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\d+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 字母
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">WORD</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[a-zA-Z]+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 英文字母 、数字和下划线
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">GENERAL</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^\\w+$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 单个中文汉字
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">CHINESE</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[\u4E00-\u9FFF]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 中文汉字
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">CHINESES</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[\u4E00-\u9FFF]"</span> <span class="token operator">+</span> <span class="token string">"+"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 中文字、英文字母、数字和下划线
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">GENERAL_WITH_CHINESE</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^[\u4E00-\u9FFF\\w]+$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 分组
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">GROUP_VAR</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\$(\\d+)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 邮件，符合RFC 5322规范，正则来自：http://emailregex.com/
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">EMAIL</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(?:[a-z0-9!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+(?:\\.[a-z0-9!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)])"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 移动电话
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">MOBILE</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(?:0|86|\\+86)?1[3456789]\\d&#123;9&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 18位身份证号码
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">CITIZEN_ID</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[1-9]\\d&#123;5&#125;[1-2]\\d&#123;3&#125;((0\\d)|(1[0-2]))(([012]\\d)|3[0-1])\\d&#123;3&#125;(\\d|X|x)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 邮编
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">ZIP_CODE</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[1-9]\\d&#123;5&#125;(?!\\d)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 生日
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">BIRTHDAY</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^(\\d&#123;2,4&#125;)([/\\-.年]?)(\\d&#123;1,2&#125;)([/\\-.月]?)(\\d&#123;1,2&#125;)日?$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 时间正则
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Pattern</span> <span class="token constant">TIME</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\d&#123;1,2&#125;:\\d&#123;1,2&#125;(:\\d&#123;1,2&#125;)?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * URL
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">URL</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"[a-zA-z]+://[^\\s]*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * Http URL
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">URL_HTTP</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(https://|http://)?([\\w-]+\\.)+[\\w-]+(:\\d+)*(/[\\w- ./?%&amp;=]*)?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * UUID
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">UUID</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^[0-9a-z]&#123;8&#125;-[0-9a-z]&#123;4&#125;-[0-9a-z]&#123;4&#125;-[0-9a-z]&#123;4&#125;-[0-9a-z]&#123;12&#125;$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 不带横线的UUID
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">UUID_SIMPLE</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^[0-9a-z]&#123;32&#125;$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 货币
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">MONEY</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^(\\d+(?:\\.\\d+)?)$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * MAC地址正则
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Pattern</span> <span class="token constant">MAC_ADDRESS</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"((?:[A-F0-9]&#123;1,2&#125;[:-])&#123;5&#125;[A-F0-9]&#123;1,2&#125;)|(?:0x)(\\d&#123;12&#125;)(?:.+ETHER)"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 16进制字符串
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Pattern</span> <span class="token constant">HEX</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^[a-f0-9]+$"</span><span class="token punctuation">,</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 中国车牌号码（兼容新能源车牌）
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">PLATE_NUMBER</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>
        <span class="token string">"^(([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-Z](([0-9]&#123;5&#125;[ABCDEFGHJK])|([ABCDEFGHJK]([A-HJ-NP-Z0-9])[0-9]&#123;4&#125;)))|"</span> <span class="token operator">+</span>
                <span class="token string">"([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领]\\d&#123;3&#125;\\d&#123;1,3&#125;[领])|"</span> <span class="token operator">+</span>
                <span class="token string">"([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-Z][A-HJ-NP-Z0-9]&#123;4&#125;[A-HJ-NP-Z0-9挂学警港澳使领]))$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * 社会统一信用代码
 * 第一部分：登记管理部门代码1位 (数字或大写英文字母)
 * 第二部分：机构类别代码1位 (数字或大写英文字母)
 * 第三部分：登记管理机关行政区划码6位 (数字)
 * 第四部分：主体标识码（组织机构代码）9位 (数字或大写英文字母)
 * 第五部分：校验码1位 (数字或大写英文字母)
 */</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Pattern</span> <span class="token constant">CREDIT_CODE</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"^[0-9A-HJ-NPQRTUWXY]&#123;2&#125;\\d&#123;6&#125;[0-9A-HJ-NPQRTUWXY]&#123;10&#125;$"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * IP v4
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">IPV4</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"\\b((?!\\d\\d\\d)\\d+|1\\d\\d|2[0-4]\\d|25[0-5])\\.((?!\\d\\d\\d)\\d+|1\\d\\d|2[0-4]\\d|25[0-5])\\.((?!\\d\\d\\d)\\d+|1\\d\\d|2[0-4]\\d|25[0-5])\\.((?!\\d\\d\\d)\\d+|1\\d\\d|2[0-4]\\d|25[0-5])\\b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">/**
 * IP v6
 */</span>
<span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">Pattern</span> <span class="token constant">IPV6</span> <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token string">"(([0-9a-fA-F]&#123;1,4&#125;:)&#123;7&#125;[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,7&#125;:|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,6&#125;:[0-9a-fA-F]&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,5&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,2&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,3&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,3&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,4&#125;|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,2&#125;(:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,5&#125;|[0-9a-fA-F]&#123;1,4&#125;:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,6&#125;)|:((:[0-9a-fA-F]&#123;1,4&#125;)&#123;1,7&#125;|:)|fe80:(:[0-9a-fA-F]&#123;0,4&#125;)&#123;0,4&#125;%[0-9a-zA-Z]+|::(ffff(:0&#123;1,4&#125;)?:)?((25[0-5]|(2[0-4]|1?[0-9])?[0-9])\\.)&#123;3&#125;(25[0-5]|(2[0-4]|1?[0-9])?[0-9])|([0-9a-fA-F]&#123;1,4&#125;:)&#123;1,4&#125;:((25[0-5]|(2[0-4]|1?[0-9])?[0-9])\\.)&#123;3&#125;(25[0-5]|(2[0-4]|1?[0-9])?[0-9]))"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="6-java中如何使用正则表达式">6. java中如何使用正则表达式</h2>
<h3 id="6-1-示例">6.1 示例</h3>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token punctuation">;</span>
    <span class="token comment">/* 第一个反斜杠意为转义，\w意为匹配任何字类字符 &#123;3,&#125;意为至少匹配3次  */</span>
    <span class="token class-name">String</span> regex <span class="token operator">=</span> <span class="token string">"\\w&#123;3,&#125;"</span><span class="token punctuation">;</span>
    <span class="token comment">/* 直接匹配 */</span>
    <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"直接匹配："</span> <span class="token operator">+</span> b1<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 构造相关类匹配 */</span>
    <span class="token class-name">Pattern</span> p <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span>regex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Matcher</span> m <span class="token operator">=</span> p<span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> b2 <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"构造匹配："</span> <span class="token operator">+</span> b2<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">/* 替换、过滤 */</span>
    <span class="token class-name">String</span> input <span class="token operator">=</span> <span class="token string">"hello &lt;b>Regular&lt;/b> &lt;i>Expression&lt;/i>"</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> regex1 <span class="token operator">=</span> <span class="token string">"&lt;\\w+>|&lt;/\\w+>"</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> output <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span>regex1<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"替换过滤："</span> <span class="token operator">+</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h3 id="6-2-运行结果">6.2 运行结果</h3>
<pre class="language-java" data-language="java"><code class="language-java">直接匹配：<span class="token boolean">true</span>
构造匹配：<span class="token boolean">true</span>
替换过滤：hello <span class="token class-name">Regular</span> <span class="token class-name">Expression</span></code></pre>
<h2 id="7-参考链接">7. 参考链接</h2>
<ol>
<li><a href="https://blog.csdn.net/qq_36962569/article/details/80145139" title="点我查看原文">正则表达式基本语法总结</a></li>
<li><a href="https://www.cnblogs.com/hanhanhan/p/5785613.html" title="点我查看原文">正则表达式个人总结(一)：正则表达式语法的深入理解第一部分</a></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title>QPS、PV、UV 等常用术语介绍</title>
    <url>//blog/210123.html</url>
    <content><![CDATA[<h2 id="1-简单介绍">1. 简单介绍</h2>
<table>
<thead>
<tr>
<th style="text-align:center">术语</th>
<th style="text-align:center">意义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>QPS</strong></td>
<td style="text-align:center">每秒查询数</td>
</tr>
<tr>
<td style="text-align:center"><strong>TPS</strong></td>
<td style="text-align:center">服务器每秒处理的事务数</td>
</tr>
<tr>
<td style="text-align:center"><strong>RPS</strong></td>
<td style="text-align:center">每秒处理事务率</td>
</tr>
<tr>
<td style="text-align:center"><strong>HPS</strong></td>
<td style="text-align:center">用户每秒发起的请求率</td>
</tr>
<tr>
<td style="text-align:center"><strong>PV</strong></td>
<td style="text-align:center">页面浏览量</td>
</tr>
<tr>
<td style="text-align:center"><strong>UV</strong></td>
<td style="text-align:center">页面访问数</td>
</tr>
<tr>
<td style="text-align:center"><strong>IP</strong></td>
<td style="text-align:center">独立 IP 数</td>
</tr>
<tr>
<td style="text-align:center"><strong>GMV</strong></td>
<td style="text-align:center">网站的成交金额</td>
</tr>
<tr>
<td style="text-align:center"><strong>RT</strong></td>
<td style="text-align:center">响应时间</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h2 id="2-QPS">2. QPS</h2>
<p>QPS ( Queries Per Second ) ，每秒查询数，每秒能够成功响应的查询次数。</p>
<p>QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。</p>
<p>它代表的是服务器的机器的性能最大吞吐能力。</p>
<p>计算方式：<strong>QPS = req/sec = 请求数/秒</strong>。</p>
<h3 id="2-1-峰值QPS和机器计算公式">2.1 峰值QPS和机器计算公式</h3>
<p>原理：假设每天80%的访问都集中在20%的时间里，这20%时间叫做<strong>峰值时间</strong></p>
<p>公式：峰值时间每秒请求数(QPS) = ( 总PV数 * 80% ) / ( 每天的秒数 * 20% )</p>
<p>机器：需要的机器 = 峰值时间每秒QPS / 单台机器的QPS</p>
<h3 id="2-2-举例">2.2 举例</h3>
<ul>
<li>问：每天300w PV 的在单台机器上，这台机器需要多少QPS ？（每天80%的访问都集中在20%的时间里）</li>
</ul>
<p>答：( 3000000 * 0.8 ) / (86400 * 0.2 ) = 139 (QPS)</p>
<ul>
<li>问：如果一台机器的QPS是58，需要几台机器来支持？</li>
</ul>
<p>答：139 / 58 = 3</p>
<h2 id="3-TPS">3. TPS</h2>
<p>TPS ( Transactions Per Second )，每秒传输的事物处理个数，即服务器每秒处理的事务数。</p>
<p>TPS包括一条消息入和一条消息出，加上一次用户数据库访问。（业务TPS = CAPS × 每个呼叫平均TPS）</p>
<p>TPS是软件测试结果的测量单位。</p>
<p>一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。</p>
<p>客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数。</p>
<p>一般的，评价系统性能均以每秒钟完成的技术交易的数量来衡量。系统整体处理能力取决于处理能力最低模块的TPS值。</p>
<h2 id="4-RPS">4. RPS</h2>
<p>RPS ( Requests Per Second )，代表吞吐率，等效于QPS。</p>
<p>吞吐率是服务器并发处理能力的量化描述，单位是 reqs/s，指的是某个并发用户数下单位时间内处理的请求数。</p>
<p>某个并发用户数下 <strong>单位时间内能处理的最大的请求数</strong> ，称之为 <strong>最大吞吐率</strong> 。</p>
<p>RPS 与 QPS 其实可以看作同一个统计方式，只是叫法不同而已。</p>
<h2 id="5-HPS">5. HPS</h2>
<p>HPS ( Hits per Second )，每秒点击次数。</p>
<p>是指在一秒钟的时间内用户对Web页面的链接、提交按钮等点击总和。</p>
<p>它一般和TPS成正比关系，是B/S系统中非常重要的性能指标之一。</p>
<h2 id="6-PV">6. PV</h2>
<p>PV ( page view ) ，页面浏览量。</p>
<p>通常是衡量一个网络新闻频道或网站甚至一条网络新闻的主要指标。</p>
<p>用户每一次对网站中的每个页面访问均被记录 1 次。用户对同一页面的多次刷新，访问量累计。</p>
<h2 id="7-UV">7. UV</h2>
<p>UV ( Unique Visitor ) ，即页面访问数，</p>
<p>统计 1 天内访问某站点的用户数(以 cookie 为依据)，一台电脑终端为一个访客。可以理解成访问某网站的电脑的数量。</p>
<p>网站判断来访电脑的身份是通过来访电脑的 cookies 实现的。</p>
<p>如果更换了 IP 后但不清除 cookies，再访问相同网站，该网站的统计中 UV 数是不变的。</p>
<p>如果用户不保存 cookies 访问、清除了 cookies 或者更换设备访问，计数会加 1。</p>
<p>00:00-24:00 内相同的客户端多次访问只计为 1 个访客。</p>
<h2 id="8-IP">8. IP</h2>
<p>IP ( Internet Protocol ) ，独立 IP 数，本意本是指网络协议，在数据统计这块指通过ip的访问量。即指 1 天内有多少个独立的 IP 浏览了页面。</p>
<p>同一 IP 不管访问了几个页面，独立 IP 数均为 1；不同的 IP 浏览页面，计数会加 1。</p>
<p>IP 是基于用户广域网 IP 地址来区分不同的访问者的，所以，多个用户（多个局域网 IP）在同一个路由器（同一个广域网 IP）内上网，可能被记录为一个独立 IP 访问者。</p>
<p>如果用户不断更换 IP，则有可能被多次统计。</p>
<h2 id="9-GMV">9. GMV</h2>
<p>GMV ( Gross Merchandise Volume ) 电商常用术语，主要是指网站的成交金额，而这里的成交金额包括：付款金额和未付款。</p>
<p>只要是订单，不管消费者是否付款、卖家是否发货、是否退货，都可放进 GMV 这个“大箩筐”里。</p>
<p><strong>GMV = 销售额 + 取消订单金额 + 拒收订单金额 + 退货订单金额</strong></p>
<p><strong>GMV常用来研究顾客的购买意向。</strong></p>
<h2 id="10-RT">10. RT</h2>
<p>RT ( Response Time ) 响应时间，是指系统对请求作出响应的时间。</p>
<p>直观上看，这个指标与人对软件性能的主观感受是非常一致的，因为它完整地记录了整个计算机系统处理请求的时间。</p>
<p>由于一个系统通常会提供许多功能，而不同功能的处理逻辑也千差万别，因而不同功能的响应时间也不尽相同，甚至同一功能在不同输入数据的情况下响应时间也不相同。<br>
所以，在讨论一个系统的响应时间时，人们通常是指该系统所有功能的平均时间或者所有功能的最大响应时间。当然，往往也需要对每个或每组功能讨论其平均响应时间和最大响应时间。<br>
　　<br>
对于单机的没有并发操作的应用系统而言，人们普遍认为响应时间是一个合理且准确的性能指标。</p>
<p>需要指出的是，响应时间的绝对值并不能直接反映软件的性能的高低，软件性能的高低实际上取决于用户对该响应时间的接受程度。</p>
<p>对于一个游戏软件来说，响应时间小于100毫秒应该是不错的，响应时间在1秒左右可能属于勉强可以接受，如果响应时间达到3秒就完全难以接受了。而对于编译系统来说，完整编译一个较大规模软件的源代码可能需要几十分钟甚至更长时间，但这些响应时间对于用户来说都是可以接受的。</p>
<h2 id="11-吞吐量">11. 吞吐量</h2>
<p>吞吐量 ( Throughput ) 是指系统在单位时间内处理请求的数量。</p>
<p>对于无并发的应用系统而言，吞吐量与响应时间成严格的反比关系，实际上此时吞吐量就是响应时间的倒数。对于单用户的系统，响应时间（或者系统响应时间和应用延迟时间）可以很好地度量系统的性能，但对于并发系统，通常需要用吞吐量作为性能指标。<br>
　　<br>
对于一个多用户的系统，如果只有一个用户使用时系统的平均响应时间是t，当有你n个用户使用时，每个用户看到的响应时间通常并不是n×t，而往往比n×t小很多（当然，在某些特殊情况下也可能比n×t大，甚至大很多）。这是因为处理每个请求需要用到很多资源，由于每个请求的处理过程中有许多不走难以并发执行，这导致在具体的一个时间点，所占资源往往并不多。</p>
<p>也就是说在处理单个请求时，在每个时间点都可能有许多资源被闲置，当处理多个请求时，如果资源配置合理，每个用户看到的平均响应时间并不随用户数的增加而线性增加。实际上，不同系统的平均响应时间随用户数增加而增长的速度也不大相同，这也是采用 <strong>吞吐量来度量并发系统的性能</strong> 的主要原因。一般而言，吞吐量是一个比较通用的指标，两个具有不同用户数和用户使用模式的系统，如果其最大吞吐量基本一致，则可以判断两个系统的处理能力基本一致。</p>
<h2 id="12-并发用户数">12. 并发用户数</h2>
<p>并发用户数是指系统可以 <strong>同时承载的正常使用系统功能的用户的数量</strong> 。</p>
<p>与吞吐量相比，并发用户数是一个更直观但也更笼统的性能指标。实际上，并发用户数是一个非常不准确的指标，因为用户不同的使用模式会导致不同用户在单位时间发出不同数量的请求。</p>
<p>一网站系统为例，假设用户只有注册后才能使用，但注册用户并不是每时每刻都在使用该网站，因此具体一个时刻只有部分注册用户同时在线，在线用户就在浏览网站时会花很多时间阅读网站上的信息，因而具体一个时刻只有部分在线用户同时向系统发出请求。这样，对于网站系统我们会有三个关于用户数的统计数字：注册用户数、在线用户数和同时发请求用户数。由于注册用户可能长时间不登陆网站，使用注册用户数作为性能指标会造成很大的误差。而在线用户数和同事发请求用户数都可以作为性能指标。相比而言，以在线用户作为性能指标更直观些，而以同时发请求用户数作为性能指标更准确些。</p>
<h2 id="13-参考链接">13. 参考链接</h2>
<ol>
<li><a href="https://blog.csdn.net/qq_31964019/article/details/103543370" title="点我查看">PV、UV、IP、TPS、QPS、RPS、两天、吞吐量、 并发用户数 术语</a></li>
<li><a href="https://blog.csdn.net/belongtocode/article/details/102303769" title="点我查看">QPS,TPS，吞吐量…常见术语解析</a></li>
<li><a href="https://blog.csdn.net/sendht/article/details/17076657" title="点我查看">QPS术语介绍</a></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>常用术语</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap 的 7 种遍历方式与性能分析</title>
    <url>//blog/201219.html</url>
    <content><![CDATA[<h2 id="一-HashMap-的-7-种遍历方式">一. HashMap 的 7 种遍历方式</h2>
<p><strong>首先初始化个集合map</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 添加数据</span>
<span class="token keyword">static</span> <span class="token punctuation">&#123;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"路飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"索隆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"娜美"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">"海贼王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"尾田荣一郎"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<span id="more"></span>
<h3 id="1-Iterator-EntrySet-遍历">1. Iterator EntrySet 遍历</h3>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entrySetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>运行输出：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span> <span class="token operator">:</span> 路飞
<span class="token number">2</span> <span class="token operator">:</span> 索隆
<span class="token number">3</span> <span class="token operator">:</span> 娜美
<span class="token number">4</span> <span class="token operator">:</span> 海贼王
<span class="token number">5</span> <span class="token operator">:</span> 尾田荣一郎</code></pre>
<h3 id="2-Iterator-KeySet-遍历">2.Iterator KeySet 遍历</h3>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keySetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Integer</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>运行输出：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span> <span class="token operator">:</span> 路飞
<span class="token number">2</span> <span class="token operator">:</span> 索隆
<span class="token number">3</span> <span class="token operator">:</span> 娜美
<span class="token number">4</span> <span class="token operator">:</span> 海贼王
<span class="token number">5</span> <span class="token operator">:</span> 尾田荣一郎</code></pre>
<h3 id="3-For-Each-EntrySet-遍历">3.For Each EntrySet 遍历</h3>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachEntrySetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>运行输出：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span> <span class="token operator">:</span> 路飞
<span class="token number">2</span> <span class="token operator">:</span> 索隆
<span class="token number">3</span> <span class="token operator">:</span> 娜美
<span class="token number">4</span> <span class="token operator">:</span> 海贼王
<span class="token number">5</span> <span class="token operator">:</span> 尾田荣一郎</code></pre>
<h3 id="4-For-Each-KeySet-遍历">4.For Each KeySet 遍历</h3>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachKeySetTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>运行输出：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span> <span class="token operator">:</span> 路飞
<span class="token number">2</span> <span class="token operator">:</span> 索隆
<span class="token number">3</span> <span class="token operator">:</span> 娜美
<span class="token number">4</span> <span class="token operator">:</span> 海贼王
<span class="token number">5</span> <span class="token operator">:</span> 尾田荣一郎</code></pre>
<h3 id="5-Lambda-表达式-遍历">5.Lambda 表达式 遍历</h3>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambdaTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>运行输出：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span> <span class="token operator">:</span> 路飞
<span class="token number">2</span> <span class="token operator">:</span> 索隆
<span class="token number">3</span> <span class="token operator">:</span> 娜美
<span class="token number">4</span> <span class="token operator">:</span> 海贼王
<span class="token number">5</span> <span class="token operator">:</span> 尾田荣一郎</code></pre>
<h3 id="6-stream-单线程遍历">6.stream 单线程遍历</h3>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">streamTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>运行输出：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span> <span class="token operator">:</span> 路飞
<span class="token number">2</span> <span class="token operator">:</span> 索隆
<span class="token number">3</span> <span class="token operator">:</span> 娜美
<span class="token number">4</span> <span class="token operator">:</span> 海贼王
<span class="token number">5</span> <span class="token operator">:</span> 尾田荣一郎</code></pre>
<h3 id="7-parallelStream-多线程遍历">7.parallelStream 多线程遍历</h3>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parallelStreamTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 遍历</span>
    map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>运行输出：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1</span> <span class="token operator">:</span> 路飞
<span class="token number">4</span> <span class="token operator">:</span> 海贼王
<span class="token number">2</span> <span class="token operator">:</span> 索隆
<span class="token number">5</span> <span class="token operator">:</span> 尾田荣一郎
<span class="token number">3</span> <span class="token operator">:</span> 娜美</code></pre>
<h2 id="二-性能测试">二.性能测试</h2>
<p><strong>使用 Oracle 官方提供的性能测试工具 JMH（Java Microbenchmark Harness，JAVA 微基准测试套件）来测试一下这 7 种循环的性能。</strong></p>
<h3 id="1-pom-xml-文件中添加如下配置：">1. pom.xml 文件中添加如下配置：</h3>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jmh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jmh-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jmh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jmh-generator-annprocess<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h3 id="2-编写测试代码（不要使用debug运行）">2. 编写测试代码（不要使用debug运行）</h3>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">Runner</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunnerException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">Options</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">OptionsBuilder</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span> <span class="token comment">// 测试完成时间</span>
<span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span> <span class="token comment">// 预热 2 轮，每次 1s</span>
<span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span> <span class="token comment">// 测试 5 轮，每次 1s</span>
<span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// fork 1 个线程</span>
<span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span> <span class="token comment">// 每个测试线程一个实例</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapCycleTest</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 添加数据</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token string">"val:"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 启动基准测试</span>
        <span class="token class-name">Options</span> opt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">HashMapCycleTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// 要导入的测试类</span>
<span class="token comment">//                .output("D:/dev/jmh-map.log") // 输出测试结果的文件</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 执行测试</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 遍历</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Integer</span> k <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> v <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachEntrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 遍历</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Integer</span> k <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> v <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 遍历</span>
        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Integer</span> k <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> v <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forEachKeySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 遍历</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> key <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Integer</span> k <span class="token operator">=</span> key<span class="token punctuation">;</span>
            <span class="token class-name">String</span> v <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">lambda</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 遍历</span>
        map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Integer</span> k <span class="token operator">=</span> key<span class="token punctuation">;</span>
            <span class="token class-name">String</span> v <span class="token operator">=</span> value<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">streamApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 单线程遍历</span>
        map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Integer</span> k <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> v <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">parallelStreamApi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 多线程遍历</span>
        map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parallelStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Integer</span> k <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">String</span> v <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>所有被添加了 @Benchmark 注解的方法都会被测试，因为 parallelStream 为<code>多线程版本</code> 性能一定是最好的，所以就不参与测试了，其他 6 个方法的测试结果如下：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Benchmark</span>                         <span class="token class-name">Mode</span>  <span class="token class-name">Cnt</span>    <span class="token class-name">Score</span>   <span class="token class-name">Error</span>  <span class="token class-name">Units</span>
<span class="token class-name">HashMapCycleTest</span><span class="token punctuation">.</span>entrySet         avgt    <span class="token number">5</span>  <span class="token number">272.079</span> ± <span class="token number">5.875</span>  ns<span class="token operator">/</span>op
<span class="token class-name">HashMapCycleTest</span><span class="token punctuation">.</span>forEachEntrySet  avgt    <span class="token number">5</span>  <span class="token number">271.292</span> ± <span class="token number">0.625</span>  ns<span class="token operator">/</span>op
<span class="token class-name">HashMapCycleTest</span><span class="token punctuation">.</span>forEachKeySet    avgt    <span class="token number">5</span>  <span class="token number">588.224</span> ± <span class="token number">3.972</span>  ns<span class="token operator">/</span>op
<span class="token class-name">HashMapCycleTest</span><span class="token punctuation">.</span>keySet           avgt    <span class="token number">5</span>  <span class="token number">582.085</span> ± <span class="token number">3.305</span>  ns<span class="token operator">/</span>op
<span class="token class-name">HashMapCycleTest</span><span class="token punctuation">.</span>lambda           avgt    <span class="token number">5</span>  <span class="token number">244.050</span> ± <span class="token number">1.182</span>  ns<span class="token operator">/</span>op
<span class="token class-name">HashMapCycleTest</span><span class="token punctuation">.</span>streamApi        avgt    <span class="token number">5</span>  <span class="token number">430.838</span> ± <span class="token number">8.527</span>  ns<span class="token operator">/</span>op</code></pre>
<p>其中 Units 为 ns/op 意思是执行完成时间（单位为纳秒），而 Score 列为平均执行时间， ± 符号表示误差。</p>
<blockquote>
<h3 id="3-小结">3.小结</h3>
<p>性能方面 <code>parallelStream 多线程</code> &gt; <code>Lambda</code> &gt; <code>ForEach EntrySet</code> ~ <code>Iterator EntrySet</code>  &gt;  <code>Stream 单线程</code> &gt; <code>For Each KeySet</code> ~  <code>Iterator KeySet</code></p>
</blockquote>
<h2 id="三-性能分析">三. 性能分析</h2>
<blockquote>
<p>将源码编译之后你会发现使用迭代器或 for 循环 EntrySet 的代码是相同的，所以他们的性能基本相同；同理 KeySet 的两种遍历方式性能也基本相同。<br>
EntrySet 之所以比 KeySet 的性能高是因为，KeySet 在循环时使用了 <code>map.get(key)</code>，而 map.get(key) 相当于<code>又遍历了一遍 Map 集合</code>去查询 key 所对应的值。为什么要用“又”这个词？那是因为在使用迭代器或者 for 循环时，其实已经遍历了一遍 Map 集合了，因此再使用 map.get(key) 查询时，相当于遍历了两遍。<br>
而 EntrySet 只遍历了一遍 Map 集合，之后通过代码<code>Entry&lt;Integer, String&gt; entry = iterator.next()</code>把对象的 key 和 value 值都放入到了 Entry 对象中，因此再获取 key 和 value 值时就无需再遍历 Map 集合，只需要从 Entry 对象中取值就可以了。<br>
所以，EntrySet 的性能比 KeySet 的性能高出了一倍，因为 KeySet 相当于循环了两遍 Map 集合，而 EntrySet 只循环了一遍。</p>
</blockquote>
<h2 id="四-安全性测试">四. 安全性测试</h2>
<p><strong>需求：将map里的key=3的元素删除</strong></p>
<h3 id="1-迭代器方式">1. 迭代器方式</h3>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">iteratorDelTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
       <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
           <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除 "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
               iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token punctuation">&#125;</span>
       <span class="token punctuation">&#125;</span>
       map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">&#125;</span></code></pre>
<p>执行结果：</p>
<pre class="language-java" data-language="java"><code class="language-java">删除 <span class="token number">3</span> <span class="token operator">:</span> 娜美
<span class="token number">1</span> <span class="token operator">:</span> 路飞
<span class="token number">2</span> <span class="token operator">:</span> 索隆
<span class="token number">4</span> <span class="token operator">:</span> 海贼王
<span class="token number">5</span> <span class="token operator">:</span> 尾田荣一郎</code></pre>
<blockquote>
<p>测试结果：迭代器中循环删除数据安全。</p>
</blockquote>
<h3 id="2-For-循环方式">2. For 循环方式</h3>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">forDelTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除 "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>执行结果：</p>
<pre class="language-java" data-language="java"><code class="language-java">删除 <span class="token number">3</span> <span class="token operator">:</span> 娜美

<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ConcurrentModificationException</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashMap</span>$<span class="token class-name">HashIterator</span><span class="token punctuation">.</span><span class="token function">nextNode</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1445</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashMap</span>$<span class="token class-name">EntryIterator</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1479</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashMap</span>$<span class="token class-name">EntryIterator</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1477</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>liang<span class="token punctuation">.</span>onepiece<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span>HashMapTest</span><span class="token punctuation">.</span><span class="token function">forDelTest</span><span class="token punctuation">(</span><span class="token class-name">HashMapTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">127</span><span class="token punctuation">)</span></code></pre>
<blockquote>
<p>测试结果：For 循环中删除数据非安全。</p>
</blockquote>
<h3 id="3-Lambda-方式">3. Lambda 方式</h3>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">LambdaDelTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除 "</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>执行结果：</p>
<pre class="language-java" data-language="java"><code class="language-java">删除 <span class="token number">3</span> <span class="token operator">:</span> 娜美

<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ConcurrentModificationException</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashMap</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1292</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>liang<span class="token punctuation">.</span>onepiece<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span>HashMapTest<span class="token punctuation">.</span>LambdaDelTest1</span><span class="token punctuation">(</span><span class="token class-name">HashMapTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">140</span><span class="token punctuation">)</span></code></pre>
<blockquote>
<p>测试结果：Lambda <code>循环中</code>删除数据非安全。</p>
</blockquote>
<p>Lambda 删除的正确方式（使用removeIf）：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">LambdaDelTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 使用 Lambda 的 removeIf 删除符合条件的数据</span>
    map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeIf</span><span class="token punctuation">(</span>key <span class="token operator">-></span> key <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示 "</span> <span class="token operator">+</span> key <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>执行结果：</p>
<pre class="language-java" data-language="java"><code class="language-java">显示 <span class="token number">1</span> <span class="token operator">:</span> 路飞
显示 <span class="token number">2</span> <span class="token operator">:</span> 索隆
显示 <span class="token number">4</span> <span class="token operator">:</span> 海贼王
显示 <span class="token number">5</span> <span class="token operator">:</span> 尾田荣一郎</code></pre>
<blockquote>
<p>测试结果：Lambda 表达式使用 removeIf 删除数据安全。</p>
</blockquote>
<h3 id="4-Stream-方式">4. Stream 方式</h3>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">streamDelTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除 "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            map<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>执行结果：</p>
<pre class="language-java" data-language="java"><code class="language-java">删除 <span class="token number">3</span> <span class="token operator">:</span> 娜美

<span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>ConcurrentModificationException</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>HashMap</span>$<span class="token class-name">EntrySpliterator</span><span class="token punctuation">.</span><span class="token function">forEachRemaining</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">1704</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span>ReferencePipeline</span>$<span class="token class-name">Head</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token class-name">ReferencePipeline</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">580</span><span class="token punctuation">)</span>
	at <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>liang<span class="token punctuation">.</span>onepiece<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span>HashMapTest</span><span class="token punctuation">.</span><span class="token function">streamDelTest1</span><span class="token punctuation">(</span><span class="token class-name">HashMapTest</span><span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">162</span><span class="token punctuation">)</span></code></pre>
<blockquote>
<p>测试结果：Stream <code>循环中</code>删除数据非安全。</p>
</blockquote>
<p>使用 Stream 中的 filter 过滤掉无用的数据，再进行遍历也是一种安全的操作集合的方式。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">streamDelTest2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>m <span class="token operator">-></span> <span class="token number">3</span> <span class="token operator">!=</span> m<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>entry<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示 "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    map<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>执行结果：</p>
<pre class="language-java" data-language="java"><code class="language-java">显示 <span class="token number">1</span> <span class="token operator">:</span> 路飞
显示 <span class="token number">2</span> <span class="token operator">:</span> 索隆
显示 <span class="token number">4</span> <span class="token operator">:</span> 海贼王
显示 <span class="token number">5</span> <span class="token operator">:</span> 尾田荣一郎
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>
<span class="token number">1</span> <span class="token operator">:</span> 路飞
<span class="token number">2</span> <span class="token operator">:</span> 索隆
<span class="token number">3</span> <span class="token operator">:</span> 娜美
<span class="token number">4</span> <span class="token operator">:</span> 海贼王
<span class="token number">5</span> <span class="token operator">:</span> 尾田荣一郎</code></pre>
<blockquote>
<p>测试结果：使用 Stream 中的 filter 过滤数据数据安全，但是并不能删除map的元素。</p>
</blockquote>
<blockquote>
<h3 id="5-小结">5. 小结</h3>
<p>我们不能在遍历中使用集合 map.remove() 来删除数据，这是非安全的操作方式，但我们可以使用迭代器的 <code>iterator.remove()</code> 的方法来删除数据，这是安全的删除集合的方式。同样的我们也可以使用 Lambda 中的 <code>removeIf</code> 来提前删除数据，或者是使用 Stream 中的 filter 过滤掉要删除的数据进行循环，这样都是安全的，当然我们也可以在 for 循环前删除数据再遍历也是线程安全的。</p>
</blockquote>
<h2 id="五-总结">五. 总结</h2>
<p>综合性能和安全性来看，我们应该尽量使用迭代器（Iterator）来遍历 EntrySet 的遍历方式来操作 Map 集合，这样就会既安全又高效了。</p>
<blockquote>
<p>原创为 <a href="https://vipstone.blog.csdn.net/article/details/105963766" title="点我查看原文">Java中文社群</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>HashMap 相关问题总结</title>
    <url>//blog/210401.html</url>
    <content><![CDATA[<h2 id="1-基本概念">1. 基本概念</h2>
<h3 id="1-1-HashMap：">1.1 HashMap：</h3>
<p>HashMap是一个实现了Map接口的基于哈希表的类。</p>
<p>查找时，给出一个关键字key，我们可以根据hash算法计算出key-value的存储位置然后取出value。</p>
<p>存储时，我们根据哈希算法计算出该键值对应该存储的位置，将其存进去。</p>
<p>HashMap是以键值对的形式存储和操作数据的容器类型。插入和查询“键值对”的开销是固定的，可以通过构造器设置容量和加载因子，以调整容器性能。</p>
<p>推介加载因子为0.75，0.75是一个折中选择后的推介值，能解决大多数场景问题。</p>
<span id="more"></span>
<h3 id="1-2-HashTable：">1.2 HashTable：</h3>
<p>HashTable是线程安全的，用了synchronized限制了每个方法，并且Key和Value都不能是Null。其它和HashMap没什么差别。</p>
<h3 id="1-3-LinkHashMap：">1.3 LinkHashMap：</h3>
<p>LinkHashMap 类似HashMap，但是迭代遍历他的时候，取得“键值对”的顺序是其插入的顺序，可以理解为“桶结构” 。</p>
<p>速度比hashMap慢一点，而迭代的访问速度反而更快，用链表来维护内部数据。</p>
<p>LinkedHashMap是HashMap的子类，意味着它继承了HashMap的特性。</p>
<p>除此之外，LinkedHashMap还保存了插入顺序。</p>
<h3 id="1-4-TreeMap：">1.4 TreeMap：</h3>
<p>TreeMap则是基于红黑树的一种提供顺序访问的Map。</p>
<p>和HashMap不同，它的get、put、remove之类操作都是O（log(n)）的时间复杂度，具体顺序可以由指定 的Comparator来决定（String对象已经实现Comparator），或者根据键的自然顺序来判断。</p>
<p>TreeMap得到的结果都经过排序的。</p>
<p>TreeMap是Map中唯一一个带有subMap（）方法的Map，它可以返回一个子树。</p>
<h3 id="1-5-ConcurrentHashMap：">1.5 ConcurrentHashMap：</h3>
<h2 id="2-HashMap、HashTable和ConcurrentHashMap的线程安全问题">2. HashMap、HashTable和ConcurrentHashMap的线程安全问题</h2>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">安全问题</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>HashMap</strong></td>
<td style="text-align:center">线程不安全的</td>
</tr>
<tr>
<td style="text-align:center"><strong>HashTable</strong></td>
<td style="text-align:center">锁住整张hash表，让线程独占。hashMap允许为空。通过分析Hashtable就知道，synchronized是针对整张Hash表的，即每次锁住整张表让线程独占，安全的背后是巨大的资源浪费</td>
</tr>
<tr>
<td style="text-align:center"><strong>ConcurrentHashMap</strong></td>
<td style="text-align:center">一个更快的hashmap，它提供了好得多的并发性。多个读操作几乎总可以并发地执行。他是锁段（默认：把hash表分为16个段），在get，put，remove等操作中，ConcurrentHashMap只锁定当前需要用到的段，只有在求size的时候才锁定整张hash表。</td>
</tr>
</tbody>
</table>
<h2 id="参考链接">参考链接</h2>
<ol>
<li><a href="https://blog.csdn.net/q624726271/article/details/79505414" title="点我查看原文">HashMap的存储结构简析和HashTable的区别</a></li>
<li><a href="https://blog.csdn.net/wangyejing1870/article/details/88325565" title="点我查看原文">HashMap、HashTable、LinkedHashMap、TreeMap初理解</a></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>HashMap</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么建议你使用 LocalDateTime ，而不是 Date ？</title>
    <url>//blog/210324.html</url>
    <content><![CDATA[<p><strong><code>JDK8 之后大家都推崇LocalDateTime，那LocalDateTime 到底比 Date 好在哪里呢？</code></strong></p>
<h2 id="1-Date如果不格式化，打印出的日期可读性差">1. Date如果不格式化，打印出的日期可读性差</h2>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Thu</span> <span class="token class-name">Mar</span> <span class="token number">25</span> <span class="token number">14</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">56</span> <span class="token constant">CST</span> <span class="token number">2021</span>        # <span class="token class-name">Date</span>
<span class="token number">2021</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">25</span><span class="token constant">T14</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">56.254</span>             # <span class="token class-name">LocalDateTime</span></code></pre>
<span id="more"></span>
<h2 id="2-Date的日期工具类线程不安全">2. Date的日期工具类线程不安全</h2>
<p>解析SimpleDateFormat的format方法的源码你会发现，里面有个 <strong>calendar</strong> 共享变量，但是这个共享变量没有做线程安全控制。</p>
<p>所以，当多个线程同时使用相同的SimpleDateFormat对象（如用 <strong>static</strong> 修饰的SimpleDateFormat）调用format方法时，多个线程会同时调用 <strong>calendar.setTime</strong> 方法，可能一个线程刚设置好time值另外的一个线程马上把设置的time值给修改了导致返回的格式化时间可能是错误的。</p>
<p>在多并发情况下，SimpleDateFormat除了 <strong>format</strong> 是线程不安全以外，<strong>parse</strong> 方法也是线程不安全的。</p>
<p><strong>parse</strong> 方法实际调用 <strong>alb.establish(calendar).getTime()</strong> 方法来解析，<strong>alb.establish(calendar)</strong> 方法里主要完成了</p>
<ul>
<li>重置日期对象cal的属性值</li>
<li>使用calb中中属性设置cal</li>
<li>返回设置好的cal对象</li>
</ul>
<p>但是这三步不是原子操作。</p>
<h3 id="2-1-那么多线程并发如何保证SimpleDateFormat的线程安全呢？">2.1 那么多线程并发如何保证SimpleDateFormat的线程安全呢？</h3>
<ul>
<li>避免线程之间共享一个SimpleDateFormat对象即可<br>
这样的话每个线程使用时都创建一次SimpleDateFormat对象，创建和销毁对象的开销变大。</li>
<li>对使用format和parse方法的地方进行加锁<br>
加锁可能会导致线程阻塞，性能差。</li>
<li>使用ThreadLocal保证每个线程最多只创建一次SimpleDateFormat对象</li>
</ul>
<h2 id="3-Date对时间处理比较麻烦">3. Date对时间处理比较麻烦</h2>
<p>Date对时间处理比较麻烦，比如想获取某年、某月、某星期，以及n天以后的时间，如果用Date来处理的话太过麻烦，</p>
<p>在JDK早期版本有getYear、getMonth这些方法，获取年月日很Easy，但这些在新的JDK里都被弃用了。</p>
<div class="note danger"><p>本文转自 <a href="https://blog.csdn.net/Px01Ih8/article/details/102927030" title="点我查看原文">为什么建议你使用 LocalDateTime ，而不是 Date？</a> <strong>如有不妥，请联系我删除</strong></p>
</div>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>LocalDateTime</tag>
      </tags>
  </entry>
  <entry>
    <title>无比强大的JMH基准测试工具</title>
    <url>//blog/201212.html</url>
    <content><![CDATA[<h2 id="1-JMH是什么？">1. JMH是什么？</h2>
<p><strong>JMH</strong>：即（Java Microbenchmark Harness），它是由 Java 官方团队开发的一款用于 Java 微基准测试工具。</p>
<p>基准测试：是指通过设计科学的测试方法、测试工具和测试系统，实现对一类测试对象的某项性能指标进行定量的和可对比的测试。</p>
<p>比如鲁大师、安兔兔，都是按一定的基准或者在特定条件下去测试某一对象的的性能，比如显卡、IO、CPU之类的。</p>
<blockquote>
<p><a href="http://openjdk.java.net/projects/code-tools/jmh/" title="点我去官网">JMH官网：http://openjdk.java.net/projects/code-tools/jmh</a></p>
</blockquote>
<span id="more"></span>
<h2 id="2-JMH和JMeter的不同？">2. JMH和JMeter的不同？</h2>
<p>JMeter更多的是对rest api进行压测，而JMH关注的粒度更细，它更多的是发现某块性能槽点代码，然后对优化方案进行基准测试对比。比如json序列化方案对比，bean copy方案对比等。</p>
<h2 id="3-使用步骤">3. 使用步骤</h2>
<h3 id="3-1-pom-xml引入依赖">3.1 pom.xml引入依赖</h3>
<p>因为 JMH 是 JDK9 自带的，如果是 JDK9 之前的版本需要加入如下依赖（目前 JMH 的最新版本为 1.26）：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- Java 官方基准测试工具 JMH jar --></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jmh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jmh-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.openjdk.jmh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jmh-generator-annprocess<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<h3 id="3-2-编写基准测试类">3.2 编写基准测试类</h3>
<p>假设有两个函数getSum1()、getSum2()都是将map集合的value求和，现在需要测试两者的性能哪个更好。</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">Runner</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span></span><span class="token class-name">RunnerException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">Options</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>openjdk<span class="token punctuation">.</span>jmh<span class="token punctuation">.</span>runner<span class="token punctuation">.</span>options<span class="token punctuation">.</span></span><span class="token class-name">OptionsBuilder</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span></span><span class="token class-name">TimeUnit</span></span><span class="token punctuation">;</span>


<span class="token annotation punctuation">@BenchmarkMode</span><span class="token punctuation">(</span><span class="token class-name">Mode<span class="token punctuation">.</span>AverageTime</span><span class="token punctuation">)</span> <span class="token comment">// 测试平均完成时间</span>
<span class="token annotation punctuation">@OutputTimeUnit</span><span class="token punctuation">(</span><span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">NANOSECONDS</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Warmup</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span> <span class="token comment">// 预热 2 轮，每次 1s</span>
<span class="token annotation punctuation">@Measurement</span><span class="token punctuation">(</span>iterations <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> time <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> timeUnit <span class="token operator">=</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span> <span class="token comment">// 测试 5 轮，每次 1s</span>
<span class="token annotation punctuation">@Fork</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">// fork 1 个线程</span>
<span class="token annotation punctuation">@State</span><span class="token punctuation">(</span><span class="token class-name">Scope<span class="token punctuation">.</span>Thread</span><span class="token punctuation">)</span> <span class="token comment">// 每个测试线程一个实例</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JMHTests</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">RunnerException</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 使用 Builder 模式配置测试信息</span>
        <span class="token class-name">Options</span> opt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OptionsBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token comment">// 要导入的测试类</span>
                <span class="token punctuation">.</span><span class="token function">include</span><span class="token punctuation">(</span><span class="token class-name">JMHTests</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// 输出测试结果的文件</span>
               <span class="token comment">// .output("D:/dev/jmh-map.log")</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行测试</span>
        <span class="token keyword">new</span> <span class="token class-name">Runner</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 添加数据</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"k_"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> entry <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            sum <span class="token operator">+=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Benchmark</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> k <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            sum <span class="token operator">+=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
</code></pre>
<h3 id="3-3-测试结果">3.3 测试结果</h3>
<pre class="language-java" data-language="java"><code class="language-java"># <span class="token constant">JMH</span> version<span class="token operator">:</span> <span class="token number">1.26</span>
# <span class="token constant">VM</span> version<span class="token operator">:</span> <span class="token constant">JDK</span> <span class="token number">1.8</span><span class="token number">.0_241</span><span class="token punctuation">,</span> <span class="token class-name">Java</span> <span class="token class-name">HotSpot</span><span class="token punctuation">(</span><span class="token constant">TM</span><span class="token punctuation">)</span> <span class="token number">64</span><span class="token operator">-</span><span class="token class-name">Bit</span> <span class="token class-name">Server</span> <span class="token constant">VM</span><span class="token punctuation">,</span> <span class="token number">25.241</span><span class="token operator">-</span>b07
# <span class="token constant">VM</span> invoker<span class="token operator">:</span> <span class="token class-name">C</span><span class="token operator">:</span>\<span class="token class-name">Program</span> <span class="token class-name">Files</span>\<span class="token class-name">Java</span>\jdk1<span class="token punctuation">.</span><span class="token number">8.0_241</span>\jre\bin\java<span class="token punctuation">.</span>exe
# <span class="token constant">VM</span> options<span class="token operator">:</span> <span class="token operator">-</span>javaagent<span class="token operator">:</span><span class="token class-name">D</span><span class="token operator">:</span>\java\<span class="token class-name">IntelliJ</span> <span class="token constant">IDEA</span> <span class="token number">2019.3</span><span class="token number">.4</span>\lib\idea_rt<span class="token punctuation">.</span>jar<span class="token operator">=</span><span class="token number">7158</span><span class="token operator">:</span><span class="token class-name">D</span><span class="token operator">:</span>\java\<span class="token class-name">IntelliJ</span> <span class="token constant">IDEA</span> <span class="token number">2019.3</span><span class="token number">.4</span>\bin <span class="token operator">-</span><span class="token class-name">Dfile</span><span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span>
# <span class="token class-name">Warmup</span><span class="token operator">:</span> <span class="token number">2</span> iterations<span class="token punctuation">,</span> <span class="token number">1</span> s each
# <span class="token class-name">Measurement</span><span class="token operator">:</span> <span class="token number">5</span> iterations<span class="token punctuation">,</span> <span class="token number">1</span> s each
# <span class="token class-name">Timeout</span><span class="token operator">:</span> <span class="token number">10</span> min per iteration
# <span class="token class-name">Threads</span><span class="token operator">:</span> <span class="token number">1</span> thread<span class="token punctuation">,</span> will synchronize iterations
# <span class="token class-name">Benchmark</span> mode<span class="token operator">:</span> <span class="token class-name">Average</span> time<span class="token punctuation">,</span> time<span class="token operator">/</span>op
# <span class="token class-name">Benchmark</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>liang<span class="token punctuation">.</span>onepiece<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span>JMHTests</span><span class="token punctuation">.</span>getSum1

## 	<span class="token operator">^</span>  
## 	<span class="token operator">^</span>  
## 这是测试的基本信息，比如，使用的<span class="token class-name">Java</span>路径，预热代码的迭代次数，测量代码的迭代次数，使用的线程数量，测试的统计单位等。

# <span class="token class-name">Run</span> progress<span class="token operator">:</span> <span class="token number">0.00</span><span class="token operator">%</span> complete<span class="token punctuation">,</span> <span class="token constant">ETA</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">14</span>
# <span class="token class-name">Fork</span><span class="token operator">:</span> <span class="token number">1</span> of <span class="token number">1</span>
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">1</span><span class="token operator">:</span> <span class="token number">290.674</span> ns<span class="token operator">/</span>op
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">2</span><span class="token operator">:</span> <span class="token number">272.164</span> ns<span class="token operator">/</span>op

## 	<span class="token operator">^</span>  
## 	<span class="token operator">^</span>  
## 这是每次预热迭代的结果，预热迭代不会作为最终的统计结果。预热的目的是让<span class="token class-name">Java</span>虚拟机对被测代码进行足够多的优化，比如，在预热后被测代码应该得到了充分的<span class="token constant">JIT</span>编译和优化。

<span class="token class-name">Iteration</span>   <span class="token number">1</span><span class="token operator">:</span> <span class="token number">252.834</span> ns<span class="token operator">/</span>op
<span class="token class-name">Iteration</span>   <span class="token number">2</span><span class="token operator">:</span> <span class="token number">249.030</span> ns<span class="token operator">/</span>op
<span class="token class-name">Iteration</span>   <span class="token number">3</span><span class="token operator">:</span> <span class="token number">248.453</span> ns<span class="token operator">/</span>op
<span class="token class-name">Iteration</span>   <span class="token number">4</span><span class="token operator">:</span> <span class="token number">247.457</span> ns<span class="token operator">/</span>op
<span class="token class-name">Iteration</span>   <span class="token number">5</span><span class="token operator">:</span> <span class="token number">247.619</span> ns<span class="token operator">/</span>op

## 	<span class="token operator">^</span>  
## 	<span class="token operator">^</span>  
## 这是每次基准测试迭代的结果，每一次迭代都显示了当前的执行速率，即一个操作所花费的时间。

<span class="token class-name">Result</span> <span class="token string">"com.liang.onepiece.demo.JMHTests.getSum1"</span><span class="token operator">:</span>
  <span class="token number">249.079</span> ±<span class="token punctuation">(</span><span class="token number">99.9</span><span class="token operator">%</span><span class="token punctuation">)</span> <span class="token number">8.448</span> ns<span class="token operator">/</span>op <span class="token punctuation">[</span><span class="token class-name">Average</span><span class="token punctuation">]</span>
  <span class="token punctuation">(</span>min<span class="token punctuation">,</span> avg<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">247.457</span><span class="token punctuation">,</span> <span class="token number">249.079</span><span class="token punctuation">,</span> <span class="token number">252.834</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stdev <span class="token operator">=</span> <span class="token number">2.194</span>
  <span class="token constant">CI</span> <span class="token punctuation">(</span><span class="token number">99.9</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">240.630</span><span class="token punctuation">,</span> <span class="token number">257.527</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>assumes normal distribution<span class="token punctuation">)</span>


## 	<span class="token operator">^</span>  
## 	<span class="token operator">^</span>  
## 这是一个方法测试完成后的统计，结果在<span class="token class-name">Result</span>后。<span class="token class-name">Result</span>第一段结果告诉了我们最小值、平均值、最大值的信息。第二段是最主要的信息。
## 下面是第二个方法的测试信息。
 

# <span class="token constant">JMH</span> version<span class="token operator">:</span> <span class="token number">1.26</span>
# <span class="token constant">VM</span> version<span class="token operator">:</span> <span class="token constant">JDK</span> <span class="token number">1.8</span><span class="token number">.0_241</span><span class="token punctuation">,</span> <span class="token class-name">Java</span> <span class="token class-name">HotSpot</span><span class="token punctuation">(</span><span class="token constant">TM</span><span class="token punctuation">)</span> <span class="token number">64</span><span class="token operator">-</span><span class="token class-name">Bit</span> <span class="token class-name">Server</span> <span class="token constant">VM</span><span class="token punctuation">,</span> <span class="token number">25.241</span><span class="token operator">-</span>b07
# <span class="token constant">VM</span> invoker<span class="token operator">:</span> <span class="token class-name">C</span><span class="token operator">:</span>\<span class="token class-name">Program</span> <span class="token class-name">Files</span>\<span class="token class-name">Java</span>\jdk1<span class="token punctuation">.</span><span class="token number">8.0_241</span>\jre\bin\java<span class="token punctuation">.</span>exe
# <span class="token constant">VM</span> options<span class="token operator">:</span> <span class="token operator">-</span>javaagent<span class="token operator">:</span><span class="token class-name">D</span><span class="token operator">:</span>\java\<span class="token class-name">IntelliJ</span> <span class="token constant">IDEA</span> <span class="token number">2019.3</span><span class="token number">.4</span>\lib\idea_rt<span class="token punctuation">.</span>jar<span class="token operator">=</span><span class="token number">7158</span><span class="token operator">:</span><span class="token class-name">D</span><span class="token operator">:</span>\java\<span class="token class-name">IntelliJ</span> <span class="token constant">IDEA</span> <span class="token number">2019.3</span><span class="token number">.4</span>\bin <span class="token operator">-</span><span class="token class-name">Dfile</span><span class="token punctuation">.</span>encoding<span class="token operator">=</span><span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">8</span>
# <span class="token class-name">Warmup</span><span class="token operator">:</span> <span class="token number">2</span> iterations<span class="token punctuation">,</span> <span class="token number">1</span> s each
# <span class="token class-name">Measurement</span><span class="token operator">:</span> <span class="token number">5</span> iterations<span class="token punctuation">,</span> <span class="token number">1</span> s each
# <span class="token class-name">Timeout</span><span class="token operator">:</span> <span class="token number">10</span> min per iteration
# <span class="token class-name">Threads</span><span class="token operator">:</span> <span class="token number">1</span> thread<span class="token punctuation">,</span> will synchronize iterations
# <span class="token class-name">Benchmark</span> mode<span class="token operator">:</span> <span class="token class-name">Average</span> time<span class="token punctuation">,</span> time<span class="token operator">/</span>op
# <span class="token class-name">Benchmark</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>liang<span class="token punctuation">.</span>onepiece<span class="token punctuation">.</span>demo<span class="token punctuation">.</span></span>JMHTests</span><span class="token punctuation">.</span>getSum2

# <span class="token class-name">Run</span> progress<span class="token operator">:</span> <span class="token number">50.00</span><span class="token operator">%</span> complete<span class="token punctuation">,</span> <span class="token constant">ETA</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">07</span>
# <span class="token class-name">Fork</span><span class="token operator">:</span> <span class="token number">1</span> of <span class="token number">1</span>
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">1</span><span class="token operator">:</span> <span class="token number">522.107</span> ns<span class="token operator">/</span>op
# <span class="token class-name">Warmup</span> <span class="token class-name">Iteration</span>   <span class="token number">2</span><span class="token operator">:</span> <span class="token number">514.760</span> ns<span class="token operator">/</span>op
<span class="token class-name">Iteration</span>   <span class="token number">1</span><span class="token operator">:</span> <span class="token number">597.481</span> ns<span class="token operator">/</span>op
<span class="token class-name">Iteration</span>   <span class="token number">2</span><span class="token operator">:</span> <span class="token number">598.313</span> ns<span class="token operator">/</span>op
<span class="token class-name">Iteration</span>   <span class="token number">3</span><span class="token operator">:</span> <span class="token number">596.199</span> ns<span class="token operator">/</span>op
<span class="token class-name">Iteration</span>   <span class="token number">4</span><span class="token operator">:</span> <span class="token number">597.036</span> ns<span class="token operator">/</span>op
<span class="token class-name">Iteration</span>   <span class="token number">5</span><span class="token operator">:</span> <span class="token number">595.382</span> ns<span class="token operator">/</span>op


<span class="token class-name">Result</span> <span class="token string">"com.liang.onepiece.demo.JMHTests.getSum2"</span><span class="token operator">:</span>
  <span class="token number">596.882</span> ±<span class="token punctuation">(</span><span class="token number">99.9</span><span class="token operator">%</span><span class="token punctuation">)</span> <span class="token number">4.368</span> ns<span class="token operator">/</span>op <span class="token punctuation">[</span><span class="token class-name">Average</span><span class="token punctuation">]</span>
  <span class="token punctuation">(</span>min<span class="token punctuation">,</span> avg<span class="token punctuation">,</span> max<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">595.382</span><span class="token punctuation">,</span> <span class="token number">596.882</span><span class="token punctuation">,</span> <span class="token number">598.313</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stdev <span class="token operator">=</span> <span class="token number">1.134</span>
  <span class="token constant">CI</span> <span class="token punctuation">(</span><span class="token number">99.9</span><span class="token operator">%</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">592.514</span><span class="token punctuation">,</span> <span class="token number">601.250</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>assumes normal distribution<span class="token punctuation">)</span>


# <span class="token class-name">Run</span> <span class="token class-name"><span class="token namespace">complete<span class="token punctuation">.</span></span> Total</span> time<span class="token operator">:</span> <span class="token number">00</span><span class="token operator">:</span><span class="token number">00</span><span class="token operator">:</span><span class="token number">15</span>

<span class="token constant">REMEMBER</span><span class="token operator">:</span> <span class="token class-name">The</span> numbers below are just <span class="token class-name"><span class="token namespace">data<span class="token punctuation">.</span></span> To</span> gain reusable insights<span class="token punctuation">,</span> you need <span class="token keyword">to</span> <span class="token namespace">follow</span> up on
why the numbers are the way they <span class="token class-name"><span class="token namespace">are<span class="token punctuation">.</span></span> Use</span> profilers <span class="token punctuation">(</span>see <span class="token operator">-</span>prof<span class="token punctuation">,</span> <span class="token operator">-</span>lprof<span class="token punctuation">)</span><span class="token punctuation">,</span> design factorial
experiments<span class="token punctuation">,</span> perform baseline and negative tests that provide experimental control<span class="token punctuation">,</span> make sure
the benchmarking environment is safe on <span class="token constant">JVM</span><span class="token operator">/</span><span class="token constant">OS</span><span class="token operator">/</span><span class="token class-name">HW</span> level<span class="token punctuation">,</span> ask <span class="token keyword">for</span> reviews from the domain <span class="token class-name"><span class="token namespace">experts<span class="token punctuation">.</span></span>
Do</span> not assume the numbers tell you what you want them <span class="token keyword">to</span> <span class="token namespace">tell<span class="token punctuation">.</span></span>

<span class="token class-name">Benchmark</span>         <span class="token class-name">Mode</span>  <span class="token class-name">Cnt</span>    <span class="token class-name">Score</span>   <span class="token class-name">Error</span>  <span class="token class-name">Units</span>
<span class="token class-name">JMHTests</span><span class="token punctuation">.</span>getSum1  avgt    <span class="token number">5</span>  <span class="token number">249.079</span> ± <span class="token number">8.448</span>  ns<span class="token operator">/</span>op
<span class="token class-name">JMHTests</span><span class="token punctuation">.</span>getSum2  avgt    <span class="token number">5</span>  <span class="token number">596.882</span> ± <span class="token number">4.368</span>  ns<span class="token operator">/</span>op

## 	<span class="token operator">^</span>  
## 	<span class="token operator">^</span>  
## 这是最终的统计，也是我们常看的数据。
<span class="token class-name">Benchmark</span>        	 <span class="token class-name">Mode</span> 		 <span class="token class-name">Cnt</span>   	 <span class="token class-name">Score</span>   <span class="token class-name">Error</span>   <span class="token class-name">Units</span>
基准测试执行的方法   测试模式	 运行多少次   测试值   错误    单位</code></pre>
<h3 id="3-4-生成-jar-包执行">3.4 生成 jar 包执行</h3>
<p>对于一些小测试，直接用上面的方式写一个 main 函数手动执行就好了。</p>
<p>对于大型的测试，需要测试的时间比较久、线程数比较多，加上测试的服务器需要，一般要放在 Linux 服务器里去执行。</p>
<p>JMH 官方提供了生成 jar 包的方式来执行，我们需要在 maven 里增加一个 plugin，具体配置如下：</p>
<p>普通maven项目：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-shade-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>shade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>al-jmh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformers</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span>
                                <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ManifestResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>org.openjdk.jmh.Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformers</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span></code></pre>
<p>SpringBoot项目：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-shade-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">></span></span>package<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">></span></span>shade<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>finalName</span><span class="token punctuation">></span></span>al-jmh-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>finalName</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformers</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span>
                                <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.AppendingTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>META-INF/spring.handlers<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span>
                                <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.springframework.boot.maven.PropertiesMergingResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>META-INF/spring.factories<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span>
                                <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.AppendingTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>META-INF/spring.schemas<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span>
                                <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ServicesResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transformer</span>
                                <span class="token attr-name">implementation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>org.apache.maven.plugins.shade.resource.ManifestResourceTransformer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mainClass</span><span class="token punctuation">></span></span>org.openjdk.jmh.Main<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mainClass</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformer</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transformers</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span></code></pre>
<p>接着执行 maven 的命令生成可执行 jar 包并执行：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">mvn clean <span class="token function">install</span>
<span class="token function">java</span> <span class="token parameter variable">-jar</span> al-jmh-test.jar</code></pre>
<h2 id="4-JMH的基本概念和配置">4. JMH的基本概念和配置</h2>
<h3 id="4-1-测试模式">4.1 测试模式</h3>
<p>测试模式是指JMH的测量方式和角度，共有4种，吞吐量和方法执行的平均时间是最为常用的统计方式。</p>
<p>可通过<code>@BenchmarkMode</code>注解配置。 可以用在类和方法上。</p>
<table>
<thead>
<tr>
<th style="text-align:left">模式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Throughput</code></td>
<td style="text-align:left">表示1秒内可以执行多少次调用（吞吐量）</td>
</tr>
<tr>
<td style="text-align:left"><code>AverageTime</code></td>
<td style="text-align:left">调用的平均时间， 指每一次调用所需要的时间</td>
</tr>
<tr>
<td style="text-align:left"><code>SampleTime</code></td>
<td style="text-align:left">随机取样，最后输出取样结果的分布</td>
</tr>
<tr>
<td style="text-align:left"><code>SingleShotTime</code></td>
<td style="text-align:left">以上模式都是默认一次Iteration是1秒，唯有SingleShotTime 只运行一次。往往同时把warmup 次数设为0, 用于测试冷启动时的性能。</td>
</tr>
<tr>
<td style="text-align:left"><code>All</code></td>
<td style="text-align:left">所有模式</td>
</tr>
</tbody>
</table>
<h3 id="4-2-迭代">4.2 迭代</h3>
<p>迭代是JMH的一次测量的单位。在大部分测量模式下，一次迭代表示1秒。在这一秒内会不间断调用被测方法，并采样计算吞吐量、平均时间等。</p>
<h3 id="4-3-预热">4.3 预热</h3>
<p>预热是指在实际进行 benchmark 前先进行预热的行为。</p>
<p>为什么需要预热？因为 JVM 的 JIT 机制的存在，如果某个函数被调用多次之后，JVM 会尝试将其编译成为机器码从而提高执行速度。为了让 benchmark 的结果更加接近真实情况就需要进行预热。</p>
<p>由于Java 虚拟机的JIT 的存在，同一个方法在JIT编译前后的时间将会不同。通常只考虑方法在JIT编译后的性能。使用 -Xint 参数可以关闭JIT优化。</p>
<h3 id="4-4-状态">4.4 状态</h3>
<p>@State注解，只能作用在类上。通过State 可以指定一个对象的作用范围，范围主要有三种:</p>
<table>
<thead>
<tr>
<th style="text-align:left">模式</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>Scope.Thread</code></td>
<td style="text-align:left">默认的State，每个测试线程分配一个实例，也就是一个对象只会被一个线程访问。在多线程池测试时，会为每一个线程生成一个对象。</td>
</tr>
<tr>
<td style="text-align:left"><code>Scope.Benchmark</code></td>
<td style="text-align:left">所有测试线程共享一个实例，用于测试有状态实例在多线程共享下的性能</td>
</tr>
<tr>
<td style="text-align:left"><code>Scope.Group</code></td>
<td style="text-align:left">每个线程组共享一个实例，在测试方法上使用 @Group 设置线程组。</td>
</tr>
</tbody>
</table>
<h3 id="4-5-配置类-Options-OptionsBuilder">4.5 配置类(Options/OptionsBuilder)</h3>
<p>在测试开始前， 首先要对测试进行配置。通常需要指定一些参数， 比如指定测试类(include) 、使用的进程个数(fork) 、预热迭代次数(warmuplterations) 。在配置启动测试时， 需要使用配置类。<br>
OptionsBuilder的常用方法及对应的注解形式如下：</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法名</th>
<th style="text-align:left">作用</th>
<th style="text-align:left">对应注解</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>include</code></td>
<td style="text-align:left">指定要运行的基准测试类和方法</td>
<td style="text-align:left">—</td>
</tr>
<tr>
<td style="text-align:left"><code>exclude</code></td>
<td style="text-align:left">指定不要运行的基准测试类方法</td>
<td style="text-align:left">—</td>
</tr>
<tr>
<td style="text-align:left"><code>warmupIterations</code></td>
<td style="text-align:left">指定预热的迭代次数</td>
<td style="text-align:left"><code>@Warmup</code></td>
</tr>
<tr>
<td style="text-align:left"><code>warmupBatchSize</code></td>
<td style="text-align:left">指定预热批量的大小</td>
<td style="text-align:left"><code>@Warmup</code></td>
</tr>
<tr>
<td style="text-align:left"><code>warmupForks</code></td>
<td style="text-align:left">指定预热模式：INDI，BULK，BULK_INDI</td>
<td style="text-align:left"><code>@Warmup</code></td>
</tr>
<tr>
<td style="text-align:left"><code>warmupMode</code></td>
<td style="text-align:left">指定预热的模式</td>
<td style="text-align:left"><code>@Warmup</code></td>
</tr>
<tr>
<td style="text-align:left"><code>warmupTime</code></td>
<td style="text-align:left">指定预热的时间</td>
<td style="text-align:left"><code>@Warmup</code></td>
</tr>
<tr>
<td style="text-align:left"><code>measurementIterations</code></td>
<td style="text-align:left">指定测试的迭代次数</td>
<td style="text-align:left"><code>@Measurement(iterations = 5)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>measurementBatchSize</code></td>
<td style="text-align:left">指定测试批量的大小</td>
<td style="text-align:left"><code>@Measurement(batchSize = 1)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>measurementTime</code></td>
<td style="text-align:left">指定测试的时间</td>
<td style="text-align:left"><code>@Measurement(time = 1)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>mode</code></td>
<td style="text-align:left">指定测试模式</td>
<td style="text-align:left"><code>@BenchmarkMode</code></td>
</tr>
<tr>
<td style="text-align:left"><code>fork</code></td>
<td style="text-align:left">进行fork的次数。如果fork数是2的话，则JMH会fork出两个进程来进行测试。</td>
<td style="text-align:left"><code>@Fork(2)</code></td>
</tr>
<tr>
<td style="text-align:left"><code>threads</code></td>
<td style="text-align:left">指定每个方法开启线程数量</td>
<td style="text-align:left"><code>@Threads(1)</code></td>
</tr>
</tbody>
</table>
<h3 id="4-6-其他注解">4.6 其他注解</h3>
<table>
<thead>
<tr>
<th style="text-align:left">方法名</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>@Benchmark</code></td>
<td style="text-align:left">方法级注解，表示该方法是需要进行 <strong>基准测试</strong> 的对象。</td>
</tr>
<tr>
<td style="text-align:left"><code>@Group</code></td>
<td style="text-align:left">结合<code>@Benchmark</code>一起使用，把多个基准方法归为一类，只能作用在方法上。</td>
</tr>
<tr>
<td style="text-align:left"><code>@GroupThreads</code></td>
<td style="text-align:left">定义了多少个线程参与在组中运行基准方法。只能作用在方法上。</td>
</tr>
<tr>
<td style="text-align:left"><code>@OutputTimeUnit</code></td>
<td style="text-align:left">结果所使用的时间单位，可用于类或者方法注解，使用java.util.concurrent.TimeUnit中的标准时间单位。</td>
</tr>
<tr>
<td style="text-align:left"><code>@Setup</code></td>
<td style="text-align:left">方法注解，会在执行 benchmark 之前被执行，正如其名，主要用于初始化。</td>
</tr>
<tr>
<td style="text-align:left"><code>@TearDown</code></td>
<td style="text-align:left">方法注解，与@Setup相对的，会在所有benchmark执行结束以后执行，主要用于资源的回收等。</td>
</tr>
<tr>
<td style="text-align:left"><code>@Param</code></td>
<td style="text-align:left">成员注解，可以用来指定某项参数的多种情况。特别适合用来测试一个函数在不同的参数输入的情况下的性能。</br>@Param注解接收一个String数组，在@setup方法执行前转化为为对应的数据类型。</br>多个@Param注解的成员之间是乘积关系，譬如有两个用@Param注解的字段，第一个有5个值，第二个字段有2个值，那么每个测试方法会跑5*2=10次。</td>
</tr>
</tbody>
</table>
<h2 id="5-JMH-陷阱">5. JMH 陷阱</h2>
<h3 id="5-1-死码消除">5.1 死码消除</h3>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Benchmark</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        a <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>以上代码 JVM 可能会认为变量 a 从来没有使用过，从而进行优化把整个方法内部代码移除掉，这就会影响测试结果。</p>
<p>JMH 提供了两种方式避免这种问题，一种是将这个变量作为方法返回值 return a，一种是通过 Blackhole 的 consume 来避免 JIT 的优化消除。</p>
<p>如下所示：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Benchmark</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">Blackhole</span> bh<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        a <span class="token operator">+=</span> i<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    bh<span class="token punctuation">.</span><span class="token function">consume</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<blockquote>
<p>参考链接： <a href="https://blog.csdn.net/weixin_43767015/article/details/104758415" title="点我看原文">1.L-Java</a>    <a href="http://hg.openjdk.java.net/code-tools/jmh/file/tip/jmh-samples/src/main/java/org/openjdk/jmh/samples/" title="点我看官方demo">2.官方demo</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>JMH</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是原码、反码、补码</title>
    <url>//blog/230401.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>在计算机中，原码、反码、补码是表示有符号整数的三种二进制编码方式。<strong>在Java中，整数默认采用补码进行运算。</strong></p>
<h3 id="什么是二进制">什么是二进制</h3>
<p>二进制是一种计数系统，它<strong>由两个数字 0 和 1 组成</strong>。在计算机科学中，二进制常被用于表示计算机中的数字、字符和指令。每一位二进制数字称为一个位(bit)，每八位(bit)组成一个字节(byte)。在二进制中，每个位(bit)只有两种状态，即0和1，这和十进制中每个数字有10种状态是不同的。因此，二进制可以被看作是一种基于二元逻辑的数学运算方式，也是计算机科学中最基本、最重要的基础。</p>
<p>二进制分为：</p>
<pre class="language-java" data-language="java"><code class="language-java"> <span class="token number">8</span>位（<span class="token number">0000</span> <span class="token number">0000</span>）
<span class="token number">16</span>位（<span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span>）
<span class="token number">32</span>位（<span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span>）
<span class="token number">64</span>位（<span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span>）</code></pre>
<span id="more"></span>
<p>举例：<br>
0 对应的8位二进制数 = 0000 0000<br>
1 对应的8位二进制数 = 0000 0001<br>
3（2+1） 对应的8位二进制数 = 0000 0011<br>
5（4+1） 对应的8位二进制数 = 0000 0101</p>
<p>那么就可以理解为：0的原码是0000 0000，1的原码是0000 0001，3的原码是0000 0011</p>
<h3 id="原码">原码</h3>
<p>原码是最简单的表示方式，它的表示方法是用<strong>第一位表示符号，0表示正数，1表示负数，其余位表示数值的绝对值</strong>。</p>
<p>例如，8位原码表示法中，+5的原码为 00000101，-5的原码为 10000101。</p>
<h3 id="反码">反码</h3>
<p>反码是为了解决原码的符号位参与运算的问题而提出的一种表示方式。</p>
<p><strong>正数的反码与原码相同，负数的反码是对其原码除符号位之外的各位取反（0变成1，1变成0）。</strong></p>
<p>例如，8位反码表示法中，+5的反码为 00000101，-5的反码为 11111010。</p>
<h3 id="补码">补码</h3>
<p>补码是为了解决反码表示法中存在的“0有两个编码”的问题而提出的一种表示方式。</p>
<p><strong>正数的补码与原码和反码相同（三码合一），负数的补码是在其反码的基础上加1。</strong></p>
<p>例如，8位补码表示法中，+5的补码为 00000101，-5的补码为 11111011。</p>
<h2 id="转换过程">转换过程</h2>
<h3 id="从原码转换为反码：">从原码转换为反码：</h3>
<p>对于正数而言，直接使用原码作为反码。<br>
对于负数而言，将其原码的除符号位之外的各位取反。</p>
<h3 id="从反码转换为补码：">从反码转换为补码：</h3>
<p>对于正数而言，直接使用反码作为补码。<br>
对于负数而言，将其反码加1得到补码。</p>
<h3 id="从补码转换为反码和原码：">从补码转换为反码和原码：</h3>
<p>对于正数而言，补码的反码和原码都与补码相同。<br>
对于负数而言，补码的反码是在其基础上减1，原码则是符号位不变，其余位与反码相同。</p>
<h2 id="为什么使用补码？">为什么使用补码？</h2>
<p>使用补码表示数值，能够有效地解决负数在计算机中的表示问题，避免了原码和反码的运算符号位参与运算的问题，同时也避免了反码存在两个0的问题。因此，在计算机中使用补码表示数值是一种比较常见的表示方式。</p>
<h2 id="总结">总结</h2>
<div class="note info"><ol>
<li>二进制最高位（最左边）是符号位：0表示正数，1表示负数</li>
<li>正数的原码、反码、补码都一样（正数三码合一）</li>
<li>0的反码、补码都是0</li>
<li>负数的反码=原码符号位不变，其他位取反（0-&gt;1，1-&gt;0）</li>
<li>负数的补码=反码+1</li>
<li>负数的反码=负数的补码-1</li>
<li>Java中没有无符号数（Java中的数都是有符号的）</li>
<li>在计算机运算中，都是<strong>以补码的方式来运算</strong>的</li>
<li>当我们看运算结果时，要看原码</li>
</ol>
</div>
<p>例如：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">-</span><span class="token number">5</span> 的原码： <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>  <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span>
<span class="token operator">-</span><span class="token number">5</span> 的反码： <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span>  <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> 
<span class="token operator">-</span><span class="token number">5</span> 的补码： <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span>  <span class="token number">1</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> </code></pre>
<h2 id="致谢：">致谢：</h2>
<ol>
<li><a href="https://chat.openai.com/">ChatGPT</a></li>
<li><a href="https://blog.csdn.net/Yangyuqing_/article/details/123717495">https://blog.csdn.net/Yangyuqing_/article/details/123717495</a></li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>原码</tag>
        <tag>反码</tag>
        <tag>补码</tag>
      </tags>
  </entry>
  <entry>
    <title>Lombok注解速查</title>
    <url>//blog/201125.html</url>
    <content><![CDATA[<p><code>Lombok</code>一个帮你写代码的神器，具体介绍请移步<a href="https://projectlombok.org" title="Lombok官网">Lombok官网</a></p>
<p>使用步骤：</p>
<ol>
<li>Idea 安装 Lombok 插件</li>
<li>Maven 引入</li>
</ol>
<pre class="language-Markup" data-language="Markup"><code class="language-Markup">&lt;!-- lombok依赖  --&gt;
&lt;dependency&gt;
     &lt;groupId&gt;org.projectlombok&lt;&#x2F;groupId&gt;
     &lt;artifactId&gt;lombok&lt;&#x2F;artifactId&gt;
     &lt;version&gt;1.18.16&lt;&#x2F;version&gt;
     &lt;scope&gt;provided&lt;&#x2F;scope&gt;
&lt;&#x2F;dependency&gt;</code></pre>
<span id="more"></span>
<p>Lombok的<code>scope=provided</code>，说明它只在<code>编译</code>阶段生效，不需要打入包中。事实正是如此，Lombok在编译期将带Lombok注解的Java文件正确编译为完整的Class文件。</p>
<p>3.使用 lomback 注解</p>
<h2 id="1-Getter-and-Setter">1. @Getter and @Setter</h2>
<p>使用<code>@Getter</code>或<code>@Setter</code>注释任何字段，以使lombok自动生成默认的<code>getter</code> / <code>setter</code>。<br>
默认的<code>getter</code>只是返回该字段，如果该字段被称为foo，则名为getFoo（如果该字段的类型为boolean，则为isFoo）。<br>
默认生成的 <code>getter</code> / <code>setter</code>方法是<code>公共</code>的，你可以指定一个<code>AccessLevel</code>来设置访问级别。访问级别有<code>PUBLIC</code>，<code>PROTECTED</code>，<code>PACKAGE</code>，<code>PRIVATE</code>四种。<br>
你还可以在类上添加<code>@Getter</code>或<code>@Setter</code>注解。在这种情况下，就好像你使用该注解来注释该类中的所有<code>非静态字段</code>一样。<br>
你始终可以使用特殊的<code>AccessLevel.NONE</code>访问级别来手动禁用任何字段的<code>getter</code> / <code>setter</code>生成。这时你可以覆盖类上的<code>@Getter</code>，<code>@Setter</code>或 <code>@Data</code>注释的行为。</p>
<p><strong>使用 Lombok Java 代码：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AccessLevel</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Getter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Setter</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetterSetterExample</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Getter</span><span class="token punctuation">(</span><span class="token class-name">AccessLevel</span><span class="token punctuation">.</span><span class="token constant">NONE</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Getter</span><span class="token punctuation">(</span><span class="token class-name">AccessLevel</span><span class="token punctuation">.</span><span class="token constant">PROTECTED</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> success<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p><strong>编译后：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GetterSetterExample</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token class-name">String</span> code<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> success<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCode</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>code <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setSuccess</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">boolean</span> success<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>success <span class="token operator">=</span> success<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isSuccess</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>success<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h2 id="2-ToString">2. @ToString</h2>
<p>生成<code>toString()</code>方法的实现。<br>
默认情况下，它将使用所有<code>非静态</code>字段</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>includeFieldNames</code></td>
<td style="text-align:left">打印时是否显示字段名称，默认为 true</td>
</tr>
<tr>
<td style="text-align:left"><code>of</code></td>
<td style="text-align:left">打印字段；如果存在，只会打印标识的字段</td>
</tr>
<tr>
<td style="text-align:left"><code>exclude</code></td>
<td style="text-align:left">跳过字段；和<code>of</code>相反；不会打印标识的字段。 也可以在字段上使用 <code>@ToString.Exclude</code>跳过。</td>
</tr>
<tr>
<td style="text-align:left"><code>callSuper</code></td>
<td style="text-align:left">toString是否包含超类实现的结果，默认为 false</td>
</tr>
<tr>
<td style="text-align:left"><code>doNotUseGetters</code></td>
<td style="text-align:left">默认为 false；如果值为true，则Lombok会直接获取 field 而不是通过get方法获取值</td>
</tr>
</tbody>
</table>
<p><strong>使用 Lombok Java 代码：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">ToString</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@ToString</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToStringExample</span> <span class="token keyword">extends</span> <span class="token class-name">GetterSetterExample</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STATIC_VAR</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@ToString.Exclude</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</code></pre>
<p><strong>编译后：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToStringExample</span> <span class="token keyword">extends</span> <span class="token class-name">GetterSetterExample</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STATIC_VAR</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ToStringExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"ToStringExample(super="</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h2 id="3-EqualsAndHashCode">3. @EqualsAndHashCode</h2>
<p>生成<code>equals(Object other)</code>和<code>hashCode()</code>方法的实现。<br>
默认情况下，它将使用所有<code>非静态，非瞬态</code>字段。</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>of</code></td>
<td style="text-align:left">打印字段；如果存在，只会包含标识的字段</td>
</tr>
<tr>
<td style="text-align:left"><code>exclude</code></td>
<td style="text-align:left">跳过字段；和<code>of</code>相反；不会包含标识的字段。 也可以在字段上使用 <code>@EqualsAndHashCode.Exclude</code>跳过。</td>
</tr>
<tr>
<td style="text-align:left"><code>callSuper</code></td>
<td style="text-align:left">equals/hashCode是否包含超类实现的结果，默认为 false</td>
</tr>
<tr>
<td style="text-align:left"><code>doNotUseGetters</code></td>
<td style="text-align:left">默认为 false；如果值为true，则Lombok会直接获取 field 而不是通过get方法获取值(如果可用)</td>
</tr>
</tbody>
</table>
<p><strong>使用 Lombok Java 代码：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">EqualsAndHashCode</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> exclude <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EqualsAndHashCodeExample</span> <span class="token keyword">extends</span> <span class="token class-name">GetterSetterExample</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STATIC_VAR</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</code></pre>
<p><strong>编译后：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EqualsAndHashCodeExample</span> <span class="token keyword">extends</span> <span class="token class-name">GetterSetterExample</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STATIC_VAR</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">EqualsAndHashCodeExample</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">EqualsAndHashCodeExample</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">EqualsAndHashCodeExample</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>other<span class="token punctuation">.</span><span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">==</span> other<span class="token punctuation">.</span>id<span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> other <span class="token keyword">instanceof</span> <span class="token class-name">EqualsAndHashCodeExample</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> <span class="token constant">PRIME</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">59</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>
<h2 id="4-AllArgsConstructor、-RequiredArgsConstructor、-NoArgsConstructor">4. @AllArgsConstructor、@RequiredArgsConstructor、@NoArgsConstructor</h2>
<p>生成构造函数</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>access</code></td>
<td style="text-align:left">设置构造器的权限。</td>
</tr>
<tr>
<td style="text-align:left"><code>staticName</code></td>
<td style="text-align:left">如果生成静态的构造方法，那么原来的实例构造方法将会被私有（private），然后创建一个你指定名称的静态构造方法，并且是public的</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">注解</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>@AllArgsConstructor</code></td>
<td style="text-align:left">生成一个包含所有变量的构造函数。 参数顺序与属性顺序一致。 <code>标有@NonNull</code>的字段会进行非空校验。</td>
</tr>
<tr>
<td style="text-align:left"><code>@NoArgsConstructor</code></td>
<td style="text-align:left">生成没有参数的构造函数。</br>当类中有final字段没有被初始化时，编译器会报错，但是也可用<code>@NoArgsConstructor(force = true)</code>将所有final字段都将初始化为<code>0/false/null</code>。  对于具有约束的字段(例如<code>@NonNull</code>字段)，不会生成任何检查。</td>
</tr>
<tr>
<td style="text-align:left"><code>@RequiredArgsConstructor</code></td>
<td style="text-align:left">会生成一个无参构造方法或者一个包含以final修饰的未经初始化的字段以及标识了<code>@NotNull</code>的变量的有参构造方法。</td>
</tr>
</tbody>
</table>
<p><strong>使用 Lombok Java 代码：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NoArgsConstructor</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@AllArgsConstructor</span>
<span class="token annotation punctuation">@NoArgsConstructor</span><span class="token punctuation">(</span>staticName <span class="token operator">=</span> <span class="token string">"myCustom"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructorExample</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STATIC_VAR</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p><strong>编译后：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructorExample</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STATIC_VAR</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ConstructorExample</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token class-name">ConstructorExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ConstructorExample</span> <span class="token function">myCustom</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ConstructorExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p><strong>使用 Lombok Java 代码：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">RequiredArgsConstructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">NonNull</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@RequiredArgsConstructor</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequiredArgsConstructorExample</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@NonNull</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</code></pre>
<p><strong>编译后：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RequiredArgsConstructorExample</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@NonNull</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">ConstructorExample</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token annotation punctuation">@NonNull</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"name is marked non-null but is null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>
<h2 id="5-Data">5. @Data</h2>
<p><code>@Data</code>是<code>@ToString</code>、<code>@EqualsAndHashCode</code>、<code>@Getter</code>、<code>@Setter</code>、<code>@RequiredArgsConstructor</code>五个注解的集合。</p>
<p><strong>使用 Lombok Java 代码：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Data</span> 
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataExample</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STATIC_VAR</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p><strong>编译后：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataExample</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">STATIC_VAR</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">DataExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">DataExample</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">DataExample</span> other <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">DataExample</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>other<span class="token punctuation">.</span><span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> other<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token class-name">Object</span> <span class="token keyword">this</span>$name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Object</span> other$name <span class="token operator">=</span> other<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span>$name <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>other$name <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span>$name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other$name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">canEqual</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Object</span> other<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> other <span class="token keyword">instanceof</span> <span class="token class-name">DataExample</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> <span class="token constant">PRIME</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">59</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> $name <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        result <span class="token operator">=</span> result <span class="token operator">*</span> <span class="token number">59</span> <span class="token operator">+</span> <span class="token punctuation">(</span>$name <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">43</span> <span class="token operator">:</span> $name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"DataExample(id="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h2 id="6-Value">6. @Value</h2>
<p><code>@Value</code>注解和<code>@Data</code>类似，区别在于它会把所有成员变量默认定义为<code>private final</code>修饰，并且<code>不会</code>生成set方法。</p>
<h2 id="7-Builder">7. @Builder</h2>
<p><strong>构建者模式</strong> 只能标注到类上，将生成类的一个当前流程的一种链式构造工厂，如下：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">BuilderExample</span> builderExample <span class="token operator">=</span> <span class="token class-name">BuilderExample</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listAdd</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>builderExample<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p>运行输出：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">BuilderExample</span><span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span>路飞<span class="token punctuation">,</span> list<span class="token operator">=</span><span class="token punctuation">[</span>你好<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre>
<p>常配合<code>@Singular</code>注解使用，<code>@Singular</code>注解使用在jdk内部集合类型的属性，Map类型的属性以及Guava的com.google.common.collect 的属性上。<br>
例如 未标注@Singular的属性，一般setter时，会直接覆盖原来的引用，标注了<code>@Singular</code>的属性，集合属性支持<code>添加</code>操作，会在属性原来的基础上增加。<br>
使用<code>@Builder.Default</code>来设置默认值</p>
<p><strong>使用 Lombok Java 代码：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Builder</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">ToString</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Singular</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span></span><span class="token punctuation">;</span>

<span class="token annotation punctuation">@Builder</span>
<span class="token annotation punctuation">@ToString</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuilderExample</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Builder.Default</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Singular</span><span class="token punctuation">(</span><span class="token string">"listAdd"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p><strong>编译后：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BuilderExample</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> $<span class="token keyword">default</span>$<span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token class-name">BuilderExample</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BuilderExample<span class="token punctuation">.</span>BuilderExampleBuilder</span> <span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BuilderExample<span class="token punctuation">.</span>BuilderExampleBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string">"BuilderExample(id="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">", list="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">BuilderExampleBuilder</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token keyword">boolean</span> id$set<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token keyword">int</span> id$value<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">;</span>

        <span class="token class-name">BuilderExampleBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">BuilderExample<span class="token punctuation">.</span>BuilderExampleBuilder</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>id$value <span class="token operator">=</span> id<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>id$set <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">BuilderExample<span class="token punctuation">.</span>BuilderExampleBuilder</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">BuilderExample<span class="token punctuation">.</span>BuilderExampleBuilder</span> <span class="token function">listAdd</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> listAdd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>listAdd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">BuilderExample<span class="token punctuation">.</span>BuilderExampleBuilder</span> <span class="token function">list</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>list <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">"list cannot be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>

                <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">BuilderExample<span class="token punctuation">.</span>BuilderExampleBuilder</span> <span class="token function">clearList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">BuilderExample</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">List</span> list<span class="token punctuation">;</span>
            <span class="token keyword">switch</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>
                list <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">emptyList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>
                list <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">singletonList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token keyword">default</span><span class="token operator">:</span>
                list <span class="token operator">=</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">int</span> id$value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id$value<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>id$set<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                id$value <span class="token operator">=</span> <span class="token class-name">BuilderExample</span><span class="token punctuation">.</span>$<span class="token keyword">default</span>$<span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>

            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">BuilderExample</span><span class="token punctuation">(</span>id$value<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span> list<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token string">"BuilderExample.BuilderExampleBuilder(id$value="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id$value <span class="token operator">+</span> <span class="token string">", name="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">", list="</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">+</span> <span class="token string">")"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>
<h2 id="8-Accessors">8. @Accessors</h2>
<p><strong>链式风格</strong> <code>@Accessors</code>注解用于配置lombok<code>如何生成</code>getter和setter。</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>fluent</code></td>
<td style="text-align:left">默认false；设置为true时getter和setter方法将<strong>省略get和set前缀</strong>，且setter方法返回<strong>当前对象</strong>。</td>
</tr>
<tr>
<td style="text-align:left"><code>chain</code></td>
<td style="text-align:left">默认false；设置为true时setter方法返回<strong>当前对象</strong></td>
</tr>
<tr>
<td style="text-align:left"><code>prefix</code></td>
<td style="text-align:left">用于设置生成getter和setter方法的字段名会<strong>忽视指定前缀</strong>（属性<strong>必须为驼峰式命名</strong>）</td>
</tr>
</tbody>
</table>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">AccessorsExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">"路飞"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<p><strong>使用 Lombok Java 代码：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Setter</span>
<span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>fluent <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span> prefix <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessorsExample</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> aId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> aName<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</code></pre>
<p><strong>编译之后为：</strong></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccessorsExample</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">int</span> aId<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> aName<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">AccessorsExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aId<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aName<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">AccessorsExample</span> <span class="token function">id</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> aId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>aId <span class="token operator">=</span> aId<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">AccessorsExample</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token class-name">String</span> aName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>aName <span class="token operator">=</span> aName<span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code></pre>
<h2 id="9-Slf4j、-Log4j2">9. @Slf4j、@Log4j2</h2>
<p>在需要打印日志的类中使用，项目中使用slf4j、log4j2日志框架<br>
相当于：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span>  <span class="token keyword">final</span> <span class="token class-name">Logger</span> log <span class="token operator">=</span> <span class="token class-name">LoggerFactory</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>当前类名<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>
<h2 id="10-NonNull">10. @NonNull</h2>
<p>该注解快速判断是否为空，为空抛出java.lang.NullPointerException。</p>
<h2 id="11-Synchronized">11. @Synchronized</h2>
<p>注解自动添加到同步机制，生成的代码并不是直接锁方法,而是锁代码块， 作用范围是方法上。</p>
<h2 id="12-Cleanup">12. @Cleanup</h2>
<p>注解用于确保已分配的资源被释放（IO的连接关闭）。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>Lombok</tag>
        <tag>语法速查</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven常用命令</title>
    <url>//blog/201116.html</url>
    <content><![CDATA[<h2 id="1-常用命令">1. 常用命令</h2>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>mvn clean</strong></td>
<td style="text-align:left">清除已编译信息(target目录)</td>
</tr>
<tr>
<td style="text-align:left"><strong>mvn install</strong></td>
<td style="text-align:left">本地安装，包含编译，打包，安装到本地仓库</td>
</tr>
<tr>
<td style="text-align:left"><strong><code>mvn install -DskipTests</code></strong></td>
<td style="text-align:left">本地安装并跳过test测试</td>
</tr>
<tr>
<td style="text-align:left"><strong>mvn install -Dmaven.test.skip=true</strong></td>
<td style="text-align:left">这个也能跳过test测试</td>
</tr>
<tr>
<td style="text-align:left"><strong>mvn package</strong></td>
<td style="text-align:left">打包， 包含编译，打包两个功能。</td>
</tr>
<tr>
<td style="text-align:left"><strong>mvn compile</strong></td>
<td style="text-align:left">只编译，javac命令</td>
</tr>
</tbody>
</table>
<hr>
<span id="more"></span>
<h2 id="2-install和package的区别：">2. install和package的区别：</h2>
<p>package命令只是完成了项目编译、单元测试、打包功能</p>
<p>install命令完成了项目编译、单元测试、打包功能，同时把打好的可执行jar包（war包或其它形式的包）布署到 <strong><code>本地maven仓库</code></strong> ，但没有布署到远程maven私服仓库</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>语法速查</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven单、多仓库配置</title>
    <url>//blog/210518.html</url>
    <content><![CDATA[<h2 id="1-单独仓库配置">1. 单独仓库配置</h2>
<ul>
<li>打开Maven配置文件 <code>apache-maven-3.6.3\conf\settings.xml</code></li>
<li>在<code>&lt;mirrors&gt;&lt;/mirrors&gt;</code>标签里新增一个<code>mirror</code>配置即可。</li>
</ul>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span></code></pre>
<span id="more"></span>
<table>
<thead>
<tr>
<th style="text-align:center">标签</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>id</strong></td>
<td style="text-align:left">镜像的唯一标识</td>
</tr>
<tr>
<td style="text-align:center"><strong>name</strong></td>
<td style="text-align:left">名称描述</td>
</tr>
<tr>
<td style="text-align:center"><strong>url</strong></td>
<td style="text-align:left">地址</td>
</tr>
<tr>
<td style="text-align:center"><strong>mirrorOf</strong></td>
<td style="text-align:left">指定镜像规则，什么情况下从镜像仓库拉取</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">mirrorOf规则</th>
<th style="text-align:left">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>*</strong></td>
<td style="text-align:left">匹配所有，所有内容都从镜像拉取</td>
</tr>
<tr>
<td style="text-align:center"><strong>external:*</strong></td>
<td style="text-align:left">除了本地缓存的所有从镜像仓库拉取</td>
</tr>
<tr>
<td style="text-align:center"><strong>central</strong></td>
<td style="text-align:left">覆盖默认的仓库</td>
</tr>
<tr>
<td style="text-align:center"><strong>repo1,repo2</strong></td>
<td style="text-align:left">匹配仓库repo1和repo2,使用逗号分割多个远程仓库</td>
</tr>
</tbody>
</table>
<p>比如：镜像配置的规则 <code>&lt;mirrorOf&gt;repo1&lt;/mirrorOf&gt;</code>，意为：匹配到目标仓库 <code>&lt;id&gt;repo1&lt;/id&gt;</code>；</p>
<p>所以maven认为目标仓库central被镜像了； 不再去 <a href="https://repo.maven.apache.org/maven2/">https://repo.maven.apache.org/maven2/</a> 地址下载jar包；</p>
<p>而是去镜像仓库 <a href="http://maven.aliyun.com/nexus/content/groups/public/">http://maven.aliyun.com/nexus/content/groups/public/</a> 下载jar包。</p>
<h2 id="2-多仓库配置">2. 多仓库配置</h2>
<p>有时候我们需要的jar包公有仓库没有，此时就必须启用多仓库配置，使maven同时使用私有仓库和公有仓库。</p>
<ul>
<li>在<code>&lt;profiles&gt;&lt;/profiles&gt;</code>标签里配置多个<code>profile</code>配置。</li>
</ul>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyun-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">></span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jboss-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>jboss<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://repository.jboss.org/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">></span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profile</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repositories</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>repository</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>maven2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://central.maven.org/maven2/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>releases</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>releases</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>snapshots</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>enabled</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>enabled</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>updatePolicy</span><span class="token punctuation">></span></span>always<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>updatePolicy</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>snapshots</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repository</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>repositories</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>profile</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>profiles</span><span class="token punctuation">></span></span></code></pre>
<ul>
<li>在<code>&lt;activeProfiles&gt;&lt;/activeProfiles&gt;</code>标签里使用<code>&lt;activeProfile&gt;&lt;/activeProfile&gt;</code>标签启用配置。</li>
</ul>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfiles</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>aliyun-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>jboss-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>activeProfile</span><span class="token punctuation">></span></span>maven-repo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfile</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>activeProfiles</span><span class="token punctuation">></span></span></code></pre>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令速查</title>
    <url>//blog/201205.html</url>
    <content><![CDATA[<h2 id="1-创建版本库">1. 创建版本库</h2>
<table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">初始化本地版本库</td>
<td style="text-align:left"><strong>git init [文件夹名]</strong></td>
</tr>
<tr>
<td style="text-align:left">克隆远程版本库</td>
<td style="text-align:left"><strong>git clone [url]</strong></td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h2 id="2-拉取、推送、查看">2. 拉取、推送、查看</h2>
<table>
<thead>
<tr>
<th style="text-align:left">分支常用命令</th>
<th style="text-align:left">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">拉取远程代码到本地并进行合并</td>
<td style="text-align:left"><strong>git pull [origin] [分支名]</strong></td>
</tr>
<tr>
<td style="text-align:left">推送代码到远程</td>
<td style="text-align:left"><strong>git push [origin] [分支名]</strong> （分支名省略时，表示提交到当前分支）</td>
</tr>
<tr>
<td style="text-align:left">强制推送代码到远程</td>
<td style="text-align:left"><strong>git push -f origin [分支名]</strong> <strong>（会将远程提交强制覆盖，慎用）</strong></td>
</tr>
<tr>
<td style="text-align:left"><strong>查看远程地址</strong></td>
<td style="text-align:left"><strong>git remote -v</strong></td>
</tr>
<tr>
<td style="text-align:left"><strong>添加远程地址</strong></td>
<td style="text-align:left"><strong>git remote add origin [url]</strong></td>
</tr>
<tr>
<td style="text-align:left"><strong>修改远程地址</strong></td>
<td style="text-align:left"><strong>git remote set-url origin [url]</strong></td>
</tr>
<tr>
<td style="text-align:left">查看仓库的状态</td>
<td style="text-align:left"><strong>git status</strong></td>
</tr>
<tr>
<td style="text-align:left">查看文件修改的内容</td>
<td style="text-align:left"><strong>git diff 文件名</strong></td>
</tr>
<tr>
<td style="text-align:left">查看提交日志</td>
<td style="text-align:left"><strong>git log</strong>     <strong>q</strong>退出查看</td>
</tr>
<tr>
<td style="text-align:left"><strong>查看提交日志(精简版)</strong></td>
<td style="text-align:left"><strong>git log --oneline</strong></td>
</tr>
<tr>
<td style="text-align:left"><strong>查看.ssh所在文件夹</strong></td>
<td style="text-align:left"><strong>ll -d ~/.ssh</strong></td>
</tr>
</tbody>
</table>
<h2 id="3-添加、提交">3. 添加、提交</h2>
<table>
<thead>
<tr>
<th style="text-align:left">分支常用命令</th>
<th style="text-align:left">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">添加本地的某个新文件到本地仓库（缓存区）</td>
<td style="text-align:left"><strong>git add 文件名</strong></td>
</tr>
<tr>
<td style="text-align:left">添加本地所有的新文件到本地仓库</td>
<td style="text-align:left"><strong>git add .</strong></td>
</tr>
<tr>
<td style="text-align:left">提交代码到本地仓库</td>
<td style="text-align:left"><strong>git commit -m ‘提交信息’</strong></td>
</tr>
<tr>
<td style="text-align:left"><strong>同时add和commit</strong></td>
<td style="text-align:left"><strong>git commit -am ‘提交信息’</strong></td>
</tr>
<tr>
<td style="text-align:left"><strong>增补提交</strong></td>
<td style="text-align:left"><strong>git commit -C head -a -‌-amend</strong> 不会产生新的提交历史记录</td>
</tr>
<tr>
<td style="text-align:left"><strong>增补提交</strong></td>
<td style="text-align:left"><strong>git commit -am “提交信息” -‌-amend</strong> 与上面的相比，会修改提交信息</td>
</tr>
</tbody>
</table>
<h2 id="4-分支命令">4. 分支命令</h2>
<table>
<thead>
<tr>
<th style="text-align:left">分支常用命令</th>
<th style="text-align:left">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">创建分支（基于当前分支）</td>
<td style="text-align:left"><strong>git branch 分支名</strong></td>
</tr>
<tr>
<td style="text-align:left">查看本地分支</td>
<td style="text-align:left"><strong>git branch</strong></td>
</tr>
<tr>
<td style="text-align:left">查看远程分支</td>
<td style="text-align:left"><strong>git branch -r</strong></td>
</tr>
<tr>
<td style="text-align:left">查看本地和远程所有分支</td>
<td style="text-align:left"><strong>git branch -a</strong></td>
</tr>
<tr>
<td style="text-align:left">切换分支</td>
<td style="text-align:left"><strong>git checkout 分支名</strong></td>
</tr>
<tr>
<td style="text-align:left">创建分支并切换到该分支</td>
<td style="text-align:left"><strong>git checkout -b 分支名</strong></td>
</tr>
<tr>
<td style="text-align:left">合并分支到当前所在分支</td>
<td style="text-align:left"><strong>git merge 分支名</strong></td>
</tr>
<tr>
<td style="text-align:left">删除本地分支</td>
<td style="text-align:left"><strong>git branch -d 分支名</strong> 如果分支没有被合并会删除失败</td>
</tr>
<tr>
<td style="text-align:left">强制删除本地分支</td>
<td style="text-align:left"><strong>git branch -D 分支名</strong> 即使分支没有被合并也照删不误</td>
</tr>
<tr>
<td style="text-align:left">删除远程分支</td>
<td style="text-align:left"><strong>git push origin -‌-delete 分支名</strong></td>
</tr>
<tr>
<td style="text-align:left">重命名分支</td>
<td style="text-align:left"><strong>git branch -m 原分支名 新分支名</strong> 不会覆盖已存在的同名分支</td>
</tr>
<tr>
<td style="text-align:left">重命名分支</td>
<td style="text-align:left"><strong>git branch -M 原分支名 新分支名</strong> 会覆盖已存在的同名分支</td>
</tr>
</tbody>
</table>
<h2 id="5-撤销修改">5. 撤销修改</h2>
<table>
<thead>
<tr>
<th style="text-align:left">分支常用命令</th>
<th style="text-align:left">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">删除所有untracked的文件</td>
<td style="text-align:left"><strong>git clean -df</strong>  如果文件已经被tracked, 修改过的文件不会被回退</td>
</tr>
<tr>
<td style="text-align:left">撤销尚未提交的所有文件的修改</td>
<td style="text-align:left"><strong>git checkout .</strong></td>
</tr>
<tr>
<td style="text-align:left">把当前分支的代码全部回退到以前的一个版本</td>
<td style="text-align:left"><strong>git reset -‌-hard [版本号]</strong>   不加版本号，即撤销当前版本的更改</td>
</tr>
</tbody>
</table>
<h2 id="6-生成-SSH-Key">6. 生成 SSH Key</h2>
<pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen <span class="token parameter variable">-t</span> rsa <span class="token parameter variable">-C</span> <span class="token string">"aliang.link@foxmail.com"</span></code></pre>
<p>生成的SSH Key在 <strong>C:\Users\用户名\.ssh</strong>下</p>
<h2 id="7-设置忽略的文件">7. 设置忽略的文件</h2>
<table>
<thead>
<tr>
<th style="text-align:left">类型</th>
<th style="text-align:left">方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">设置每个人都想要忽略的文件</td>
<td style="text-align:left">在根目录新建一个名为 <strong>.gitignore</strong> 的文本文件</td>
</tr>
<tr>
<td style="text-align:left">设置只有自己需要忽略的文件</td>
<td style="text-align:left">修改 <strong>.git/info/exclude</strong> 文件</td>
</tr>
</tbody>
</table>
<h2 id="8-全局变量">8. 全局变量</h2>
<p>设置本地git的全局变量</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"aliang"</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"aliang.link@foxmail.com"</span></code></pre>
<h2 id="9-常见中文乱码问题">9. 常见中文乱码问题</h2>
<table>
<thead>
<tr>
<th style="text-align:left">乱码类型</th>
<th style="text-align:left">解决方法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>git log 命令中文乱码</strong></td>
<td style="text-align:left">永久解决方案-添加环境变量：变量名： <strong>LESSCHARSET</strong>变量值： <strong>utf-8</strong></td>
</tr>
<tr>
<td style="text-align:left"><strong>git log 命令中文乱码</strong></td>
<td style="text-align:left">临时解决方案（仅本次会话有效）：windows执行 <strong>set LESSCHARSET=utf-8</strong>；linux执行 <strong>export LESSCHARSET=utf-8</strong></td>
</tr>
<tr>
<td style="text-align:left">bash 控制台 ls  命令中文文件名乱码</td>
<td style="text-align:left">在 Git\etc\git-completion.bash 文件中追加一行 <code>alias ls='ls --show-control-chars --color=auto'</code></td>
</tr>
<tr>
<td style="text-align:left">bash 控制台 git commit 无法输入中文注释</td>
<td style="text-align:left">修改 Git\etc\inputrc文件 <code>set output-meta on</code> <code>set convert-meta off</code></td>
</tr>
<tr>
<td style="text-align:left">gitk 显示中文注释乱码</td>
<td style="text-align:left"><strong>git config --global i18n.commitencoding utf-8</strong> <strong>git config --global i18n.logoutputencoding utf-8</strong></td>
</tr>
</tbody>
</table>
<h2 id="10-合并多个commit提交记录">10. 合并多个commit提交记录</h2>
<p>使用 <strong>git rebase -i [版本号]</strong> 命令，详细步骤 <a href="/blog/210109.html" title="点我查看详情">Git 如何合并多个commit提交记录</a></p>
<h2 id="11-git-push-远程断开">11. git push 远程断开</h2>
<p><code>git push</code> 或者 <code>git clone</code> 时，当文件过大时可能会返回以下错误</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">the remote end hung up unexpectedly</code></pre>
<p>解决方法如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config http.postBuffer <span class="token number">524288000</span>            <span class="token comment">#配置推送文件最大大小</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> http.lowSpeedLimit <span class="token number">0</span>        <span class="token comment">#配置最低速度</span>
<span class="token function">git</span> config <span class="token parameter variable">--global</span> http.lowSpeedTime <span class="token number">999999</span>    <span class="token comment">#配置最低速度超时时间</span></code></pre>
<p>如果还未解决，可以修改一下远程地址试试，比如https换成git，或者git换成https</p>
<p>还不行的话，就只能FQ了。</p>
<h2 id="12-git-修改远程仓库地址">12. git 修改远程仓库地址</h2>
<h3 id="12-1-命令直接修改">12.1 命令直接修改</h3>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote set-url origin <span class="token punctuation">[</span>url<span class="token punctuation">]</span></code></pre>
<h3 id="12-2-命令先删后加">12.2 命令先删后加</h3>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> remote <span class="token function">rm</span> origin
<span class="token function">git</span> remote <span class="token function">add</span> origin <span class="token punctuation">[</span>url<span class="token punctuation">]</span></code></pre>
<h3 id="12-3-直接修改config文件">12.3 直接修改config文件</h3>
<p>直接修改项目根目录的.git文件下的config文件<br>
<img data-src="/assets/img/2020/20201205-1.jpg" alt="config文件" title="config文件"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Git如何合并多个commit提交记录</title>
    <url>//blog/210109.html</url>
    <content><![CDATA[<h2 id="1-为什么要合并多个commit提交记录？">1. 为什么要合并多个commit提交记录？</h2>
<p>  在我们日常开发过程中，开发一个功能，肯定会从master切出一个 dev；当这个功能开发、测试完成后需要合并至 master;这个时候 dev 常常有多条，甚至几十条提交记录，直接提交，就会在 master 造成大量的无用 commit ，造成 git log 污染。这个时候就需要将同等意思的提交记录合并为一条，来保证代码整洁、方便 code review 。</p>
<span id="more"></span>
<h2 id="2-使用命令合并">2. 使用命令合并</h2>
<h3 id="2-1-将git的编辑器改为vim-默认就是，不执行也没问题">2.1 将git的编辑器改为vim(默认就是，不执行也没问题)</h3>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config core.editor <span class="token function">vim</span></code></pre>
<h3 id="2-2-查看git提交日志">2.2 查看git提交日志</h3>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> log <span class="token parameter variable">--oneline</span></code></pre>
<p><img data-src="/assets/img/2020/x1.jpg" alt="git log --oneline" title="git log --oneline"></p>
<h3 id="2-3-使用-git-rebase-i-版本号-或-git-rebase-i-HEAD-n命令">2.3 使用 <strong>git rebase -i [版本号]</strong> 或 <strong>git rebase -i HEAD~n</strong>命令</h3>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment">### 合并a680471后的commint</span>
<span class="token function">git</span> rebase <span class="token parameter variable">-i</span> a680471
<span class="token comment">### 或</span>
<span class="token comment">### 合并最近三次的commint</span>
<span class="token function">git</span> rebase <span class="token parameter variable">-i</span> HEAD~3</code></pre>
<h3 id="2-4-2-3执行后会进入vim编辑页面">2.4 2.3执行后会进入vim编辑页面</h3>
<p>   使用 <strong>i</strong> 进入编辑模式，将pick改为s，第一行不改；然后 <strong>Esc</strong> 、 <strong>:</strong> 、 <strong>wq</strong> 保存退出，会进入编辑提交信息界面<br>
<img data-src="/assets/img/2020/x2.jpg" alt="编辑" title="编辑"></p>
<p>   使用 <strong>i</strong> 进入编辑模式修改提交信息；然后 <strong>Esc</strong> 、 <strong>:</strong> 、 <strong>wq</strong> 保存退出，即可完成commit合并。<br>
<img data-src="/assets/img/2020/x3.jpg" alt="修改commit" title="修改commit"></p>
<p>   合并完成之后的分支<br>
<img data-src="/assets/img/2020/x4.jpg" alt="完成" title="完成"></p>
<blockquote>
<p>如过合并到一半想撤销修改，执行 <code>git rebase –abort</code> 即可</p>
</blockquote>
<h2 id="3-IDEA-2020-2-4-开发工具合并">3. IDEA(2020.2.4)开发工具合并</h2>
<p>   进入 <strong>Git</strong> 控制台，选中需要合并的commit右键选择 <strong>Squash Commits…</strong> ；然后 填写新的commit记录即可。<br>
<img data-src="/assets/img/2020/x6.jpg" alt="IDEA开发工具合并" title="IDEA开发工具合并"></p>
<h2 id="4-windows上使用git-rebase-i命令进入vi编辑器时中文乱码">4. windows上使用git rebase -i命令进入vi编辑器时中文乱码</h2>
<p>在你的Git安装目录中找到Git\etc\vimrc文件，增加以下内容：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> <span class="token assign-left variable">fileencodings</span><span class="token operator">=</span>utf-8,gb2312,gbk,gb18030
<span class="token builtin class-name">set</span> <span class="token assign-left variable">termencoding</span><span class="token operator">=</span>utf-8
<span class="token builtin class-name">set</span> <span class="token assign-left variable">fileformats</span><span class="token operator">=</span>unix
<span class="token builtin class-name">set</span> <span class="token assign-left variable">encoding</span><span class="token operator">=</span>prc</code></pre>
<p>重新打开即可</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>编程</tag>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot之配置文件</title>
    <url>//blog/210309.html</url>
    <content><![CDATA[<h2 id="1-什么是配置文件？">1. 什么是配置文件？</h2>
<blockquote>
<p>当我们构建完Spring Boot项目后，会在resources目录下给我们一个默认的全局配置文件 application.properties，这是一个空文件，因为Spring Boot在底层已经把配置都给我们自动配置好了，当在配置文件进行配置时，<strong><code>会修改SpringBoot自动配置的默认值。</code></strong></p>
</blockquote>
<span id="more"></span>
<h2 id="2-配置文件有什么用？">2. 配置文件有什么用？</h2>
<ul>
<li>修改SpringBoot自动配置的默认值，使我们程序的插件能正常运行（比如Mysql、mybatis配置）。</li>
<li>自定义配置属性，便于我们维护程序中的变量值。</li>
</ul>
<h2 id="3-配置文件的种类">3. 配置文件的种类</h2>
<h3 id="3-1-yml（推荐使用）">3.1 .yml（推荐使用）</h3>
<ul>
<li>YAML：一种标记语言，以数据为中心，比JSON、XML更适合做配置文件，后缀名可以是 <code>.yml</code> 或 <code>.yaml</code> 。</li>
<li>在SpringBoot中，使用最广泛的配置文件是它，yaml之所以流行，除了他配置语法精简之外，还因为yaml是一个跨编程语言的配置文件 。</li>
<li>基本语法
<ul>
<li>k:(空格)v；其中k是键，v是值，注意冒号后面有个空格。</li>
<li>以空格的缩进为控制层级关系， <code>左对齐</code> 的一列数据的层级关系是一样的。</li>
<li>属性和值都是大小写敏感的。</li>
</ul>
</li>
<li>.yml配置Tomcat启动端口号示例</li>
</ul>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">server</span><span class="token punctuation">:</span>
  <span class="token key atrule">port</span><span class="token punctuation">:</span> <span class="token number">8081</span></code></pre>
<h3 id="3-2-properties">3.2 .properties</h3>
<ul>
<li>以key=value格式存储内容的文件。</li>
</ul>
<pre class="language-properties" data-language="properties"><code class="language-properties"><span class="token key attr-name">server.port</span><span class="token punctuation">=</span><span class="token value attr-value">8081</span></code></pre>
<h3 id="3-3-xml">3.3 .xml</h3>
<ul>
<li>传统的Spring配置文件格式。</li>
<li>因为其配置繁琐、开发效率稍低、文件解析耗时等原因，.xml配置文件已经不推荐使用。</li>
</ul>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xmlTest<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.liang.stu.properties.core.XmlTest<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stringTest<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listTest<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a,b,c<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapTest<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>
<h2 id="4-SpringBoot配置文件读取优先级">4. SpringBoot配置文件读取优先级</h2>
<h3 id="4-1-三种比较方式">4.1 三种比较方式</h3>
<ul>
<li>文件名优先级</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java">application <span class="token operator">></span> bootstrap</code></pre>
<ul>
<li>路径优先级</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token number">1.</span> file<span class="token operator">:</span><span class="token punctuation">.</span>/config<span class="token operator">/</span>           （项目根目录中config目录下）
<span class="token number">2.</span> file<span class="token operator">:</span><span class="token punctuation">.</span>/                  （项目根目录下）
<span class="token number">3.</span> classpath<span class="token operator">:</span><span class="token operator">/</span>config<span class="token operator">/</span>       （项目resources目录中config目录下）
<span class="token number">4.</span> classpath<span class="token operator">:</span><span class="token operator">/</span>              （项目的resources目录下）</code></pre>
<p>如下图所示<br>
<img data-src="/assets/img/2021/20210309-1.jpg" alt="路径优先级" title="路径优先级"></p>
<ul>
<li>类型优先级</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token punctuation">.</span>properties <span class="token operator">></span> <span class="token punctuation">.</span>yml</code></pre>
<h3 id="4-2-小结">4.2 小结</h3>
<ul>
<li>三种优先级比较时，只有前者相同，才需比较后面的 <strong><code>文件名优先级 &gt; 路径优先级 &gt; 类型优先级</code></strong></li>
<li>经过测试发现：springboot项目默认并不能读取到bootstrap配置文件，必须加入spring-cloud-context的依赖</li>
</ul>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-context<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre>
<ul>
<li>所以bootstrap是在cloud项目中才使用的配置文件</li>
<li>bootstrap.yml 用来程序引导时执行，应用于更加早期配置信息读取. 可以理解成系统级别的一些参数配置，这些参数一般是不会变动的。<br>
application.yml 可以用来定义应用级别的， 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等.如果加载的application.yml的内容标签与bootstrap的标签一致，application会覆盖bootstrap, 而application.yml 里面的内容可以动态替换。</li>
<li>经过测试发现：配置文件放在项目根目录下时只有是自定义的属性配置才会生效，（比如非自定义的server.port=8081配置不会生效）。<br>
看到这篇博客的人知其原因可留言告知，非常感谢。</li>
</ul>
<h2 id="5-SpringBoot获取配置文件属性的方法">5. SpringBoot获取配置文件属性的方法</h2>
<ul>
<li>假设有一个 application.yml 配置信息如下</li>
</ul>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">com</span><span class="token punctuation">:</span>
  <span class="token key atrule">stringTest</span><span class="token punctuation">:</span> abc
  <span class="token key atrule">listTest</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</code></pre>
<h3 id="5-1-通过-Value-注解将对应的属性注入到field上">5.1 通过 <code>@Value</code> 注解将对应的属性注入到field上</h3>
<ul>
<li>必须将实体类交由SpringBoot自动装配到Spring容器中。使用时依赖注入</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Getter</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueTest</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;com.stringTest&#125;"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> stringTest<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;com.listTest&#125;"</span><span class="token punctuation">)</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> listTest<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>编写测试类</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueTests</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">ValueTest</span> valueTest<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>valueTest<span class="token punctuation">.</span><span class="token function">getStringTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>valueTest<span class="token punctuation">.</span><span class="token function">getListTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>运行结果</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java">abc
<span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span></code></pre>
<h3 id="5-2-通过-ConfigurationProperties-将属性映射给类的属性">5.2 通过 <code>@ConfigurationProperties</code> 将属性映射给类的属性</h3>
<p>@ConfigurationProperties注解只会映射已经被SpringBoot读取的配置文件。</p>
<blockquote>
<p>如果你的 <code>.properties</code> 配置还未被SpringBoot读取，可以使用@PropertySource指定。</p>
<p>如果你的 <code>application-*.yml</code> 配置还未被SpringBoot读取，可以在application.yml里加入以下配置使SpringBoot读取。</p>
</blockquote>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">profiles</span><span class="token punctuation">:</span>
    <span class="token key atrule">active</span><span class="token punctuation">:</span> common<span class="token punctuation">,</span>wx</code></pre>
<ul>
<li>创建PropertySourceTest实体类接收属性映射</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"com"</span><span class="token punctuation">)</span> <span class="token comment">//指定前缀</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"classpath:test.properties"</span><span class="token punctuation">,</span> encoding <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span> <span class="token comment">//额外指定需要读取的文件和读取格式</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertySourceTest</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> stringTest<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getStringTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> stringTest<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStringTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> stringTest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">PropertySourceTest</span><span class="token punctuation">.</span>stringTest <span class="token operator">=</span> stringTest<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>编写测试类</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">PropertySourceTest</span><span class="token punctuation">.</span><span class="token function">getStringTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>运行结果</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java">abc</code></pre>
<div class="note warning"><ul>
<li>使用 <code>@ConfigurationProperties</code> 方式可以进行配置文件与实体字段的自动映射，但需要字段必须提供set方法才可以。</li>
<li>使用 <code>@Value</code> 注解修饰的字段不需要提供set方法。</li>
</ul>
</div>
<h3 id="5-3-利用-Environment-org-springframework-core-env-Environment">5.3 利用 Environment (org.springframework.core.env.Environment)</h3>
<ul>
<li>直接引入Environment即可</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnvironmentTests</span> <span class="token punctuation">&#123;</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">Environment</span> env<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"com.stringTest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>env<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"com.listTest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>运行结果</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java">abc
a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c</code></pre>
<h3 id="5-4-通过工具类">5.4 通过工具类</h3>
<h4 id="5-4-1-yml-属性文件读取">5.4.1 .yml 属性文件读取</h4>
<ul>
<li>利用 <code>org.yaml.snakeyaml</code> 包下的 <code>Yaml</code> 读取配置文件从而获得对应的配置信息。</li>
<li>创建 <code>YamlUtil</code> 工具类。</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YamlUtil</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> ymlMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">YamlUtil</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        ymlMap <span class="token operator">=</span> <span class="token function">getYmlMap</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">YamlUtil</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">YamlUtil</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getYmlMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Yaml</span> yaml <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Yaml</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"开始加载资源：&#123;&#125;"</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">YamlUtil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> yaml<span class="token punctuation">.</span><span class="token function">loadAs</span><span class="token punctuation">(</span>in<span class="token punctuation">,</span> <span class="token class-name">HashMap</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"加载资源：&#123;&#125;失败，发生IOException异常，异常信息为：&#123;&#125;"</span><span class="token punctuation">,</span> location<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">String</span> separator <span class="token operator">=</span> <span class="token string">"."</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>key<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> ymlMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keys <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"\\."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> finalMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> keys<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                finalMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> ymlMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>finalMap <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            finalMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> finalMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>finalMap <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> finalMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>keys<span class="token punctuation">[</span>keys<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>编写测试类</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">YamlUtil</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"application.yml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"com.stringTest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>运行结果</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java">abc</code></pre>
<h4 id="5-4-2-properties-属性文件读取">5.4.2 .properties 属性文件读取</h4>
<ul>
<li>利用 <code>org.springframework.core.io.support</code> 包下的 <code>PropertiesLoaderUtils</code> 读取配置文件从而获得对应的配置信息。</li>
<li>创建 <code>PropertiesUtil</code> 工具类。</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PropertiesUtil</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Properties</span> properties<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">PropertiesUtil</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        properties <span class="token operator">=</span> <span class="token function">getProperties</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">PropertiesUtil</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">PropertiesUtil</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getString</span><span class="token punctuation">(</span><span class="token class-name">String</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> properties<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Properties</span> <span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token class-name">String</span> location<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"加载资源文件：&#123;&#125;"</span><span class="token punctuation">,</span> location<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">PropertiesLoaderUtils</span><span class="token punctuation">.</span><span class="token function">loadProperties</span><span class="token punctuation">(</span>
                    <span class="token keyword">new</span> <span class="token class-name">EncodedResource</span><span class="token punctuation">(</span>
                            <span class="token keyword">new</span> <span class="token class-name">ClassPathResource</span><span class="token punctuation">(</span>location<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"加载资源：&#123;&#125;失败，发生IOException异常，异常信息为：&#123;&#125;"</span><span class="token punctuation">,</span> location<span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>编写测试类</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">YamlUtil</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"application.yml"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"com.stringTest"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>运行结果</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java">abc</code></pre>
<h2 id="6-xml配置文件读取">6. .xml配置文件读取</h2>
<ul>
<li><code>.xml</code> 配置文件常用结合 <code>&lt;bean&gt;</code> 标签，将属性值赋给实体类使用。</li>
<li>修改 <code>application.yml</code> 允许bean覆盖。</li>
</ul>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">main</span><span class="token punctuation">:</span>
    <span class="token key atrule">allow-bean-definition-overriding</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment">#允许bean覆盖</span></code></pre>
<ul>
<li>创建 bean.xml。</li>
</ul>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>
       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>xmlTest<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>com.liang.stu.properties.core.XmlTest<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stringTest<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>listTest<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a,b,c<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mapTest<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>b<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre>
<ul>
<li>创建 XmlTest实体类</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlTest</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> stringTest<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> listTest<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> mapTest<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getStringTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> stringTest<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStringTest</span><span class="token punctuation">(</span><span class="token class-name">String</span> stringTest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">XmlTest</span><span class="token punctuation">.</span>stringTest <span class="token operator">=</span> stringTest<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getListTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> listTest<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setListTest</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> listTest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">XmlTest</span><span class="token punctuation">.</span>listTest <span class="token operator">=</span> listTest<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">getMapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> mapTest<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMapTest</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> mapTest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">XmlTest</span><span class="token punctuation">.</span>mapTest <span class="token operator">=</span> mapTest<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>编写测试类</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XmlTests</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">XmlTest</span><span class="token punctuation">.</span><span class="token function">getStringTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">XmlTest</span><span class="token punctuation">.</span><span class="token function">getListTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">XmlTest</span><span class="token punctuation">.</span><span class="token function">getMapTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<ul>
<li>运行结果</li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java">abc
<span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span>
<span class="token punctuation">&#123;</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">&#125;</span></code></pre>
<h2 id="7-参考链接">7. 参考链接</h2>
<ol>
<li><a href="https://zhuanlan.zhihu.com/p/57693064" title="点我查看原文">最全面的SpringBoot配置文件详解</a></li>
<li><a href="https://www.cnblogs.com/zad27/p/10483484.html" title="点我查看原文">Springboot获取配置文件属性的方法</a></li>
<li><a href="https://blog.csdn.net/cen50958/article/details/112449263/" title="点我查看原文">SpringBoot基础-XML方式注册bean</a></li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot注解速查</title>
    <url>//blog/201119.html</url>
    <content><![CDATA[<h2 id="1-SpringBootApplication">1. @SpringBootApplication</h2>
<p>SpringBoot的启动注解：包含了<code>@ComponentScan</code>、<code>@Configuration</code>和<code>@EnableAutoConfiguration</code>注解。</p>
<h2 id="2-ComponentScan">2. @ComponentScan</h2>
<p>用于类或接口上，spring会把指定路径下带有指定注解的类自动装配到bean容器里。常见的注解有：<code>@Controller</code>、<code>@Service</code>、<code>@Component</code>、<code>@Repository</code></p>
<span id="more"></span>
<table>
<thead>
<tr>
<th style="text-align:left">常用属性</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>basePackages、value</strong></td>
<td style="text-align:left">指定扫描路径，如果为空则以@ComponentScan注解的类所在的包为基本的扫描路径</td>
</tr>
<tr>
<td style="text-align:left"><strong>basePackageClasses</strong></td>
<td style="text-align:left">指定具体扫描的类</td>
</tr>
<tr>
<td style="text-align:left"><strong>includeFilters</strong></td>
<td style="text-align:left">指定满足Filter条件的类</td>
</tr>
<tr>
<td style="text-align:left"><strong>excludeFilters</strong></td>
<td style="text-align:left">指定排除Filter条件的类</td>
</tr>
</tbody>
</table>
<h2 id="3-Configuration">3. @Configuration</h2>
<p>作用：用于定义配置类，替代spring的applicationContext.xml文件，完成spring容器的初始化。</p>
<h2 id="4-EnableAutoConfiguration">4. @EnableAutoConfiguration</h2>
<p>开启自动配置：尝试根据你添加的jar依赖自动配置你的Spring应用。<br>
例如，如果你的classpath下存在HSQLDB，并且你没有手动配置任何数据库连接beans，那么我们将自动配置一个内存型（in-memory）数据库”。<br>
你可以将@EnableAutoConfiguration或者@SpringBootApplication注解添加到一个@Configuration类上来选择自动配置。<br>
如果发现应用了你不想要的特定自动配置类，你可以使用@EnableAutoConfiguration注解的排除属性exclude来禁用它们。</p>
<h2 id="5-Component、-Repository、-Service">5. @Component、@Repository、@Service</h2>
<p>组件注解，被这些注解修饰的类就会被Spring扫描到并注入到Spring的bean容器中。</p>
<table>
<thead>
<tr>
<th style="text-align:left">注解</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>@Component</strong></td>
<td style="text-align:left">泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。</td>
</tr>
<tr>
<td style="text-align:left"><strong>@Repository</strong></td>
<td style="text-align:left">注解在持久层中，具有将数据库操作抛出的原生异常翻译转化为spring的持久层异常的功能，这个注解修饰的DAO或者repositories类会被ComponetScan发现并配置，同时也不需要为它们提供XML配置项。</td>
</tr>
<tr>
<td style="text-align:left"><strong>@Service</strong></td>
<td style="text-align:left">一般用于修饰service层的组件，只是标注该类处于业务逻辑层。</td>
</tr>
</tbody>
</table>
<h2 id="6-Resource、-AutoWired、-Qualifier、-Inject">6. @Resource、@AutoWired、@Qualifier、@Inject</h2>
<p>注入注解。</p>
<table>
<thead>
<tr>
<th style="text-align:left">注解</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>@Resource</strong></td>
<td style="text-align:left"><code>@Resource(name=&quot;name&quot;,type=&quot;type&quot;)</code>如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。</td>
</tr>
<tr>
<td style="text-align:left"><strong>@AutoWired</strong></td>
<td style="text-align:left">自动装配注解：<br/> 1. 可以在成员字段，setter 方法，构造函数中使用<br/>2. 默认通过byType注入，如果有多个实现实例则会抛异常<br/>3. 如果有多个实例，则用@Qulifier注解配合使用(@Qulifier(“bean名称”))<br/>4.如果既没有指定name，又没有指定type，则自动按照byName方式进行装配；如果没有匹配，则回退为一个原始类型进行匹配，如果匹配则自动装配。</td>
</tr>
<tr>
<td style="text-align:left"><strong>@Qualifier</strong></td>
<td style="text-align:left">当IOC容器中有多个接口实例时用于过滤所需的实例<br/>1.和@Autowired配合使用<br/>2.在@Bean修饰方法时注解形参</td>
</tr>
</tbody>
</table>
<div class="note success"><h4 id="Autowired-与-Resource-的区别：">@Autowired 与 @Resource 的区别：</h4>
<ol>
<li><strong>@Autowired</strong> 与 <strong>@Resource</strong> 都可以用来装配bean，都可以写在字段上，或写在setter方法上。</li>
<li><strong>@Autowired</strong> 默认按类型装配（这个注解是属于spring的），默认情况下必须要求依赖对象必须存在，如果要允许null值，可以设置它的required属性为false，如：<code>@Autowired(required=false)</code> ，如果我们想使用名称装配可以结合@Qualifier注解进行使用</li>
</ol>
</div>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Autowired</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"baseDao"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">BaseDao</span> baseDao<span class="token punctuation">;</span></code></pre>
<p>3、@Resource（这个注解属于J2EE的），默认按照名称进行装配，名称可以通过name属性进行指定，如果没有指定name属性，当注解写在字段上时，默认取字段名进行安装名称查找，如果注解写在setter方法上默认取属性名进行装配。当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</p>
<h2 id="7-Controller">7. @Controller</h2>
<p>spring-mvc的注解，用于定义控制器类，具有将请求进行转发，重定向的功能，在spring 项目中由控制器负责将用户发来的URL请求转发到对应的服务接口（service层）</p>
<h2 id="8-ResponseBody">8. @ResponseBody</h2>
<p>表示该方法的返回结果直接写入HTTP Response Body中，一般在异步获取数据时使用，用于构建RESTful的api。<br>
比如异步获取json数据，加上@ResponseBody后，会直接返回json数据。<br>
在使用@RequestMapping后，返回值通常解析为跳转路径，加上@ResponseBody后返回结果不会被解析为跳转路径，而是直接写入HTTP Response Body中。</p>
<h2 id="9-RestController">9. @RestController</h2>
<p>该注解是 <strong>@Controller</strong> 和 <strong>@ResponseBody</strong> 的合集，表示这是个控制器Bean，并且是将函数的返回值直接填入HTTP响应体中，是REST风格的控制器。</p>
<h2 id="10-RequestMapping">10. @RequestMapping</h2>
<p>是一个用来处理请求地址映射的注解，可用于类或方法上。<br>
用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>value</strong></td>
<td style="text-align:left">指定请求的实际地址，指定的地址可以是URI Template 模式</td>
</tr>
<tr>
<td style="text-align:left"><strong>method</strong></td>
<td style="text-align:left">指定请求的method类型， GET、POST、PUT、DELETE等</td>
</tr>
<tr>
<td style="text-align:left"><strong>consumes</strong></td>
<td style="text-align:left">指定处理请求的提交内容类型（Content-Type），如application/json,text/html。</td>
</tr>
<tr>
<td style="text-align:left"><strong>produces</strong></td>
<td style="text-align:left">指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回。</td>
</tr>
<tr>
<td style="text-align:left"><strong>params</strong></td>
<td style="text-align:left">指定request中必须包含某些参数值时，才让该方法处理。</td>
</tr>
<tr>
<td style="text-align:left"><strong>headers</strong></td>
<td style="text-align:left">指定request中必须包含某些指定的header值时，才能让该方法处理请求。</td>
</tr>
</tbody>
</table>
<h2 id="11-RequestParam：">11. @RequestParam：</h2>
<p>接收普通参数，用在方法的参数前面，将请求参数绑定到你控制器的方法参数上。</p>
<table>
<thead>
<tr>
<th style="text-align:left">属性</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>value</strong></td>
<td style="text-align:left">参数名</td>
</tr>
<tr>
<td style="text-align:left"><strong>required</strong></td>
<td style="text-align:left">是否包含该参数，默认为true，表示该请求路径中必须包含该参数，如果不包含就异常。</td>
</tr>
<tr>
<td style="text-align:left"><strong>defaultValue</strong></td>
<td style="text-align:left">默认参数值，如果设置了该值，required=true将失效，自动为false；如果没有传该参数，就使用默认值。</td>
</tr>
</tbody>
</table>
<h2 id="12-PathVariable">12. @PathVariable</h2>
<p>路径变量，接收请求路径中占位符的值，可以将URL中占位符参数{xxx}绑定到处理器类的方法形参中<code>@PathVariable(&quot;xxx&quot;)</code>。</p>
<h2 id="13-RequestBody">13. @RequestBody</h2>
<p>接收来自requestBody的参数，一般用于处理非 Content-Type: application/x-www-form-urlencoded 编码格式的数据，比如：application/json、application/xml 等类型的数据。</p>
<h2 id="14-Import">14. @Import</h2>
<p>用来导入其他配置类。</p>
<h2 id="15-ImportResource">15. @ImportResource</h2>
<p>用来加载xml配置文件。</p>
<h2 id="16-Value">16. @Value</h2>
<p>注入Spring boot application.properties配置的属性的值。</p>
<h2 id="17-Bean">17. @Bean</h2>
<p>产生一个bean，并交给spring管理；相当于XML中的<bean></bean>；放在方法的上面，而不是类。</p>
<h2 id="18-ControllerAdvice">18. @ControllerAdvice</h2>
<p>统一处理异常。</p>
<h2 id="19-ExceptionHandler-Exception-class">19. @ExceptionHandler(Exception.class)</h2>
<p>用在方法上面表示遇到这个异常就执行以下方法。</p>
<h2 id="20-RepositoryRestResourcepublic">20. @RepositoryRestResourcepublic</h2>
<p>设置rest请求路径。通过匹配路径中的参数完成对数据库的访问。配合spring-boot-starter-data-rest使用。</p>
<h2 id="21-ConfigurationProperties">21. @ConfigurationProperties</h2>
<p>配置属性注解，用于读取springboot的配置文件属性。</p>
<h2 id="22-PropertySource">22. @PropertySource</h2>
<p>加载配置文件注解，用于加载 .properties 配置文件。</p>
<h2 id="23-ImportResource">23. @ImportResource</h2>
<p>加载配置文件注解，用于加载 .xml 配置文件。</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>语法速查</tag>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitmoji</title>
    <url>//blog/210718.html</url>
    <content><![CDATA[<h2 id="Gitmoji-官方-GitHub-地址">Gitmoji 官方 GitHub 地址</h2>
<p>为你的Git日志增加一些趣味性，更加清晰明了。</p>
<p><strong>Gitmoji Github :</strong> <a href="https://github.com/carloscuesta/gitmoji">https://github.com/carloscuesta/gitmoji</a><br>
<strong>Gitmoji 官网 :</strong> <a href="https://gitmoji.dev">https://gitmoji.dev</a></p>
<span id="more"></span>
<h2 id="Gitmoji-常用示例">Gitmoji 常用示例</h2>
<p><span class="emoji" alias="tada" style="" fallback-src="https://github.githubassets.com/images/icons/emoji/unicode/1f389.png?v8">🎉</span></p>
<table>
<thead>
<tr>
<th style="text-align:left">Gitmoji</th>
<th style="text-align:center">代码</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">🎉 (庆祝)</td>
<td style="text-align:center"><code>​:tada​:</code></td>
<td style="text-align:left">初次提交</td>
</tr>
<tr>
<td style="text-align:left">📝 (备忘录)</td>
<td style="text-align:center"><code>​:memo​:</code></td>
<td style="text-align:left">撰写文档</td>
</tr>
<tr>
<td style="text-align:left">✨ (火花)</td>
<td style="text-align:center"><code>​:sparkles​:</code></td>
<td style="text-align:left">引入新功能</td>
</tr>
<tr>
<td style="text-align:left">🎨 (调色板)</td>
<td style="text-align:center"><code>​:art​:</code></td>
<td style="text-align:left">改进代码结构/代码格式</td>
</tr>
<tr>
<td style="text-align:left">🚧 (施工)</td>
<td style="text-align:center"><code>​:construction​:</code></td>
<td style="text-align:left">工作进行中</td>
</tr>
<tr>
<td style="text-align:left">🔥 (火焰)</td>
<td style="text-align:center"><code>​:fire​:</code></td>
<td style="text-align:left">移除代码或文件</td>
</tr>
<tr>
<td style="text-align:left">🐛 (bug)</td>
<td style="text-align:center"><code>​:bug​:</code></td>
<td style="text-align:left">修复 bug</td>
</tr>
<tr>
<td style="text-align:left">🚑 (急救车)</td>
<td style="text-align:center"><code>​:ambulance​:</code></td>
<td style="text-align:left">重要补丁</td>
</tr>
<tr>
<td style="text-align:left">⚡️ (闪电)</td>
<td style="text-align:center"><code>​:zap​:</code></td>
<td style="text-align:left">提升性能</td>
</tr>
<tr>
<td style="text-align:left">🚀 (火箭)</td>
<td style="text-align:center"><code>​:rocket​:</code></td>
<td style="text-align:left">部署功能</td>
</tr>
<tr>
<td style="text-align:left">💄 (口红)</td>
<td style="text-align:center"><code>​:lipstick​:</code></td>
<td style="text-align:left">更新 UI 和样式文件</td>
</tr>
<tr>
<td style="text-align:left">🔀 (合并)</td>
<td style="text-align:center"><code>​:twisted_rightwards_arrows​:</code></td>
<td style="text-align:left">Merge 分支</td>
</tr>
<tr>
<td style="text-align:left">✅ (复选框)</td>
<td style="text-align:center"><code>​:white_check_mark​:</code></td>
<td style="text-align:left">增加测试</td>
</tr>
<tr>
<td style="text-align:left">🔖 (书签)</td>
<td style="text-align:center"><code>​:bookmark​:</code></td>
<td style="text-align:left">发行/版本标签</td>
</tr>
<tr>
<td style="text-align:left">🚨 (警车灯)</td>
<td style="text-align:center"><code>​:rotating_light​:</code></td>
<td style="text-align:left">移除 linter 警告</td>
</tr>
<tr>
<td style="text-align:left">💚 (绿心)</td>
<td style="text-align:center"><code>​:green_heart​:</code></td>
<td style="text-align:left">修复 CI 构建问题</td>
</tr>
<tr>
<td style="text-align:left">⬇️ (下降箭头)</td>
<td style="text-align:center"><code>​:arrow_down​:</code></td>
<td style="text-align:left">降级依赖</td>
</tr>
<tr>
<td style="text-align:left">⬆️ (上升箭头)</td>
<td style="text-align:center"><code>​:arrow_up​:</code></td>
<td style="text-align:left">升级依赖</td>
</tr>
<tr>
<td style="text-align:left">📌 (图钉)</td>
<td style="text-align:center"><code>​:pushpin​:</code></td>
<td style="text-align:left">依赖固定到特定版本</td>
</tr>
<tr>
<td style="text-align:left">👷 (工人)</td>
<td style="text-align:center"><code>​:construction_worker​:</code></td>
<td style="text-align:left">添加 CI 构建系统</td>
</tr>
<tr>
<td style="text-align:left">📈 (上升趋势图)</td>
<td style="text-align:center"><code>​:chart_with_upwards_trend​:</code></td>
<td style="text-align:left">添加分析或跟踪代码</td>
</tr>
<tr>
<td style="text-align:left">♻️ (回收)</td>
<td style="text-align:center"><code>​:recycle​:</code></td>
<td style="text-align:left">重构代码</td>
</tr>
<tr>
<td style="text-align:left">🐳 (鲸鱼)</td>
<td style="text-align:center"><code>​:whale​:</code></td>
<td style="text-align:left">Docker 相关工作</td>
</tr>
<tr>
<td style="text-align:left">🔨 (锤子)</td>
<td style="text-align:center"><code>​:hammer​:</code></td>
<td style="text-align:left">重大重构</td>
</tr>
<tr>
<td style="text-align:left">➕ (加号)</td>
<td style="text-align:center"><code>​:heavy_plus_sign​:</code></td>
<td style="text-align:left">增加一个依赖</td>
</tr>
<tr>
<td style="text-align:left">➖ (减号)</td>
<td style="text-align:center"><code>​:heavy_minus_sign​:</code></td>
<td style="text-align:left">减少一个依赖</td>
</tr>
<tr>
<td style="text-align:left">🔧 (扳手)</td>
<td style="text-align:center"><code>​:wrench​:</code></td>
<td style="text-align:left">修改配置文件</td>
</tr>
<tr>
<td style="text-align:left">🌐 (地球)</td>
<td style="text-align:center"><code>​:globe_with_meridians​:</code></td>
<td style="text-align:left">国际化与本地化</td>
</tr>
<tr>
<td style="text-align:left">✏️ (铅笔)</td>
<td style="text-align:center"><code>​:pencil2​:</code></td>
<td style="text-align:left">修复错别字</td>
</tr>
<tr>
<td style="text-align:left">💩 (粑粑)</td>
<td style="text-align:center"><code>​:poop​:</code></td>
<td style="text-align:left">编写需要改进的错误代码</td>
</tr>
<tr>
<td style="text-align:left">⏪ (后退)</td>
<td style="text-align:center"><code>​:rewind​:</code></td>
<td style="text-align:left">还原更改</td>
</tr>
<tr>
<td style="text-align:left">📦 (包裹)</td>
<td style="text-align:center"><code>​:package​:</code></td>
<td style="text-align:left">更新编译文件或Package</td>
</tr>
<tr>
<td style="text-align:left">👽 (外星人)</td>
<td style="text-align:center"><code>​:alien​:</code></td>
<td style="text-align:left">由于外部API的更改而更新了代码</td>
</tr>
<tr>
<td style="text-align:left">🚚 (卡车)</td>
<td style="text-align:center"><code>​:truck​:</code></td>
<td style="text-align:left">移动或重命名文件</td>
</tr>
<tr>
<td style="text-align:left">📄 (文件)</td>
<td style="text-align:center"><code>​:page_facing_up​:</code></td>
<td style="text-align:left">添加或更新 Licence</td>
</tr>
<tr>
<td style="text-align:left">💥 (隆隆声)</td>
<td style="text-align:center"><code>​:boom​:</code></td>
<td style="text-align:left">引入重大变化</td>
</tr>
<tr>
<td style="text-align:left">🍱 (便当)</td>
<td style="text-align:center"><code>​:bento​:</code></td>
<td style="text-align:left">添加或更新 Assets</td>
</tr>
<tr>
<td style="text-align:left">👌(OK)</td>
<td style="text-align:center"><code>​:ok_hand​:</code></td>
<td style="text-align:left">由于代码评审更改而更新代码</td>
</tr>
<tr>
<td style="text-align:left">♿️ (轮椅)</td>
<td style="text-align:center"><code>​:wheelchair​:</code></td>
<td style="text-align:left">提高可访问性</td>
</tr>
<tr>
<td style="text-align:left">💡 (电灯泡)</td>
<td style="text-align:center"><code>​:bulb​:</code></td>
<td style="text-align:left">记录源代码</td>
</tr>
<tr>
<td style="text-align:left">🍻 (啤酒)</td>
<td style="text-align:center"><code>​:beers​:</code></td>
<td style="text-align:left">醉醺醺地编写代码</td>
</tr>
<tr>
<td style="text-align:left">💬 (发言)</td>
<td style="text-align:center"><code>​:speech_balloon​:</code></td>
<td style="text-align:left">更新文本和文字</td>
</tr>
<tr>
<td style="text-align:left">🗃 (文件盒)</td>
<td style="text-align:center"><code>​:card_file_box​:</code></td>
<td style="text-align:left">执行与数据库相关的更改</td>
</tr>
<tr>
<td style="text-align:left">🔊 (巨大声响)</td>
<td style="text-align:center"><code>​:loud_sound​:</code></td>
<td style="text-align:left">添加日志</td>
</tr>
<tr>
<td style="text-align:left">🔇 (静音)</td>
<td style="text-align:center"><code>​:mute​:</code></td>
<td style="text-align:left">移除日志</td>
</tr>
<tr>
<td style="text-align:left">👥 (轮廓半身像)</td>
<td style="text-align:center"><code>​:busts_in_silhouette​:</code></td>
<td style="text-align:left">添加贡献者</td>
</tr>
<tr>
<td style="text-align:left">🚸 (儿童通过)</td>
<td style="text-align:center"><code>​:children_crossing​:</code></td>
<td style="text-align:left">提高用户体验/可用性</td>
</tr>
<tr>
<td style="text-align:left">🏗 (房屋)</td>
<td style="text-align:center"><code>​:building_construction​:</code></td>
<td style="text-align:left">使建筑变化</td>
</tr>
<tr>
<td style="text-align:left">📱 (苹果手机)</td>
<td style="text-align:center"><code>​:iphone​:</code></td>
<td style="text-align:left">致力于响应式设计</td>
</tr>
<tr>
<td style="text-align:left">🤡 (小丑)</td>
<td style="text-align:center"><code>​:clown_face​:</code></td>
<td style="text-align:left">Mock 相关</td>
</tr>
<tr>
<td style="text-align:left">🥚 (彩蛋)</td>
<td style="text-align:center"><code>​:egg​:</code></td>
<td style="text-align:left">加入一个复活节彩蛋</td>
</tr>
<tr>
<td style="text-align:left">🙈 (非礼勿视)</td>
<td style="text-align:center"><code>​:see_no_evil​:</code></td>
<td style="text-align:left">添加或更新 .gitignore 文件</td>
</tr>
<tr>
<td style="text-align:left">📸 (相机)</td>
<td style="text-align:center"><code>​:camera_flash​:</code></td>
<td style="text-align:left">添加或更新快照</td>
</tr>
<tr>
<td style="text-align:left">⚗️ (蒸馏器)</td>
<td style="text-align:center"><code>​:alembic​:</code></td>
<td style="text-align:left">尝试新事物</td>
</tr>
<tr>
<td style="text-align:left">🔍 (放大镜)</td>
<td style="text-align:center"><code>​:mag​:</code></td>
<td style="text-align:left">SEO 提升</td>
</tr>
<tr>
<td style="text-align:left">☸️ (达摩车轮)</td>
<td style="text-align:center"><code>​:wheel_of_dharma​:</code></td>
<td style="text-align:left">Kubernetes 相关工作</td>
</tr>
<tr>
<td style="text-align:left">🏷 (标签)</td>
<td style="text-align:center"><code>​:label​:</code></td>
<td style="text-align:left">添加或更新 types (Flow, TypeScript)</td>
</tr>
<tr>
<td style="text-align:left">🌱 (种子)</td>
<td style="text-align:center"><code>​:seedling​:</code></td>
<td style="text-align:left">添加或更新种子文件</td>
</tr>
<tr>
<td style="text-align:left">🚩 (旗帜)</td>
<td style="text-align:center"><code>​:triangular_flag_on_post​:</code></td>
<td style="text-align:left">添加、更新或删除功能标志</td>
</tr>
<tr>
<td style="text-align:left">💫 (头昏眼花)</td>
<td style="text-align:center"><code>​:dizzy​:</code></td>
<td style="text-align:left">添加或更新动画和转换</td>
</tr>
<tr>
<td style="text-align:left">🔒 (锁)</td>
<td style="text-align:center"><code>​:lock​:</code></td>
<td style="text-align:left">修复安全问题</td>
</tr>
<tr>
<td style="text-align:left">🍎 (苹果)</td>
<td style="text-align:center"><code>​:apple​:</code></td>
<td style="text-align:left">修复 macOS 下的问题</td>
</tr>
<tr>
<td style="text-align:left">🐧 (企鹅)</td>
<td style="text-align:center"><code>​:penguin​:</code></td>
<td style="text-align:left">修复 Linux 下的问题</td>
</tr>
<tr>
<td style="text-align:left">🏁 (旗帜)</td>
<td style="text-align:center"><code>​:checkered_flag​:</code></td>
<td style="text-align:left">修复 Windows 下的问题</td>
</tr>
<tr>
<td style="text-align:left">🤖 (机器人)</td>
<td style="text-align:center"><code>​:robot​:</code></td>
<td style="text-align:left">修复 Android 下的问题</td>
</tr>
<tr>
<td style="text-align:left">🍏 (苹果)</td>
<td style="text-align:center"><code>​:green_apple​:</code></td>
<td style="text-align:left">修复 IOS下的问题</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>GitHub</tag>
        <tag>Gitmoji</tag>
        <tag>技术文档</tag>
      </tags>
  </entry>
  <entry>
    <title>TeamSpeak3 服务器搭建</title>
    <url>//blog/210224.html</url>
    <content><![CDATA[<h2 id="1-服务器搭建">1. 服务器搭建</h2>
<ul>
<li>
<p>首先去 <a href="https://www.teamspeak.com/en/downloads/">官网</a>下载TeamSpeak3服务器端的安装包，或者去 <a href="https://pan.aliang.link/s/erCL?path=%2FTeamSpeak3">我的云盘</a>下载。</p>
</li>
<li>
<p>登录自己的服务器，切换至root用户。</p>
</li>
</ul>
<span id="more"></span>
<ul>
<li><strong>创建一个用户ts并设置ts的密码；用于运行teamspeak（teamspeak不建议root用户直接运行）。</strong></li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash">adduser ts <span class="token operator">&amp;&amp;</span> <span class="token function">passwd</span> ts</code></pre>
<ul>
<li><strong>进入到ts3用户目录下</strong></li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/ts</code></pre>
<ul>
<li>
<p><strong>将下载好的TeamSpeak3服务器端安装包上传至/home/ts3下（可以使用xshell工具）</strong></p>
</li>
<li>
<p><strong>将安装包解压，并重命名为ts3</strong></p>
</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-jxvf</span> teamspeak3-server_linux_amd64-3.13.6.tar.bz2 <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> teamspeak3-server_linux_amd64 ts3</code></pre>
<ul>
<li><strong>将所有权设置为 ts 用户</strong></li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chown</span> <span class="token parameter variable">-R</span> ts:ts /home/ts/ts3</code></pre>
<ul>
<li><strong>切换为ts3用户</strong></li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> ts</code></pre>
<ul>
<li><strong>移动到/home/ts/ts3目录</strong></li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/ts/ts3</code></pre>
<ul>
<li><strong>同意 TeamSpeak 许可条款</strong></li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">touch</span> .ts3server_license_accepted</code></pre>
<ul>
<li><strong>自动配置数据库并启动 TeamSpeak 服务器，会生成管理员信息</strong></li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash">./ts3server_startscript.sh start</code></pre>
<ul>
<li><strong>务必记住 loginname、password、token 的内容，其中Token是激活服务器管理员的重要凭证！</strong></li>
</ul>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
                      <span class="token class-name">I</span> <span class="token class-name">M</span> <span class="token class-name">P</span> <span class="token class-name">O</span> <span class="token class-name">R</span> <span class="token class-name">T</span> <span class="token class-name">A</span> <span class="token class-name">N</span> <span class="token class-name">T</span>                           
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
               <span class="token class-name">Server</span> <span class="token class-name">Query</span> <span class="token class-name">Admin</span> <span class="token class-name">Account</span> created                 
         loginname<span class="token operator">=</span> <span class="token string">"serveradmin"</span><span class="token punctuation">,</span> password<span class="token operator">=</span> <span class="token string">"8J1oOnab"</span>
         apikey<span class="token operator">=</span> <span class="token string">"BABRethu80KXpGXnF-w_ekIpgId3neLIRCl956j"</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>


<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
                      <span class="token class-name">I</span> <span class="token class-name">M</span> <span class="token class-name">P</span> <span class="token class-name">O</span> <span class="token class-name">R</span> <span class="token class-name">T</span> <span class="token class-name">A</span> <span class="token class-name">N</span> <span class="token class-name">T</span>                           
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>
      <span class="token class-name">ServerAdmin</span> privilege key created<span class="token punctuation">,</span> please use it <span class="token keyword">to</span> <span class="token namespace">gain</span> 
      serveradmin rights <span class="token keyword">for</span> your virtualserver<span class="token punctuation">.</span> please
      also check the doc<span class="token operator">/</span>privilegekey_guide<span class="token punctuation">.</span>txt <span class="token keyword">for</span> details<span class="token punctuation">.</span>

       token<span class="token operator">=</span><span class="token class-name">EPpGgKHuoynJ4Zj95dwwPy1m7ue9oNQ9T1jxyjol</span>
<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span></code></pre>
<h2 id="2-开放端口">2. 开放端口</h2>
<p><strong>为了保证TeamSpeak服务的正常使用，必须打开下面这些端口</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">端口</th>
<th style="text-align:left">类型</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>9987</strong></td>
<td style="text-align:left">tcp/udp</td>
<td style="text-align:left">用于语音</td>
</tr>
<tr>
<td style="text-align:center"><strong>30033</strong></td>
<td style="text-align:left">tcp</td>
<td style="text-align:left">用于文件传输</td>
</tr>
<tr>
<td style="text-align:center"><strong>10011</strong></td>
<td style="text-align:left">tcp</td>
<td style="text-align:left">用于服务器查询</td>
</tr>
<tr>
<td style="text-align:center"><strong>41144</strong></td>
<td style="text-align:left">tcp</td>
<td style="text-align:left">用于TSDNS</td>
</tr>
</tbody>
</table>
<h2 id="3-进程守护">3. 进程守护</h2>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 编辑配置文件</span>
<span class="token function">vi</span> /lib/systemd/system/ts3.service</code></pre>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>
<span class="token assign-left variable">Description</span><span class="token operator">=</span>TeamSpeak <span class="token number">3</span> Server
<span class="token assign-left variable">After</span><span class="token operator">=</span>network.target

<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>
<span class="token assign-left variable">WorkingDirectory</span><span class="token operator">=</span>/data/ts/ts3
<span class="token assign-left variable">Type</span><span class="token operator">=</span>forking
<span class="token assign-left variable">ExecStart</span><span class="token operator">=</span>/data/ts/ts3/ts3server_startscript.sh start <span class="token assign-left variable">inifile</span><span class="token operator">=</span>ts3server.ini
<span class="token assign-left variable">ExecStop</span><span class="token operator">=</span>/data/ts/ts3/ts3server_startscript.sh stop
<span class="token assign-left variable">PIDFile</span><span class="token operator">=</span>/data/ts/ts3/ts3server.pid
<span class="token assign-left variable">RestartSec</span><span class="token operator">=</span><span class="token number">15</span>
<span class="token assign-left variable">Restart</span><span class="token operator">=</span>always

<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>
<span class="token assign-left variable">WantedBy</span><span class="token operator">=</span>multi-user.target</code></pre>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新配置</span>
systemctl daemon-reload

<span class="token comment"># 启动服务</span>
systemctl start ts3

<span class="token comment"># 设置开机启动</span>
systemctl <span class="token builtin class-name">enable</span> ts3</code></pre>
<h2 id="4-管理命令">4. 管理命令</h2>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动服务</span>
systemctl start ts3

<span class="token comment"># 停止服务</span>
systemctl stop ts3

<span class="token comment"># 重启服务</span>
systemctl restart ts3

<span class="token comment"># 查看状态</span>
systemctl status ts3</code></pre>
<h2 id="5-连接使用">5. 连接使用</h2>
<p><strong>windows下下载客户端并打开，输入ip就可以使用了。首次使用没有服务器密码；使用上面的token可以使账号拥有最高权限（token只能用一次）。</strong></p>
<h2 id="6-域名连接">6. 域名连接</h2>
<p><strong>如果你拥有一个域名，并且不想使用ip连接TS，只需要在域名解析那里解析到当前TS的ip即可。</strong></p>
<h2 id="7-增加图标">7. 增加图标</h2>
<ul>
<li>首先去<a href="https://tsicons.com/collections?p=5">tsicons</a>网站下载喜欢的图标包</li>
<li>在TS里选择频道设置，上传图标即可使用。</li>
</ul>
]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>技术文档</tag>
        <tag>TeamSpeak3</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux常用命令速查</title>
    <url>//blog/210314.html</url>
    <content><![CDATA[<h2 id="1-常用">1. 常用</h2>
<p>推荐：<a href="https://linux.aliang.link/">https://linux.aliang.link</a></p>
<table>
<thead>
<tr>
<th style="text-align:center"><div style="width:250px">命令</div></th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong><code>less fileName</code></strong></td>
<td style="text-align:left">查看一个长文件的内容，</td>
</tr>
<tr>
<td style="text-align:center"><strong><code>tail -f fileName</code></strong></td>
<td style="text-align:left">实时查看被添加到一个文件中的内容</td>
</tr>
<tr>
<td style="text-align:center"><strong><code>tail -f fileName | grep -10 'k1'</code></strong></td>
<td style="text-align:left">实时查看被添加到一个文件中的且包含“k1”的内容，并打印前后10行</td>
</tr>
<tr>
<td style="text-align:center"><strong>rm -rf [fileName][dirName]</strong></td>
<td style="text-align:left">删除指定的文件或文件夹</td>
</tr>
<tr>
<td style="text-align:center"><strong>mv dir1 dir2</strong></td>
<td style="text-align:left">重命名/移动 一个目录或文件（dir2存在为移动，不存在为重命名）</td>
</tr>
<tr>
<td style="text-align:center"><strong><code>ps -ef | grep 'java'</code></strong></td>
<td style="text-align:left">查看与java相关的进程</td>
</tr>
<tr>
<td style="text-align:center"><strong>kill -9 pid</strong></td>
<td style="text-align:left">强制杀死进程</td>
</tr>
<tr>
<td style="text-align:center"><strong>netstat -nltp</strong></td>
<td style="text-align:left">查询正在使用的端口</td>
</tr>
<tr>
<td style="text-align:center"><strong><code>grep -10 'k1' /data/a.log</code></strong></td>
<td style="text-align:left">在/data/a.log里搜索关键词&quot;k1&quot;所在行，并打印匹配行的前后10行</td>
</tr>
<tr>
<td style="text-align:center"><strong>find /data -name file1</strong></td>
<td style="text-align:left">搜索/data文件夹下的file1</td>
</tr>
<tr>
<td style="text-align:center"><strong>find /data -name \*.txt</strong></td>
<td style="text-align:left">搜索/data文件夹下的带有’.txt’结尾的文件</td>
</tr>
<tr>
<td style="text-align:center"><strong>date</strong></td>
<td style="text-align:left">显示系统日期</td>
</tr>
<tr>
<td style="text-align:center"><strong>vim /etc/hosts</strong></td>
<td style="text-align:left">编辑 hosts 文件 格式：<strong>127.0.0.1 <a href="http://www.test.com">www.test.com</a></strong></td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h2 id="2-压缩、解压文件">2. 压缩、解压文件</h2>
<table>
<thead>
<tr>
<th style="text-align:center">格式</th>
<th style="text-align:left">说明</th>
<th style="text-align:left">压缩命令</th>
<th style="text-align:left">解压命令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>*.zip</strong></td>
<td style="text-align:left">zip 程序打包压缩的文件</td>
<td style="text-align:left"><strong>zip</strong> fileName.zip dirName</td>
<td style="text-align:left"><strong>unzip</strong> fileName.zip [dirName]</td>
</tr>
<tr>
<td style="text-align:center"><strong>*.rar</strong></td>
<td style="text-align:left">rar 程序压缩的文件</td>
<td style="text-align:left"><strong>rar a</strong> fileName.rar dirName</td>
<td style="text-align:left"><strong>rar x</strong> fileName.rar</td>
</tr>
<tr>
<td style="text-align:center"><strong>*.7z</strong></td>
<td style="text-align:left">7zip 程序压缩的文件</td>
<td style="text-align:left"><strong>7z a</strong> fileName.7z dirName</td>
<td style="text-align:left"><strong>7z x</strong> fileName.7z</td>
</tr>
<tr>
<td style="text-align:center"><strong>*.tar</strong></td>
<td style="text-align:left">tar 程序打包，未压缩的文件</td>
<td style="text-align:left"><strong>tar cvf</strong> fileName.tar dirName</td>
<td style="text-align:left"><strong>tar xvf</strong> fileName.tar</td>
</tr>
<tr>
<td style="text-align:center"><strong>*.gz</strong></td>
<td style="text-align:left">gzip 程序 (GNU zip) 压缩的文件</td>
<td style="text-align:left"><strong>gzip</strong> fileName</td>
<td style="text-align:left"><strong>gzip -d</strong> fileName.gz</td>
</tr>
<tr>
<td style="text-align:center"><strong>*.bz2</strong></td>
<td style="text-align:left">tar 打包，gzip 程序压缩的文件</td>
<td style="text-align:left"><strong>bzip2 -z</strong> fileName</td>
<td style="text-align:left"><strong>bzip2 -d</strong> fileName.bz2</td>
</tr>
<tr>
<td style="text-align:center"><strong>*.tar.gz</strong></td>
<td style="text-align:left">tar打包，gzip程序压缩的文件</td>
<td style="text-align:left"><strong>tar zcvf</strong> fileName.tar.gz dirName</td>
<td style="text-align:left"><strong>tar zxvf</strong> fileName.tar.gz</td>
</tr>
<tr>
<td style="text-align:center"><strong>*.tar.xz</strong></td>
<td style="text-align:left">tar打包，xz程序压缩的文件</td>
<td style="text-align:left"><strong>tar cvJf</strong> fileName.tar.xz dirName</td>
<td style="text-align:left"><strong>tar -xvJf</strong> fileName.tar.xz</td>
</tr>
<tr>
<td style="text-align:center"><strong>*.tar.bz2</strong></td>
<td style="text-align:left">tar打包，bzip2程序压缩的文件</td>
<td style="text-align:left"><strong>tar jcvf</strong> fileName.tar.bz2 dirName</td>
<td style="text-align:left"><strong>tar jxvf</strong> fileName.tar.bz2</td>
</tr>
<tr>
<td style="text-align:center"><strong>*.Z</strong></td>
<td style="text-align:left">compress命令解压缩rar文件</td>
<td style="text-align:left"><strong>compress</strong> fileName</td>
<td style="text-align:left"><strong>uncompress</strong> fileName.Z</td>
</tr>
</tbody>
</table>
<h2 id="3-文件和目录">3. 文件和目录</h2>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>cd /home</strong></td>
<td style="text-align:left">进入 ‘/ home’ 目录</td>
</tr>
<tr>
<td style="text-align:left"><strong>cd ..</strong></td>
<td style="text-align:left">返回上一级目录</td>
</tr>
<tr>
<td style="text-align:left"><strong>cd ../..</strong></td>
<td style="text-align:left">返回上两级目录</td>
</tr>
<tr>
<td style="text-align:left"><strong>cd</strong></td>
<td style="text-align:left">进入个人的主目录</td>
</tr>
<tr>
<td style="text-align:left"><strong>cd -</strong></td>
<td style="text-align:left">返回上次所在的目录</td>
</tr>
<tr>
<td style="text-align:left"><strong>pwd</strong></td>
<td style="text-align:left">显示工作路径</td>
</tr>
<tr>
<td style="text-align:left"><strong>ls</strong></td>
<td style="text-align:left">查看目录中的文件</td>
</tr>
<tr>
<td style="text-align:left"><strong>ls -F</strong></td>
<td style="text-align:left">查看目录中的文件（按照类型归类）</td>
</tr>
<tr>
<td style="text-align:left"><strong>ls -l</strong></td>
<td style="text-align:left">显示文件和目录的详细资料</td>
</tr>
<tr>
<td style="text-align:left"><strong>ls -a</strong></td>
<td style="text-align:left">显示隐藏文件</td>
</tr>
<tr>
<td style="text-align:left"><strong>mkdir dir1</strong></td>
<td style="text-align:left">创建一个叫做 ‘dir1’ 的目录</td>
</tr>
<tr>
<td style="text-align:left"><strong>mkdir dir1 dir2</strong></td>
<td style="text-align:left">同时创建两个目录</td>
</tr>
<tr>
<td style="text-align:left"><strong>mkdir -p /dir1/dir2</strong></td>
<td style="text-align:left">创建一个目录树</td>
</tr>
<tr>
<td style="text-align:left"><strong>rmdir dir1</strong></td>
<td style="text-align:left">删除一个叫做 ‘dir1’ 的目录</td>
</tr>
<tr>
<td style="text-align:left"><strong>touch file1.txt</strong></td>
<td style="text-align:left">创建一个空白文件</td>
</tr>
<tr>
<td style="text-align:left"><strong>cp file1 file2</strong></td>
<td style="text-align:left">复制file1为file2</td>
</tr>
<tr>
<td style="text-align:left"><strong>cp dir/* .</strong></td>
<td style="text-align:left">复制一个目录到当前工作目录</td>
</tr>
<tr>
<td style="text-align:left"><strong>cp -a dir1 dir2</strong></td>
<td style="text-align:left">复制dir1目录到dir2</td>
</tr>
</tbody>
</table>
<h2 id="4-查看文件内容">4. 查看文件内容</h2>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>more file1</strong></td>
<td style="text-align:left">查看一个长文件的内容</td>
</tr>
<tr>
<td style="text-align:left"><strong>cat file1</strong></td>
<td style="text-align:left">从第一个字节开始正向查看文件的内容（就是从上到下，自动翻页查看）</td>
</tr>
<tr>
<td style="text-align:left"><strong>tac file1</strong></td>
<td style="text-align:left">从下到上，和cat相反</td>
</tr>
<tr>
<td style="text-align:left"><strong>head -2 file1</strong></td>
<td style="text-align:left">查看一个文件的前2行</td>
</tr>
<tr>
<td style="text-align:left"><strong>tail -2 file1</strong></td>
<td style="text-align:left">查看一个文件的最后2行</td>
</tr>
</tbody>
</table>
<h2 id="5-文本处理">5. 文本处理</h2>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>grep k1 /data/a.log</strong></td>
<td style="text-align:left">在文件 “/data/a.log” 中搜索关键词&quot;k1&quot;</td>
</tr>
<tr>
<td style="text-align:left"><strong>grep ^k1 /data/a.log</strong></td>
<td style="text-align:left">在文件 “/data/a.log” 中搜索以&quot;k1&quot;开始的词汇</td>
</tr>
<tr>
<td style="text-align:left"><strong>grep -A 10 k1 /data/a.log</strong></td>
<td style="text-align:left">搜索关键词&quot;k1&quot;所在行，并打印匹配行的后10行</td>
</tr>
<tr>
<td style="text-align:left"><strong>grep -B 10 k1 /data/a.log</strong></td>
<td style="text-align:left">打印前10行</td>
</tr>
<tr>
<td style="text-align:left"><strong>grep -C 10 k1 /data/a.log</strong></td>
<td style="text-align:left">打印前后10行</td>
</tr>
<tr>
<td style="text-align:left"><strong>grep -10 k1 /data/a.log</strong></td>
<td style="text-align:left">打印匹配行的前后10行</td>
</tr>
<tr>
<td style="text-align:left"><strong>grep [0-9] /data/a.log</strong></td>
<td style="text-align:left">选择 “/data/a.log” 文件中所有包含数字的行</td>
</tr>
<tr>
<td style="text-align:left"><strong>grep Aug -R /data</strong></td>
<td style="text-align:left">在目录 “/data”  及随后的目录中搜索字符串&quot;Aug&quot;</td>
</tr>
<tr>
<td style="text-align:left"><strong>sed ‘s/str1/str2/g’ example.txt</strong></td>
<td style="text-align:left">将example.txt文件中的 “str1” 替换成 “str2”</td>
</tr>
<tr>
<td style="text-align:left"><strong>sed ‘/ *#/d; /^$/d’ example.txt</strong></td>
<td style="text-align:left">从example.txt文件中删除所有注释和空白行</td>
</tr>
<tr>
<td style="text-align:left"><strong>comm -1 file1 file2</strong></td>
<td style="text-align:left">比较两个文件的内容只删除 ‘file1’ 所包含的内容</td>
</tr>
<tr>
<td style="text-align:left"><strong>comm -2 file1 file2</strong></td>
<td style="text-align:left">比较两个文件的内容只删除 ‘file2’ 所包含的内容</td>
</tr>
<tr>
<td style="text-align:left"><strong>comm -3 file1 file2</strong></td>
<td style="text-align:left">比较两个文件的内容只删除 两个文件共有的部分</td>
</tr>
</tbody>
</table>
<h2 id="6-用户和群组">6. 用户和群组</h2>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>groupadd group1</strong></td>
<td style="text-align:left">创建一个新用户组group1</td>
</tr>
<tr>
<td style="text-align:left"><strong>groupdel group1</strong></td>
<td style="text-align:left">删除一个新用户组group1</td>
</tr>
<tr>
<td style="text-align:left"><strong>groupmod -n group2 group1</strong></td>
<td style="text-align:left">将用户组group1重命令为group2</td>
</tr>
<tr>
<td style="text-align:left"><strong>useradd -c &quot;Name Surname &quot; -g admin -d /home/user1 -s /bin/bash user1</strong></td>
<td style="text-align:left">创建一个属于 “admin” 用户组的用户</td>
</tr>
<tr>
<td style="text-align:left"><strong>useradd user1</strong></td>
<td style="text-align:left">创建一个新用户</td>
</tr>
<tr>
<td style="text-align:left"><strong>userdel -r user1</strong></td>
<td style="text-align:left">删除一个用户 ( ‘-r’ 排除主目录)</td>
</tr>
<tr>
<td style="text-align:left"><strong>usermod -c “User FTP” -g system -d /ftp/user1 -s /bin/nologin user1</strong></td>
<td style="text-align:left">修改用户属性</td>
</tr>
<tr>
<td style="text-align:left"><strong>passwd user1</strong></td>
<td style="text-align:left">修改一个用户的口令 (只允许root执行)</td>
</tr>
<tr>
<td style="text-align:left"><strong>chage -E 2099-12-31 user1</strong></td>
<td style="text-align:left">设置用户口令的失效期限</td>
</tr>
</tbody>
</table>
<h2 id="7-文件权限">7. 文件权限</h2>
<blockquote>
<p>使用 “+” 设置权限，使用 “-” 取消权限</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>ls -lh</strong></td>
<td style="text-align:left">显示权限</td>
</tr>
<tr>
<td style="text-align:left"><strong><code>chmod ugo+rwx dir1</code></strong></td>
<td style="text-align:left">设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限</td>
</tr>
<tr>
<td style="text-align:left"><strong>chmod go-rwx dir1</strong></td>
<td style="text-align:left">取消目录的群组(g)、其他人(o)的读（r ）、写(w)和执行(x)的权限</td>
</tr>
<tr>
<td style="text-align:left"><strong>chown user1 file1</strong></td>
<td style="text-align:left">改变文件file1的所有人属性为user1</td>
</tr>
<tr>
<td style="text-align:left"><strong><code>chown user1:group1 file1</code></strong></td>
<td style="text-align:left">改变一个文件的所有人和群组属性</td>
</tr>
<tr>
<td style="text-align:left"><strong>chown -R user1 dir1</strong></td>
<td style="text-align:left">改变一个目录的所有人属性并同时改变改目录下所有文件的属性</td>
</tr>
<tr>
<td style="text-align:left"><strong>chgrp group1 file1</strong></td>
<td style="text-align:left">改变文件的群组</td>
</tr>
</tbody>
</table>
<h2 id="8-系统信息、关机">8. 系统信息、关机</h2>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>reboot</strong></td>
<td style="text-align:left">重启</td>
</tr>
<tr>
<td style="text-align:left"><strong>logout</strong></td>
<td style="text-align:left">注销</td>
</tr>
<tr>
<td style="text-align:left"><strong>uname -r</strong></td>
<td style="text-align:left">显示正在使用的内核版本</td>
</tr>
<tr>
<td style="text-align:left"><strong>uname -m</strong></td>
<td style="text-align:left">显示机器的处理器架构</td>
</tr>
<tr>
<td style="text-align:left"><strong>date 041217002007.00</strong></td>
<td style="text-align:left">设置日期和时间 - 月日时分年.秒</td>
</tr>
<tr>
<td style="text-align:left"><strong>clock -w</strong></td>
<td style="text-align:left">将时间修改保存到 BIOS</td>
</tr>
</tbody>
</table>
<h2 id="9-其他（-RPM-YUM-）">9. 其他（ RPM + YUM ）</h2>
<h3 id="9-1-RPM-文件操作命令">9.1 RPM 文件操作命令</h3>
<h4 id="安装">安装</h4>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>rpm -i example.rpm</strong></td>
<td style="text-align:left">安装 example.rpm 包</td>
</tr>
<tr>
<td style="text-align:left"><strong>rpm -iv example.rpm</strong></td>
<td style="text-align:left">安装 example.rpm 包，并在安装过程中显示正在安装的文件信息</td>
</tr>
<tr>
<td style="text-align:left"><strong>rpm -ivh example.rpm</strong></td>
<td style="text-align:left">安装 example.rpm 包，并并在安装过程中显示正在安装的文件信息及安装进度</td>
</tr>
</tbody>
</table>
<h4 id="查询">查询</h4>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>rpm -qa | grep jdk</strong></td>
<td style="text-align:left">查看 jdk 是否被安装</td>
</tr>
<tr>
<td style="text-align:left"><strong>rpm -ql jdk</strong></td>
<td style="text-align:left">查看 jdk 是否被安装</td>
</tr>
</tbody>
</table>
<h4 id="卸载">卸载</h4>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>rpm -e jdk</strong></td>
<td style="text-align:left">卸载 jdk（一般卸载的时候都要先用 rpm -qa 看下整个软件的全名）</td>
</tr>
</tbody>
</table>
<h3 id="9-2-YUM-软件管理">9.2 YUM 软件管理</h3>
<h4 id="依安装-apache-为例">依安装 apache 为例</h4>
<table>
<thead>
<tr>
<th style="text-align:left">命令</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>yum install -y httpd</strong></td>
<td style="text-align:left">安装 apache</td>
</tr>
<tr>
<td style="text-align:left"><strong>yum remove -y httpd</strong></td>
<td style="text-align:left">卸载 apache</td>
</tr>
<tr>
<td style="text-align:left"><strong>yum info -y httpd</strong></td>
<td style="text-align:left">查看 apache 版本信息</td>
</tr>
<tr>
<td style="text-align:left"><strong>yum list -‌-showduplicates httpd</strong></td>
<td style="text-align:left">查看可以安装的版本</td>
</tr>
<tr>
<td style="text-align:left"><strong>yum install httpd-查询到的版本号</strong></td>
<td style="text-align:left">安装指定版本</td>
</tr>
</tbody>
</table>
<h2 id="10-常用">10. 常用</h2>
<h3 id="10-1-linux修改hosts配置，立即生效">10.1 linux修改hosts配置，立即生效</h3>
<ol>
<li>切换至root用户：<strong>sudo root</strong></li>
<li>修改hosts：<strong>vi /etc/hosts</strong></li>
<li>重启网络连接：<strong>service network restart</strong></li>
</ol>
<h2 id="11-参考链接">11. 参考链接</h2>
<ol>
<li><a href="https://man.linuxde.net/" title="点我查看原文">Linux命令大全</a></li>
<li><a href="https://www.cnblogs.com/yjd_hycf_space/p/7730690.html" title="点我查看原文">Linux 常用命令大全（非常全！！！）</a></li>
<li><a href="https://www.cnblogs.com/janlle/p/11010799.html" title="点我查看原文">Linux 常见压缩格式详解</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/markdown-file/Bash-Other-Bash.md" title="点我查看原文">Bash 其他常用命令</a></li>
</ol>
]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>语法速查</tag>
        <tag>技术文档</tag>
        <tag>TeamSpeak3</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>npm常用命令</title>
    <url>//blog/220527.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p>npm是跟随node一起安装的包（模块）管理器。常见的使用场景有以下几种：</p>
<ul>
<li>允许用户从npm服务器下载别人编写的第三方包到本地使用。</li>
<li>允许用户从npm服务器下载并安装别人编写的命令行程序到本地使用。</li>
<li>允许用户将自己编写的包或命令行程序上传到npm服务器供别人使用。</li>
</ul>
<span id="more"></span>
<h2 id="常用命令">常用命令</h2>
<h4 id="检测是否安装及版本">检测是否安装及版本</h4>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token parameter variable">-v</span> <span class="token comment"># 显示版本号说明已经安装相应的版本</span></code></pre>
<h4 id="生成package-json文件">生成package.json文件</h4>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> init</code></pre>
<blockquote>
<p>package.json用来描述项目中用到的模块和其他信息</p>
</blockquote>
<h4 id="安装模块">安装模块</h4>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token comment"># 安装package.json定义好的模块，简写 npm i</span>

<span class="token comment"># 安装包指定模块</span>
<span class="token function">npm</span> i <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span>

<span class="token comment"># 全局安装</span>
<span class="token function">npm</span> i <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> <span class="token parameter variable">-g</span> 

<span class="token comment"># 安装包的同时，将信息写入到package.json中的 dependencies 配置中</span>
<span class="token function">npm</span> i <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> <span class="token parameter variable">--save</span>

<span class="token comment"># 安装包的同时，将信息写入到package.json中的 devDependencies 配置中</span>
<span class="token function">npm</span> i <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> --save-dev

<span class="token comment"># 安装多模块</span>
<span class="token function">npm</span> i <span class="token operator">&lt;</span>ModuleName<span class="token operator"><span class="token file-descriptor important">1</span>></span> <span class="token operator">&lt;</span>ModuleName<span class="token operator"><span class="token file-descriptor important">2</span>></span>

<span class="token comment"># 安装方式参数：</span>
<span class="token parameter variable">-save</span> <span class="token comment"># 简写-S，加入到生产依赖中</span>
-save-dev <span class="token comment"># 简写-D，加入到开发依赖中</span>
<span class="token parameter variable">-g</span> <span class="token comment"># 全局安装 将安装包放在 /usr/local 下或者你 node 的安装目录</span></code></pre>
<h4 id="查看">查看</h4>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看所有全局安装的包</span>
<span class="token function">npm</span> <span class="token function">ls</span> <span class="token parameter variable">-g</span>

<span class="token comment"># 查看本地项目中安装的包</span>
<span class="token function">npm</span> <span class="token function">ls</span>

<span class="token comment"># 查看包的 package.json文件</span>
<span class="token function">npm</span> view <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span>

<span class="token comment"># 查看包的依赖关系</span>
<span class="token function">npm</span> view <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> dependencies

<span class="token comment"># 查看包的源文件地址</span>
<span class="token function">npm</span> view <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> repository.url

<span class="token comment"># 查看包所依赖的node版本</span>
<span class="token function">npm</span> view <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> engines

<span class="token comment"># 查看帮助</span>
<span class="token function">npm</span> <span class="token builtin class-name">help</span></code></pre>
<h4 id="更新模块">更新模块</h4>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更新本地模块</span>
<span class="token function">npm</span> update <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span>

<span class="token comment"># 更新全局模块</span>
<span class="token function">npm</span> update <span class="token parameter variable">-g</span> <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> <span class="token comment"># 更新全局软件包。</span>
<span class="token function">npm</span> update <span class="token parameter variable">-g</span> <span class="token comment"># 更新所有的全局软件包。</span>
<span class="token function">npm</span> outdated <span class="token parameter variable">-g</span> <span class="token parameter variable">--depth</span><span class="token operator">=</span><span class="token number">0</span> <span class="token comment"># 找出需要更新的包。</span></code></pre>
<h4 id="卸载模块">卸载模块</h4>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 卸载本地模块</span>
<span class="token function">npm</span> uninstall <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span>

<span class="token comment"># 卸载全局模块</span>
<span class="token function">npm</span> uninstall <span class="token parameter variable">-g</span> <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span> <span class="token comment"># 卸载全局软件包。</span></code></pre>
<h4 id="清空缓存">清空缓存</h4>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 清空npm缓存</span>
<span class="token function">npm</span> cache <span class="token function">clear</span></code></pre>
<h4 id="使用淘宝镜像">使用淘宝镜像</h4>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 使用淘宝镜像</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm <span class="token parameter variable">--registry</span><span class="token operator">=</span>https://registry.npm.taobao.org</code></pre>
<h4 id="其他">其他</h4>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 更改包内容后进行重建</span>
<span class="token function">npm</span> rebuild <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span>

<span class="token comment"># 检查包是否已经过时，此命令会列出所有已经过时的包，可以及时进行包的更新</span>
<span class="token function">npm</span> outdated

<span class="token comment"># 访问npm的json文件，此命令将会打开一个网页</span>
<span class="token function">npm</span> <span class="token builtin class-name">help</span> json

<span class="token comment"># 发布一个包的时候，需要检验某个包名是否存在</span>
<span class="token function">npm</span> search <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span>

<span class="token comment"># 撤销自己发布过的某个版本代码</span>
<span class="token function">npm</span> unpublish <span class="token operator">&lt;</span>package<span class="token operator">></span> <span class="token operator">&lt;</span>version<span class="token operator">></span></code></pre>
<h2 id="使用技巧">使用技巧</h2>
<h4 id="多次安装不成功尝试先清除缓存">多次安装不成功尝试先清除缓存</h4>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> cache clean <span class="token parameter variable">-f</span></code></pre>
<h4 id="查看已安装的依赖包版本号">查看已安装的依赖包版本号</h4>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">ls</span> <span class="token operator">&lt;</span>ModuleName<span class="token operator">></span></code></pre>
<blockquote>
<p>注意：用此方法才能准确的知道项目使用的版本号，查看package.json时，有“^&quot; 符号表示大于此版本</p>
</blockquote>
<h2 id="npm发布包教程">npm发布包教程</h2>
<p><a href="https://segmentfault.com/a/1190000017461666">npm发布包教程</a></p>
<h2 id="nrm的作用与使用">nrm的作用与使用</h2>
<h4 id="nrm是什么？">nrm是什么？</h4>
<p>nrm(npm registry manager )是npm的镜像源管理工具，有时候国外资源太慢，使用这个就可以快速地在 npm 源间切换</p>
<h4 id="nrm的安装">nrm的安装</h4>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> nrm</code></pre>
<h4 id="nrm命令">nrm命令</h4>
<pre class="language-bash" data-language="bash"><code class="language-bash">nrm <span class="token function">ls</span>　<span class="token comment">#查看可用的源（有*号的表示当前所使用的源,以下&lt;registry>表示源的名称）</span>
nrm use <span class="token operator">&lt;</span>registry<span class="token operator">></span> <span class="token comment"># 将npm下载源切换成指定的源</span>
nrm <span class="token function">add</span> <span class="token operator">&lt;</span>registry<span class="token operator">></span> <span class="token operator">&lt;</span>url<span class="token operator">></span> <span class="token comment"># 添加源，url为源的路径</span>
nrm del <span class="token operator">&lt;</span>registry<span class="token operator">></span> <span class="token comment"># 删除源</span>
nrm <span class="token builtin class-name">test</span> <span class="token operator">&lt;</span>registry<span class="token operator">></span> <span class="token comment"># 测试源的响应时间，可以作为使用哪个源的参考</span>

nrm <span class="token builtin class-name">help</span>　<span class="token comment"># 查看nrm帮助</span>
nrm home <span class="token operator">&lt;</span>registry<span class="token operator">></span>　<span class="token comment"># 跳转到指定源的官网</span></code></pre>
<h4 id="nrm使用">nrm使用</h4>
<p>如果在你的网络不太理想或者受到其他网络限制导致不能使用npm原本的源进行下载时，nrm就非常有用了，你只需要：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">nrm <span class="token function">ls</span> <span class="token comment"># 查看可用的源</span>
nrm use <span class="token operator">&lt;</span>registry<span class="token operator">></span>　<span class="token comment"># 切换到指定源</span></code></pre>
<div class="note danger"><p>本文转自 <a href="https://xugaoyi.com/pages/61f2f95fd7da14fd/">https://xugaoyi.com/pages/61f2f95fd7da14fd/</a>，作者：xugaoyi。 <strong>如有不妥，请联系我删除</strong></p>
</div>
]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>语法速查</tag>
        <tag>技术文档</tag>
        <tag>TeamSpeak3</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub高级搜索技巧</title>
    <url>//blog/220530.html</url>
    <content><![CDATA[<h2 id="GitHub高级搜索技巧">GitHub高级搜索技巧</h2>
<table>
<thead>
<tr>
<th style="text-align:left">语法</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>in:name &lt;关键字&gt;</code></td>
<td style="text-align:left">仓库名称带关键字查询</td>
</tr>
<tr>
<td style="text-align:left"><code>in:description &lt;关键字&gt;</code></td>
<td style="text-align:left">仓库描述带关键字查询</td>
</tr>
<tr>
<td style="text-align:left"><code>in:readme &lt;关键字&gt;</code></td>
<td style="text-align:left">README文件带关键字查询</td>
</tr>
<tr>
<td style="text-align:left"><code>stars(fork): &gt;(=) &lt;数字&gt; &lt;关键字&gt;</code></td>
<td style="text-align:left">star或fork数大于(或等于)指定数字的带关键字查询</td>
</tr>
<tr>
<td style="text-align:left"><code>stars(fork): 10..20 &lt;关键词&gt;</code></td>
<td style="text-align:left">star或fork数在10到20之间的带关键字查询</td>
</tr>
<tr>
<td style="text-align:left"><code>size:&gt;=5000 &lt;关键词&gt;</code></td>
<td style="text-align:left">限定仓库大于等于5000K的带关键字查询</td>
</tr>
<tr>
<td style="text-align:left"><code>pushed(created):&gt;2019-11-15 &lt;关键字&gt;</code></td>
<td style="text-align:left">更新 或 创建 日期在2019年11月16日之后的带关键字查询</td>
</tr>
<tr>
<td style="text-align:left"><code>license:apache-2.0 &lt;关键字&gt;</code></td>
<td style="text-align:left">LICENSE为apache-2.0的带关键字查询</td>
</tr>
<tr>
<td style="text-align:left"><code>language:java &lt;关键词&gt;</code></td>
<td style="text-align:left">仓库语言为Java的带关键字查询</td>
</tr>
<tr>
<td style="text-align:left"><code>user:&lt;用户名&gt;</code></td>
<td style="text-align:left">查询某个用户的项目</td>
</tr>
<tr>
<td style="text-align:left"><code>org:&lt;组织名&gt;</code></td>
<td style="text-align:left">查询某个组织的项目</td>
</tr>
</tbody>
</table>
<span id="more"></span>
<p><strong>以上查询条件可组合使用，空格隔开</strong></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 示例1：搜索仓库名包含javascript，并且stars数大于1000的项目</span>
in:name javascript stars:<span class="token operator">></span><span class="token number">1000</span>

<span class="token comment"># 示例2：搜索描述中包含"小程序"，并且fork大于100，并且最近更新时间在2019-11-15之后的，并且使用开发语言为vue的项目</span>
in:description 小程序 fork:<span class="token operator">></span><span class="token number">100</span> pushed:<span class="token operator">></span><span class="token number">2019</span>-11-15 language:vue</code></pre>
<h2 id="或使用高级搜索页搜索">或使用高级搜索页搜索</h2>
<p><a href="https://github.com/search/advanced">https://github.com/search/advanced</a></p>
<div class="note danger"><p>本文转自 <a href="https://xugaoyi.com/pages/4e8444e2d534d14f/">https://xugaoyi.com/pages/4e8444e2d534d14f/</a>，作者：xugaoyi。 <strong>如有不妥，请联系我删除</strong></p>
</div>]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>语法速查</tag>
        <tag>GitHub</tag>
        <tag>技术文档</tag>
        <tag>TeamSpeak3</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA 2022.3安装激活</title>
    <url>//blog/221126.html</url>
    <content><![CDATA[<blockquote>
<p>本文基于IntelliJ IDEA 2022.3 (Ultimate Edition)，操作系统：win10。</p>
</blockquote>
<h3 id="安装包下载">安装包下载</h3>
<p><a href="https://www.jetbrains.com/idea/download">官网下载</a>.exe安装文件<br>
<img data-src="/assets/img/2022/20221201.png" alt="官网下载"></p>
<span id="more"></span>
<h3 id="下载破解包">下载破解包</h3>
<p>下载安装完成后先不要打开，去<a href="https://jetbra.in/s">热心大佬的网站</a>下载破解包<br>
<img data-src="/assets/img/2022/20221202.png" alt="下载jetbra.zip"></p>
<h3 id="配置文件">配置文件</h3>
<p>下载<code>jetbra.zip</code>完成后解压，放到一个不会删除的目录，执行 <code>jetbra\scripts\install-all-users.vbs</code><br>
<img data-src="/assets/img/2022/20221203.png" alt="执行配置文件"></p>
<h3 id="复制激活码">复制激活码</h3>
<p>选择激活的软件或插件，复制激活码<br>
<img data-src="/assets/img/2022/20221204.png" alt="复制激活码"></p>
<h3 id="激活完成">激活完成</h3>
<p>打开IDEA选择激活码激活，填写激活码，激活完成。（付费插件也能激活）<br>
<img data-src="/assets/img/2022/20221205.png" alt="激活"></p>
]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>技术文档</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA插件推荐</title>
    <url>//blog/221203.html</url>
    <content><![CDATA[<blockquote>
<p>本文基于IntelliJ IDEA 2022.3 (Ultimate Edition)，操作系统：win10。</p>
</blockquote>
<p>IDEA安装之后，安装以下插件提升十倍效率。</p>
<h3 id="MyBatisCodeHelperPro"><a href="https://plugins.jetbrains.com/plugin/14522-mybatiscodehelperpro-marketplace-edition-">MyBatisCodeHelperPro</a></h3>
<p>MyBatisCodeHelperPro是java mybatis框架插件，提供自动补全检查，代码生成，让mybatis简单易用。</p>
<span id="more"></span>
<p><img data-src="https://plugins.jetbrains.com/files/14522/screenshot_13d6e0a9-b6dc-48be-a2ae-4872a5d4700f" alt="MyBatisCodeHelperPro"></p>
<h3 id="GsonFormatPlus"><a href="https://plugins.jetbrains.com/plugin/14949-gsonformatplus">GsonFormatPlus</a></h3>
<p>这是一个可以从 Json String 生成 Json 模型的插件</p>
<p><img data-src="https://plugins.jetbrains.com/files/14949/screenshot_23132.png" alt="GsonFormatPlus"></p>
<h3 id="GenerateAllSetter"><a href="https://plugins.jetbrains.com/plugin/9360-generateallsetter">GenerateAllSetter</a></h3>
<p>一键调用一个对象的所有的set方法的插件。</p>
<p><img data-src="https://plugins.jetbrains.com/files/9360/screenshot_e78fe3c8-3cf1-488c-8c85-9c21f23e91b4" alt="GenerateAllSetter"></p>
<h3 id="CamelCase"><a href="https://plugins.jetbrains.com/plugin/7160-camelcase">CamelCase</a></h3>
<p>一个驼峰命名和下划线命名转换的插件。</p>
<p>WIN：<kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>U</kbd><br>
MAC：<kbd>⇧</kbd> + <kbd>⌥</kbd> + <kbd>U</kbd></p>
<h3 id="Maven-Helper"><a href="https://plugins.jetbrains.com/plugin/7179-maven-helper">Maven Helper</a></h3>
<p>一个分析和排除Maven冲突依赖关系的插件。</p>
<p><img data-src="https://plugins.jetbrains.com/files/7179/screenshot_15119.png" alt="Maven Helper"></p>
<h3 id="Rainbow-Brackets"><a href="https://plugins.jetbrains.com/files/10080/screenshot_bcef9073-9605-4c10-90e9-ca8e0063926f">Rainbow Brackets</a></h3>
<p>彩虹括号，各种鲜明颜色的括号</p>
<p><img data-src="https://plugins.jetbrains.com/files/10080/screenshot_17373.png" alt="Rainbow Brackets"></p>
<h3 id="CodeGlance-Pro"><a href="https://plugins.jetbrains.com/plugin/18824-codeglance-pro">CodeGlance Pro</a></h3>
<p>将类似于 Sublime 中的代码小地图嵌入到编辑器窗格中。</p>
<p><img data-src="https://plugins.jetbrains.com/files/18824/screenshot_c86a0fcb-9858-4471-9318-4c525c4d27c9" alt="CodeGlance Pro"></p>
]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>技术文档</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA高效设置</title>
    <url>//blog/221210.html</url>
    <content><![CDATA[<blockquote>
<p>本文基于IntelliJ IDEA 2022.3 (Ultimate Edition)，操作系统：win10。</p>
</blockquote>
<h3 id="界面字体配置">界面字体配置</h3>
<p><img data-src="/assets/img/2022/20221206.png" alt="界面字体配置"></p>
<span id="more"></span>
<h3 id="代码字体配置">代码字体配置</h3>
<p><img data-src="/assets/img/2022/20221207.png" alt="代码字体配置"></p>
<h3 id="自动导包配置">自动导包配置</h3>
<p><img data-src="/assets/img/2022/20221208.png" alt="自动导包配置"></p>
<h3 id="自动提示忽略大小写敏感">自动提示忽略大小写敏感</h3>
<p><img data-src="/assets/img/2022/20221211.png" alt="自动提示忽略大小写敏感"></p>
<h3 id="版本控制的目录颜色随文件变化">版本控制的目录颜色随文件变化</h3>
<p><img data-src="/assets/img/2022/20221212.png" alt="版本控制的目录颜色随文件变化"></p>
<h3 id="自定义创建Live-Templates代码模板">自定义创建Live Templates代码模板</h3>
<p><img data-src="/assets/img/2022/20221217.png" alt="自定义创建Live Templates代码模板"><br>
Live Templates代码模板</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> $var1$<span class="token punctuation">(</span>$var2$<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    $var3$
<span class="token punctuation">&#125;</span>
$<span class="token constant">END</span>$</code></pre>
<h3 id="创建文件时，自动生成作者信息">创建文件时，自动生成作者信息</h3>
<p><img data-src="/assets/img/2022/20221213.png" alt="创建文件时，自动生成作者信息"><br>
模板示例：</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">/**
 * @Description: $Description
 * @Author: aliang
 * @Date: $&#123;YEAR&#125;-$&#123;MONTH&#125;-$&#123;DAY&#125; $&#123;TIME&#125;
 */</span></code></pre>
<h3 id="显示方法分割线">显示方法分割线</h3>
<p><img data-src="/assets/img/2022/20221214.png" alt="显示方法分割线"></p>
<h3 id="取消tab页单行显示">取消tab页单行显示</h3>
<p><img data-src="/assets/img/2022/20221209.png" alt="取消tab页单行显示"><br>
<img data-src="/assets/img/2022/20221216.png" alt="双行显示"></p>
<h3 id="双斜杠注释改成紧跟代码头">双斜杠注释改成紧跟代码头</h3>
<p><img data-src="/assets/img/2022/20221210.png" alt="双斜杠注释改成紧跟代码头"></p>
<h3 id="配置导入导出">配置导入导出</h3>
<p><img data-src="/assets/img/2022/20221215.png" alt="配置导入导出"></p>
]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>技术文档</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>curl命令速查</title>
    <url>//blog/220205.html</url>
    <content><![CDATA[<h2 id="简介">简介</h2>
<p><strong>curl命令</strong> 是一个利用URL规则在命令行下工作的文件传输工具。它支持文件的上传和下载，所以是综合传输工具，但按传统，习惯称curl为下载工具。作为一款强力工具，curl支持包括HTTP、HTTPS、ftp等众多协议，还支持POST、cookies、认证、从指定偏移处下载部分文件、用户代理字符串、限速、文件大小、进度条等特征。做网页处理流程和数据检索自动化，curl可以助一臂之力。</p>
<span id="more"></span>
<h2 id="语法">语法</h2>
<pre class="language-bash" data-language="bash"><code class="language-bash">curl<span class="token punctuation">(</span>选项<span class="token punctuation">)</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span></code></pre>
<h2 id="选项">选项</h2>
<pre class="language-bash" data-language="bash"><code class="language-bash">-a/--append                                   <span class="token comment"># 上传文件时，附加到目标文件 </span>
-A/--user-agent                               <span class="token comment"># 设置用户代理发送给服务器 </span>
<span class="token parameter variable">-anyauth</span>                                      <span class="token comment"># 可以使用“任何”身份验证方法 </span>
-b/--cookie                                   <span class="token comment"># cookie字符串或文件读取位置 </span>
     <span class="token parameter variable">--basic</span>                                  <span class="token comment"># 使用HTTP基本验证 </span>
-B/--use-ascii                                <span class="token comment"># 使用ASCII /文本传输 </span>
-c/--cookie-jar                               <span class="token comment"># 操作结束后把cookie写入到这个文件中 </span>
-C/--continue-at                              <span class="token comment"># 断点续传 </span>
-d/--data                                     <span class="token comment"># HTTP POST方式传送数据 </span>
     --data-ascii                             <span class="token comment"># 以ascii的方式post数据 </span>
     --data-binary                            <span class="token comment"># 以二进制的方式post数据 </span>
     <span class="token parameter variable">--negotiate</span>                              <span class="token comment"># 使用HTTP身份验证 </span>
     <span class="token parameter variable">--digest</span>                                 <span class="token comment"># 使用数字身份验证 </span>
     --disable-eprt                           <span class="token comment"># 禁止使用EPRT或LPRT </span>
     --disable-epsv                           <span class="token comment"># 禁止使用EPSV </span>
-D/--dump-header                              <span class="token comment"># 把header信息写入到该文件中 </span>
     --egd-file                               <span class="token comment"># 为随机数据(SSL)设置EGD socket路径 </span>
     --tcp-nodelay                            <span class="token comment"># 使用TCP\_NODELAY选项 </span>
-e/--referer                                  <span class="token comment"># 来源网址 </span>
-E/--cert                                     <span class="token comment"># 客户端证书文件和密码 (SSL)</span>
     --cert-type                              <span class="token comment"># 证书文件类型 (DER/PEM/ENG) (SSL)</span>
     <span class="token parameter variable">--key</span>                                    <span class="token comment"># 私钥文件名 (SSL)</span>
     --key-type                               <span class="token comment"># 私钥文件类型 (DER/PEM/ENG) (SSL)</span>
     <span class="token parameter variable">--pass</span>                                   <span class="token comment"># 私钥密码 (SSL)</span>
     <span class="token parameter variable">--engine</span>                                 <span class="token comment"># 加密引擎使用 (SSL). "--engine list" for list </span>
     <span class="token parameter variable">--cacert</span>                                 <span class="token comment"># CA证书 (SSL)</span>
     <span class="token parameter variable">--capath</span>                                 <span class="token comment"># CA目录 (made using c\_rehash) to verify peer against (SSL)</span>
     <span class="token parameter variable">--ciphers</span>                                <span class="token comment"># SSL密码 </span>
     <span class="token parameter variable">--compressed</span>                             <span class="token comment"># 要求返回是压缩的形势 (using deflate or gzip)</span>
     --connect-timeout                        <span class="token comment"># 设置最大请求时间 </span>
     --create-dirs                            <span class="token comment"># 建立本地目录的目录层次结构 </span>
     <span class="token parameter variable">--crlf</span>                                   <span class="token comment"># 上传是把LF转变成CRLF </span>
-f/--fail                                     <span class="token comment"># 连接失败时不显示http错误 </span>
     --ftp-create-dirs                        <span class="token comment"># 如果远程目录不存在，创建远程目录 </span>
     --ftp-method <span class="token punctuation">\</span><span class="token punctuation">[</span>multicwd/nocwd/singlecwd<span class="token punctuation">]</span> <span class="token comment"># 控制CWD的使用 </span>
     --ftp-pasv                               <span class="token comment"># 使用 PASV/EPSV 代替端口 </span>
     --ftp-skip-pasv-ip                       <span class="token comment"># 使用PASV的时候,忽略该IP地址 </span>
     --ftp-ssl                                <span class="token comment"># 尝试用 SSL/TLS 来进行ftp数据传输 </span>
     --ftp-ssl-reqd                           <span class="token comment"># 要求用 SSL/TLS 来进行ftp数据传输 </span>
-F/--form                                     <span class="token comment"># 模拟http表单提交数据 </span>
     --form-string                            <span class="token comment"># 模拟http表单提交数据 </span>
-g/--globoff                                  <span class="token comment"># 禁用网址序列和范围使用&#123;&#125;和\[] </span>
-G/--get                                      <span class="token comment"># 以get的方式来发送数据 </span>
-H/--header                                   <span class="token comment"># 自定义头信息传递给服务器 </span>
     --ignore-content-length                  <span class="token comment"># 忽略的HTTP头信息的长度 </span>
-i/--include                                  <span class="token comment"># 输出时包括protocol头信息 </span>
-I/--head                                     <span class="token comment"># 只显示请求头信息 </span>
-j/--junk-session-cookies                     <span class="token comment"># 读取文件进忽略session cookie </span>
     <span class="token parameter variable">--interface</span>                              <span class="token comment"># 使用指定网络接口/地址 </span>
     <span class="token parameter variable">--krb4</span>                                   <span class="token comment"># 使用指定安全级别的krb4 </span>
-k/--insecure                                 <span class="token comment"># 允许不使用证书到SSL站点 </span>
-K/--config                                   <span class="token comment"># 指定的配置文件读取 </span>
-l/--list-only                                <span class="token comment"># 列出ftp目录下的文件名称 </span>
     --limit-rate                             <span class="token comment"># 设置传输速度 </span>
     --local-port                             <span class="token comment"># 强制使用本地端口号 </span>
-m/--max-time                                 <span class="token comment"># 设置最大传输时间 </span>
     --max-redirs                             <span class="token comment"># 设置最大读取的目录数 </span>
     --max-filesize                           <span class="token comment"># 设置最大下载的文件总量 </span>
-M/--manual                                   <span class="token comment"># 显示全手动 </span>
-n/--netrc                                    <span class="token comment"># 从netrc文件中读取用户名和密码 </span>
     --netrc-optional                         <span class="token comment"># 使用 .netrc 或者 URL来覆盖-n </span>
     <span class="token parameter variable">--ntlm</span>                                   <span class="token comment"># 使用 HTTP NTLM 身份验证 </span>
-N/--no-buffer                                <span class="token comment"># 禁用缓冲输出 </span>
-o/--output                                   <span class="token comment"># 把输出写到该文件中 </span>
-O/--remote-name                              <span class="token comment"># 把输出写到该文件中，保留远程文件的文件名 </span>
-p/--proxytunnel                              <span class="token comment"># 使用HTTP代理 </span>
     --proxy-anyauth                          <span class="token comment"># 选择任一代理身份验证方法 </span>
     --proxy-basic                            <span class="token comment"># 在代理上使用基本身份验证 </span>
     --proxy-digest                           <span class="token comment"># 在代理上使用数字身份验证 </span>
     --proxy-ntlm                             <span class="token comment"># 在代理上使用ntlm身份验证 </span>
-P/--ftp-port                                 <span class="token comment"># 使用端口地址，而不是使用PASV </span>
<span class="token parameter variable">-q</span>                                            <span class="token comment"># 作为第一个参数，关闭 .curlrc </span>
-Q/--quote                                    <span class="token comment"># 文件传输前，发送命令到服务器 </span>
-r/--range                                    <span class="token comment"># 检索来自HTTP/1.1或FTP服务器字节范围 </span>
--range-file                                  <span class="token comment"># 读取（SSL）的随机文件 </span>
-R/--remote-time                              <span class="token comment"># 在本地生成文件时，保留远程文件时间 </span>
     <span class="token parameter variable">--retry</span>                                  <span class="token comment"># 传输出现问题时，重试的次数 </span>
     --retry-delay                            <span class="token comment"># 传输出现问题时，设置重试间隔时间 </span>
     --retry-max-time                         <span class="token comment"># 传输出现问题时，设置最大重试时间 </span>
-s/--silent                                   <span class="token comment"># 静默模式。不输出任何东西 </span>
-S/--show-error                               <span class="token comment"># 显示错误 </span>
     <span class="token parameter variable">--socks4</span>                                 <span class="token comment"># 用socks4代理给定主机和端口 </span>
     <span class="token parameter variable">--socks5</span>                                 <span class="token comment"># 用socks5代理给定主机和端口 </span>
     <span class="token parameter variable">--stderr</span>                                 <span class="token comment">#   </span>
-t/--telnet-option                            <span class="token comment"># Telnet选项设置 </span>
     <span class="token parameter variable">--trace</span>                                  <span class="token comment"># 对指定文件进行debug </span>
     --trace-ascii                            <span class="token comment"># Like --跟踪但没有hex输出 </span>
     --trace-time                             <span class="token comment"># 跟踪/详细输出时，添加时间戳 </span>
-T/--upload-file                              <span class="token comment"># 上传文件 </span>
     <span class="token parameter variable">--url</span>                                    <span class="token comment"># Spet URL to work with </span>
-u/--user                                     <span class="token comment"># 设置服务器的用户和密码 </span>
-U/--proxy-user                               <span class="token comment"># 设置代理用户名和密码 </span>
-w/--write-out <span class="token punctuation">\</span><span class="token punctuation">[</span>format<span class="token punctuation">]</span>                      <span class="token comment"># 什么输出完成后 </span>
-x/--proxy                                    <span class="token comment"># 在给定的端口上使用HTTP代理 </span>
-X/--request                                  <span class="token comment"># 指定什么命令 </span>
-y/--speed-time                               <span class="token comment"># 放弃限速所要的时间，默认为30 </span>
-Y/--speed-limit                              <span class="token comment"># 停止传输速度的限制，速度时间 </span>
</code></pre>
<h2 id="实例">实例</h2>
<h3 id="文件下载">文件下载</h3>
<p>curl命令可以用来执行下载、发送各种HTTP请求，指定HTTP头部等操作。如果系统没有curl可以使用<code>yum install curl</code>安装，也可以下载安装。curl是将下载文件输出到stdout，将进度信息输出到stderr，不显示进度信息使用<code>--silent</code>选项。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> URL <span class="token parameter variable">--silent</span></code></pre>
<p>这条命令是将下载文件输出到终端，所有下载的数据都被写入到stdout。</p>
<p>使用选项<code>-O</code>将下载的数据写入到文件，必须使用文件的绝对地址：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://example.com/text.iso <span class="token parameter variable">--silent</span> <span class="token parameter variable">-O</span></code></pre>
<p>选项<code>-o</code>将下载数据写入到指定名称的文件中，并使用<code>--progress</code>显示进度条：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> http://example.com/test.iso <span class="token parameter variable">-o</span> filename.iso <span class="token parameter variable">--progress</span>
<span class="token comment">############################ 100.0%</span></code></pre>
<p><strong>不输出错误和进度信息</strong></p>
<p><code>-s</code> 参数将不输出错误和进度信息。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-s</span> https://www.example.com
<span class="token comment"># 上面命令一旦发生错误，不会显示错误信息。不发生错误的话，会正常显示运行结果。</span></code></pre>
<p>如果想让 curl 不产生任何输出，可以使用下面的命令。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-o</span> /dev/null https://google.com</code></pre>
<p><strong>断点续传</strong></p>
<p>curl能够从特定的文件偏移处继续下载，它可以通过指定一个便宜量来下载部分文件：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> URL/File <span class="token parameter variable">-C</span> 偏移量

<span class="token comment">#偏移量是以字节为单位的整数，如果让curl自动推断出正确的续传位置使用-C -：</span>
<span class="token function">curl</span> <span class="token parameter variable">-C</span> <span class="token parameter variable">-URL</span></code></pre>
<p><strong>使用curl设置参照页字符串</strong></p>
<p>参照页是位于HTTP头部中的一个字符串，用来表示用户是从哪个页面到达当前页面的，如果用户点击网页A中的某个连接，那么用户就会跳转到B网页，网页B头部的参照页字符串就包含网页A的URL。</p>
<p>使用<code>--referer</code>选项指定参照页字符串：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">--referer</span> http://www.google.com https://baidu.com</code></pre>
<p><strong>用curl设置用户代理字符串</strong></p>
<p>有些网站访问会提示只能使用IE浏览器来访问，这是因为这些网站设置了检查用户代理，可以使用curl把用户代理设置为IE，这样就可以访问了。使用<code>--user-agent</code>或者<code>-A</code>选项：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> URL --user-agent <span class="token string">"Mozilla/5.0"</span>
<span class="token function">curl</span> URL <span class="token parameter variable">-A</span> <span class="token string">"Mozilla/5.0"</span></code></pre>
<p>其他HTTP头部信息也可以使用curl来发送，使用<code>-H</code>&quot;头部信息&quot; 传递多个头部信息，例如：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">"Host:baidu.com"</span> <span class="token parameter variable">-H</span> <span class="token string">"accept-language:zh-cn"</span> URL</code></pre>
<p><strong>curl的带宽控制和下载配额</strong></p>
<p>使用<code>--limit-rate</code>限制curl的下载速度：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> URL --limit-rate 50k</code></pre>
<p>命令中用k（千字节）和m（兆字节）指定下载速度限制。</p>
<p>使用<code>--max-filesize</code>指定可下载的最大文件大小：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> URL --max-filesize bytes</code></pre>
<p>如果文件大小超出限制，命令则返回一个非0退出码，如果命令正常则返回0。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> --limit-rate 200k https://example.com
<span class="token comment"># 上面命令将带宽限制在每秒 200K 字节。</span></code></pre>
<p><strong>用curl进行认证</strong></p>
<p>使用curl选项 -u 可以完成HTTP或者FTP的认证，可以指定密码，也可以不指定密码在后续操作中输入密码：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-u</span> user:pwd https://baidu.com
<span class="token function">curl</span> <span class="token parameter variable">-u</span> user https://baidu.com</code></pre>
<p><strong>只打印响应头部信息</strong></p>
<p>通过<code>-I</code>或者<code>-head</code>可以只打印出HTTP头部信息：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost text<span class="token punctuation">]</span><span class="token comment"># curl -I https://baidu.com</span>
HTTP/1.1 <span class="token number">200</span> OK
Server: nginx/1.2.5
date: Mon, <span class="token number">10</span> Dec <span class="token number">2012</span> 09:24:34 GMT
Content-Type: text/html<span class="token punctuation">;</span> <span class="token assign-left variable">charset</span><span class="token operator">=</span>UTF-8
Connection: keep-alive
Vary: Accept-Encoding
X-Pingback: https://baidu.com/xmlrpc.php</code></pre>
<h3 id="get请求">get请求</h3>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token string">"http://www.baidu.com"</span>    <span class="token comment"># 如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地</span>
<span class="token function">curl</span> <span class="token parameter variable">-i</span> <span class="token string">"http://www.baidu.com"</span> <span class="token comment"># 显示全部信息</span>
<span class="token function">curl</span> <span class="token parameter variable">-l</span> <span class="token string">"http://www.baidu.com"</span> <span class="token comment"># 显示页面内容</span>
<span class="token function">curl</span> <span class="token parameter variable">-v</span> <span class="token string">"http://www.baidu.com"</span> <span class="token comment"># 显示get请求全过程解析</span></code></pre>
<h3 id="post请求">post请求</h3>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">"param1=value1&amp;param2=value2"</span> <span class="token string">"http://www.baidu.com/login"</span>

<span class="token function">curl</span> -d<span class="token string">'login=emma&amp;password=123'</span> <span class="token parameter variable">-X</span> POST https://baidu.com/login
<span class="token comment"># 或者</span>
<span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">'login=emma'</span> <span class="token parameter variable">-d</span> <span class="token string">'password=123'</span> <span class="token parameter variable">-X</span> POST  https://baidu.com/login</code></pre>
<p><code>--data-urlencode</code> 参数等同于 <code>-d</code>，发送 <code>POST</code> 请求的数据体，区别在于会自动将发送的数据进行 <code>URL</code> 编码。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> --data-urlencode <span class="token string">'comment=hello world'</span> https://baidu.com/login
<span class="token comment"># 上面代码中，发送的数据hello world之间有一个空格，需要进行 URL 编码。</span></code></pre>
<p><strong>读取本地文本文件的数据，向服务器发送</strong></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">'@data.txt'</span> https://baidu.com/upload
<span class="token comment"># 读取data.txt文件的内容，作为数据体向服务器发送。</span></code></pre>
<p><strong>json格式的post请求</strong></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-l</span> <span class="token parameter variable">-H</span> <span class="token string">"Content-type: application/json"</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-d</span> <span class="token string">'&#123;"phone":"13521389587","password":"test"&#125;'</span> https://baidu.com/apis/users.json</code></pre>
<p><strong>向服务器发送 Cookie</strong></p>
<p>使用<code>--cookie &quot;COKKIES&quot;</code>选项来指定cookie，多个cookie使用分号分隔：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> https://baidu.com <span class="token parameter variable">--cookie</span> <span class="token string">"user=root;pass=123456"</span></code></pre>
<p>将cookie另存为一个文件，使用<code>--cookie-jar</code>选项：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> URL --cookie-jar cookie_file</code></pre>
<p><code>-b</code> 参数用来向服务器发送 Cookie。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-b</span> <span class="token string">'foo=bar'</span> https://taobao.com
<span class="token comment"># 上面命令会生成一个标头Cookie: foo=bar，向服务器发送一个名为foo、值为bar的 Cookie。</span></code></pre>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-b</span> <span class="token string">'foo1=bar'</span> <span class="token parameter variable">-b</span> <span class="token string">'foo2=baz'</span> https://taobao.com
<span class="token comment"># 上面命令发送两个 Cookie。</span>

```shell
<span class="token function">curl</span> <span class="token parameter variable">-b</span> cookies.txt https://www.taobao.com
<span class="token comment"># 上面命令读取本地文件 cookies.txt，里面是服务器设置的 Cookie（参见-c参数），将其发送到服务器。</span></code></pre>
<p><strong>Cookie 写入一个文件</strong></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-c</span> cookies.txt https://www.taobao.com
<span class="token comment"># 上面命令将服务器的 HTTP 回应所设置 Cookie 写入文本文件cookies.txt。</span></code></pre>
<p><strong>请求的来源</strong></p>
<p><code>-e</code> 参数用来设置 <code>HTTP</code> 的标头 <code>Referer</code>，表示请求的来源。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-e</span> <span class="token string">'https://taobao.com?q=example'</span> https://www.example.com
<span class="token comment"># 上面命令将Referer标头设为 https://taobao.com?q=example。</span></code></pre>
<p><code>-H</code> 参数可以通过直接添加标头 <code>Referer</code>，达到同样效果。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">'Referer: https://taobao.com?q=example'</span> https://www.example.com</code></pre>
<p><strong>上传二进制文件</strong></p>
<p><code>-F</code> 参数用来向服务器上传二进制文件。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-F</span> <span class="token string">'file=@photo.png'</span> https://taobao.com/profile
<span class="token comment"># 上面命令会给 HTTP 请求加上标头 Content-Type: multipart/form-data ，然后将文件photo.png作为file字段上传。</span></code></pre>
<p><code>-F</code> 参数可以指定 <code>MIME</code> 类型。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-F</span> <span class="token string">'file=@photo.png;type=image/png'</span> https://taobao.com/profile
<span class="token comment"># 上面命令指定 MIME 类型为image/png，否则 curl 会把 MIME 类型设为 application/octet-stream。</span></code></pre>
<p><code>-F</code> 参数也可以指定文件名。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-F</span> <span class="token string">'file=@photo.png;filename=me.png'</span> https://taobao.com/profile
<span class="token comment"># 上面命令中，原始文件名为photo.png，但是服务器接收到的文件名为me.png。</span></code></pre>
<p><strong>设置请求头</strong></p>
<p><code>-H</code> 参数添加 <code>HTTP</code> 请求的标头。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">'Accept-Language: en-US'</span> https://google.com
<span class="token comment"># 上面命令添加 HTTP 标头 Accept-Language: en-US。</span></code></pre>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-H</span> <span class="token string">'Accept-Language: en-US'</span> <span class="token parameter variable">-H</span> <span class="token string">'Secret-Message: xyzzy'</span> https://google.com
<span class="token comment"># 上面命令添加两个 HTTP 标头。</span></code></pre>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token string">'&#123;"login": "emma", "pass": "123"&#125;'</span> <span class="token parameter variable">-H</span> <span class="token string">'Content-Type: application/json'</span> https://google.com/login
<span class="token comment"># 上面命令添加 HTTP 请求的标头是 Content-Type: application/json，然后用 -d 参数发送 JSON 数据。</span></code></pre>
<p><strong>跳过 SSL 检测</strong></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-k</span> https://www.example.com
<span class="token comment"># 上面命令不会检查服务器的 SSL 证书是否正确。</span></code></pre>
<p><strong>请求跟随服务器的重定向</strong></p>
<p><code>-L</code> 参数会让 <code>HTTP</code> 请求跟随服务器的重定向。<code>curl</code> 默认不跟随重定向。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token parameter variable">-d</span> <span class="token string">'tweet=hi'</span> https://api.example.com/tweet</code></pre>
<p><strong>调试参数</strong></p>
<p><code>-v</code> 参数输出通信的整个过程，用于调试。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-v</span> https://www.example.com
<span class="token comment"># --trace参数也可以用于调试，还会输出原始的二进制数据。</span></code></pre>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token parameter variable">--trace</span> - https://www.example.com</code></pre>
<p><strong>获取本机外网ip</strong></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> ipecho.net/plain</code></pre>
<p><strong>使用 curl 测试网站加载速度</strong></p>
<p>命令有一个鲜为人知的选项，<code>-w</code>，该选项在请求结束之后打印本次请求的统计数据到标准输出。</p>
<p>首先，我们定义控制打印行为的格式化字符串。新建文本文件 <code>fmt.txt</code>，并填入下面的内容：</p>
<pre class="language-ruby" data-language="ruby"><code class="language-ruby">\n
Response <span class="token builtin">Time</span> <span class="token keyword">for</span><span class="token operator">:</span> <span class="token string-literal"><span class="token string">%&#123;url_effective&#125;</span></span>\n\n
<span class="token constant">DNS</span> Lookup <span class="token builtin">Time</span><span class="token operator">:</span>\t\t<span class="token string-literal"><span class="token string">%&#123;time_namelookup&#125;</span></span>s\n
Redirection <span class="token builtin">Time</span><span class="token operator">:</span>\t\t<span class="token string-literal"><span class="token string">%&#123;time_redirect&#125;</span></span>s\n
Connection <span class="token builtin">Time</span><span class="token operator">:</span>\t\t<span class="token string-literal"><span class="token string">%&#123;time_connect&#125;</span></span>s\n
App Connection <span class="token builtin">Time</span><span class="token operator">:</span>\t\t<span class="token string-literal"><span class="token string">%&#123;time_appconnect&#125;</span></span>s\n
Pre<span class="token operator">-</span>transfer <span class="token builtin">Time</span><span class="token operator">:</span>\t\t<span class="token string-literal"><span class="token string">%&#123;time_pretransfer&#125;</span></span>s\n
Start<span class="token operator">-</span>transfer <span class="token builtin">Time</span><span class="token operator">:</span>\t\t<span class="token string-literal"><span class="token string">%&#123;time_starttransfer&#125;</span></span>s\n\n
Total <span class="token builtin">Time</span><span class="token operator">:</span>\t\t\t<span class="token string-literal"><span class="token string">%&#123;time_total&#125;</span></span>s\n</code></pre>
<p>curl 提供了很多置换变量，可以在格式化字符串中通过 <code>%&#123;var&#125;</code> 的形式使用。完整的变量列表可以在 <code>curl</code> 的 <code>manpage</code> 中查看。简单介绍一下我们使用的这几个变量：</p>
<ul>
<li><code>url_effective</code>: 执行完地址重定向之后的最终 URL；</li>
<li><code>time_namelookup</code>: 从请求开始至完成名称解析所花的时间，单位为秒，下同；</li>
<li><code>time_redirect</code>: 执行所有重定向所花的时间；</li>
<li><code>time_connect</code>: 从请求开始至建立 TCP 连接所花的时间；</li>
<li><code>time_appconnect</code>: 从请求开始至完成 SSL/SSH 握手所花的时间；</li>
<li><code>time_pretransfer</code>: 从请求开始至服务器准备传送文件所花的时间，包含了传送协商时间；</li>
<li><code>time_starttransfer</code>: 从请求开始至服务器准备传送第一个字节所花的时间；</li>
<li><code>time_total</code>: 完整耗时。</li>
</ul>
<p>然后执行请求，通过 @filename 指定保存了格式化字符串的文件：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">curl</span> <span class="token parameter variable">-L</span> <span class="token parameter variable">-s</span> <span class="token parameter variable">-w</span> @fmt.txt <span class="token parameter variable">-o</span> /dev/null http://www.google.com</code></pre>
<p>输出：</p>
<pre class="language-c" data-language="c"><code class="language-c">Response Time <span class="token keyword">for</span><span class="token operator">:</span> http<span class="token operator">:</span><span class="token comment">//www.google.co.jp/?gfe_rd=cr&amp;dcr=0&amp;ei=cjIaWpTkHeiQ8QfnxYzoBA</span>

DNS Lookup Time<span class="token operator">:</span>        <span class="token number">0.000038</span>s
Redirection Time<span class="token operator">:</span>       <span class="token number">0.207271</span>s
Connection Time<span class="token operator">:</span>        <span class="token number">0.000039</span>s
App Connection Time<span class="token operator">:</span>    <span class="token number">0.000039</span>s
Pre<span class="token operator">-</span>transfer Time<span class="token operator">:</span>      <span class="token number">0.000067</span>s
Start<span class="token operator">-</span>transfer Time<span class="token operator">:</span>    <span class="token number">0.260115</span>s

Total Time<span class="token operator">:</span>             <span class="token number">0.467691</span>s</code></pre>
<h2 id="要求返回是压缩的状态">要求返回是压缩的状态</h2>
<pre class="language-bash" data-language="bash"><code class="language-bash">▶ <span class="token function">curl</span> <span class="token parameter variable">--compressed</span> -o- <span class="token parameter variable">-L</span> https://yarnpkg.com/install.sh <span class="token operator">|</span> <span class="token function">bash</span>
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
<span class="token number">100</span>    <span class="token number">54</span>  <span class="token number">100</span>    <span class="token number">54</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">42</span>      <span class="token number">0</span>  <span class="token number">0</span>:00:01  <span class="token number">0</span>:00:01 --:--:--    <span class="token number">42</span>
<span class="token number">100</span>  <span class="token number">2341</span>  <span class="token number">100</span>  <span class="token number">2341</span>    <span class="token number">0</span>     <span class="token number">0</span>   <span class="token number">1202</span>      <span class="token number">0</span>  <span class="token number">0</span>:00:01  <span class="token number">0</span>:00:01 --:--:--  <span class="token number">9289</span>
Installing Yarn<span class="token operator">!</span>
<span class="token operator">></span> Downloading tarball<span class="token punctuation">..</span>.

<span class="token punctuation">[</span><span class="token number">1</span>/2<span class="token punctuation">]</span>: https://yarnpkg.com/latest.tar.gz --<span class="token operator">></span> /var/folders/j7/3xly5sk567s65ny5dnr__3b80000gn/T/yarn.tar.gz.XXXXXXXXXX.9hJsBsrA
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
<span class="token number">100</span>    <span class="token number">57</span>  <span class="token number">100</span>    <span class="token number">57</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">72</span>      <span class="token number">0</span> --:--:-- --:--:-- --:--:--    <span class="token number">72</span>
<span class="token number">100</span>    <span class="token number">93</span>  <span class="token number">100</span>    <span class="token number">93</span>    <span class="token number">0</span>     <span class="token number">0</span>     <span class="token number">63</span>      <span class="token number">0</span>  <span class="token number">0</span>:00:01  <span class="token number">0</span>:00:01 --:--:--    <span class="token number">63</span>
<span class="token number">100</span>   <span class="token number">643</span>  <span class="token number">100</span>   <span class="token number">643</span>    <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">248</span>      <span class="token number">0</span>  <span class="token number">0</span>:00:02  <span class="token number">0</span>:00:02 --:--:--   <span class="token number">707</span>
<span class="token number">100</span> 1215k  <span class="token number">100</span> 1215k    <span class="token number">0</span>     <span class="token number">0</span>   153k      <span class="token number">0</span>  <span class="token number">0</span>:00:07  <span class="token number">0</span>:00:07 --:--:--  305k

<span class="token punctuation">[</span><span class="token number">2</span>/2<span class="token punctuation">]</span>: https://yarnpkg.com/latest.tar.gz.asc --<span class="token operator">></span> /var/folders/j7/3xly5sk567s65ny5dnr__3b80000gn/T/yarn.tar.gz.XXXXXXXXXX.9hJsBsrA.asc
<span class="token number">100</span>    <span class="token number">61</span>  <span class="token number">100</span>    <span class="token number">61</span>    <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">356</span>      <span class="token number">0</span> --:--:-- --:--:-- --:--:--   <span class="token number">356</span>
<span class="token number">100</span>    <span class="token number">97</span>  <span class="token number">100</span>    <span class="token number">97</span>    <span class="token number">0</span>     <span class="token number">0</span>    <span class="token number">325</span>      <span class="token number">0</span> --:--:-- --:--:-- --:--:--   <span class="token number">325</span>
<span class="token number">100</span>   <span class="token number">647</span>  <span class="token number">100</span>   <span class="token number">647</span>    <span class="token number">0</span>     <span class="token number">0</span>   <span class="token number">1283</span>      <span class="token number">0</span> --:--:-- --:--:-- --:--:--  <span class="token number">1283</span>
<span class="token number">100</span>   <span class="token number">832</span>  <span class="token number">100</span>   <span class="token number">832</span>    <span class="token number">0</span>     <span class="token number">0</span>   <span class="token number">1107</span>      <span class="token number">0</span> --:--:-- --:--:-- --:--:--  812k</code></pre>
]]></content>
      <categories>
        <category>技术文档</category>
      </categories>
      <tags>
        <tag>语法速查</tag>
        <tag>技术文档</tag>
        <tag>Linux</tag>
        <tag>curl</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL常用命令</title>
    <url>//blog/210801.html</url>
    <content><![CDATA[<h2 id="1-系统命令">1. 系统命令</h2>
<table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">连接</td>
<td style="text-align:left"><strong>mysql -h 主机地址 -u 用户名 -p 密码</strong> (当mysql为本地服务时 -h可以省略)</td>
</tr>
<tr>
<td style="text-align:left">退出</td>
<td style="text-align:left"><strong>exit</strong> 或 <strong>quit</strong></td>
</tr>
</tbody>
</table>
<span id="more"></span>
<h2 id="2-数据库操作">2. 数据库操作</h2>
<table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">创建库</td>
<td style="text-align:left"><strong>create database 库名</strong></td>
</tr>
<tr>
<td style="text-align:left">删除库</td>
<td style="text-align:left"><strong>drop database 库名</strong></td>
</tr>
<tr>
<td style="text-align:left">显示库</td>
<td style="text-align:left"><strong>show databases</strong></td>
</tr>
<tr>
<td style="text-align:left">使用库</td>
<td style="text-align:left"><strong>use 库名</strong></td>
</tr>
<tr>
<td style="text-align:left">查看当前使用的库</td>
<td style="text-align:left"><strong>select database()</strong></td>
</tr>
</tbody>
</table>
<h2 id="3-表操作">3. 表操作</h2>
<table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">显示表</td>
<td style="text-align:left"><strong>show tables</strong></td>
</tr>
<tr>
<td style="text-align:left">使用表</td>
<td style="text-align:left"><strong>use 表名</strong></td>
</tr>
<tr>
<td style="text-align:left">删除表</td>
<td style="text-align:left"><strong>drop table 表名</strong></td>
</tr>
<tr>
<td style="text-align:left">显示表结构</td>
<td style="text-align:left"><strong>describe 表名</strong> 可简写为 <strong>desc 表名</strong>，或者 **show columns from 表名 **</td>
</tr>
<tr>
<td style="text-align:left">更改表名</td>
<td style="text-align:left"><strong>rename table 原表名 to 新表名</strong></td>
</tr>
<tr>
<td style="text-align:left">创建表</td>
<td style="text-align:left"><strong>create table 表名 ( 字段名 类型 [,…字段名n 类型n] )</strong></td>
</tr>
<tr>
<td style="text-align:left">表中增加字段</td>
<td style="text-align:left"><strong>alter table 表名 add 字段名 类型 其他</strong></td>
</tr>
<tr>
<td style="text-align:left">表中删除字段</td>
<td style="text-align:left"><strong>alter table 表名 drop column 字段名</strong></td>
</tr>
<tr>
<td style="text-align:left">表中修改字段类型</td>
<td style="text-align:left"><code>alter table 表名 modify 字段名 类型 其他</code></td>
</tr>
<tr>
<td style="text-align:left">表中修改字段</td>
<td style="text-align:left"><strong>alter table 表名 change  旧字段名 新字段名 类型 其他</strong>  (change与modify相比，可以修改字段名)</td>
</tr>
</tbody>
</table>
<h2 id="4-表SQL">4. 表SQL</h2>
<table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">插入数据</td>
<td style="text-align:left"><strong>insert into 表名 [( 字段名[,…字段名n  ])] values ( 值 [,…值n )]</strong>  (当values前面的字段名省略时，表示插入所有字段)</td>
</tr>
<tr>
<td style="text-align:left">删除数据</td>
<td style="text-align:left"><strong>delete from 表名 where 表达式</strong></td>
</tr>
<tr>
<td style="text-align:left">修改数据</td>
<td style="text-align:left"><strong>update 表名 set 字段=新值,… where 条件</strong></td>
</tr>
<tr>
<td style="text-align:left">查询数据</td>
<td style="text-align:left"><strong>select 字段,字段,… from 表名  where  表达式</strong></td>
</tr>
<tr>
<td style="text-align:left">分页查</td>
<td style="text-align:left"><strong>limit 起始位,分页大小</strong></td>
</tr>
</tbody>
</table>
<h2 id="5-分析查询语句">5. 分析查询语句</h2>
<blockquote>
<p><code>explain</code> <strong>select语句</strong> 或 <code>describe</code> <strong>select语句</strong>(可简写为desc)</p>
</blockquote>
<table>
<thead>
<tr>
<th style="text-align:left">查询结果值</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">id</td>
<td style="text-align:left">编号</td>
</tr>
<tr>
<td style="text-align:left">select_type</td>
<td style="text-align:left">类型：<code>SIMPLE</code>简单查询，其中不包括连接查询和子查询；<code>PRIMARY</code>表示主查询，或者是最外层的查询语句；<code>UNION</code>表示连接查询的第二个或后面的查询语句</td>
</tr>
<tr>
<td style="text-align:left">table</td>
<td style="text-align:left">查询的表</td>
</tr>
<tr>
<td style="text-align:left">type</td>
<td style="text-align:left">表的连接类型：<br><code>const</code>表示表中有多条记录，但只从表中查询一条记录；<br><code>eq_ref</code>表示多表连接时，后面的表使用了UNIQUE或者PRIMARY KEY；<br><code>ref</code>表示多表查询时，后面的表使用了普通索引；<br><code>unique_ subquery</code>表示子查询中使用了UNIQUE或者PRIMARY KEY；<br><code>index_ subquery</code>表示子查询中使用了普通索引；<br><code>range</code>表示查询语句中给出了查询范围；<br><code>index</code>表示对表中的索引进行了完整的扫描；<br><code>all</code>表示此次查询进行了全表扫描</td>
</tr>
<tr>
<td style="text-align:left">possible_keys</td>
<td style="text-align:left">表示查询中可能使用的索引，如果备选的数量大于3那说明已经太多了，因为太多会导致选择索引而损耗性能， 所以建表时字段最好精简，同时也要建立联合索引，避免无效的单列索引</td>
</tr>
<tr>
<td style="text-align:left"><code>key</code></td>
<td style="text-align:left">表示查询使用到的索引</td>
</tr>
<tr>
<td style="text-align:left">key_len</td>
<td style="text-align:left">表示索引字段的长度</td>
</tr>
<tr>
<td style="text-align:left">ref</td>
<td style="text-align:left">表示使用哪个列或常数与索引一起来查询记录</td>
</tr>
<tr>
<td style="text-align:left"><code>rows</code></td>
<td style="text-align:left">表示查询的行数（估值，越小越好）</td>
</tr>
<tr>
<td style="text-align:left">Extra</td>
<td style="text-align:left">表示查询过程的附件信息</td>
</tr>
</tbody>
</table>
<h2 id="6-索引">6. 索引</h2>
<table>
<thead>
<tr>
<th style="text-align:left">索引类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>INDEX</code></td>
<td style="text-align:left">普通索引：可重复</td>
</tr>
<tr>
<td style="text-align:left"><code>UNIQUE</code></td>
<td style="text-align:left">唯一索引：唯一、可为NULL</td>
</tr>
<tr>
<td style="text-align:left"><code>PROMARY KEY</code></td>
<td style="text-align:left">主键索引：唯一、不为空</td>
</tr>
<tr>
<td style="text-align:left"><code>FULLTEXT</code></td>
<td style="text-align:left">全文索引：可以针对值中的某个单词，但效率确实不敢恭维</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">修改表结构的方式创建索引</td>
<td style="text-align:left"><code>alter table 表名 add 索引类型 [索引名] (字段名 [...,字段名])</code></td>
</tr>
<tr>
<td style="text-align:left">直接创建索引</td>
<td style="text-align:left"><strong>create 索引类型 索引名 on 表名(字段名 […,字段名])</strong></td>
</tr>
<tr>
<td style="text-align:left">创建表的同时创建索引</td>
<td style="text-align:left">—</td>
</tr>
</tbody>
</table>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>al_test<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">`</span>al_id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'主键'</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>al_no<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>al_type<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">`</span>al_desc<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>al_id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">UNIQUE</span> <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>uk_no<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>al_no<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>idx_type<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>al_type<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  FULLTEXT <span class="token keyword">KEY</span> <span class="token identifier"><span class="token punctuation">`</span>ft_desc<span class="token punctuation">`</span></span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>al_desc<span class="token punctuation">`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>latin1<span class="token punctuation">;</span></code></pre>
<table>
<thead>
<tr>
<th style="text-align:left">功能</th>
<th style="text-align:left">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">修改表结构的方式删除索引</td>
<td style="text-align:left"><code>alter table 表名 drop index 索引名</code></td>
</tr>
<tr>
<td style="text-align:left">直接删除索引</td>
<td style="text-align:left"><strong>drop index 索引名 on 表名</strong></td>
</tr>
<tr>
<td style="text-align:left">查看表的索引</td>
<td style="text-align:left"><strong>show indexes from 表名</strong> 或   <strong>show keys from 表名</strong></td>
</tr>
<tr>
<td style="text-align:left">修改索引</td>
<td style="text-align:left">MySQL索引没有修改，可以先删除，再添加</td>
</tr>
</tbody>
</table>
<h2 id="7-导入、导出-备份">7. 导入、导出(备份)</h2>
<table>
<thead>
<tr>
<th style="text-align:left">导出 SQL 格式的数据</th>
<th style="text-align:left">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">导出所有</td>
<td style="text-align:left"><strong>mysqldump -u 用户名 -p --all-databases &gt;  &gt; 导出的文件名.sql</strong></td>
</tr>
<tr>
<td style="text-align:left">导出指定数据库</td>
<td style="text-align:left"><strong>mysqldump -u 用户名 -p 数据库名 [表名] &gt; 导出的文件名.sql</strong>  (当不指明表名时导出整个数据库)</td>
</tr>
<tr>
<td style="text-align:left">仅导出结构</td>
<td style="text-align:left"><strong>mysqldump -u 用户名 -p -d 数据库名 [表名] &gt; 导出的文件名.sql</strong>  (-d代表不导出数据)</td>
</tr>
<tr>
<td style="text-align:left">导入数据库</td>
<td style="text-align:left">**source 文件名.sql ** (需要先登录mysql并且指定数据库)</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:left">导出查询出来的数据</th>
<th style="text-align:left">语法</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">导出查询结果到文件</td>
<td style="text-align:left"><strong>查询语句 into outfile ‘文件名’</strong></td>
</tr>
<tr>
<td style="text-align:left">如：</td>
<td style="text-align:left"><strong>select * from al_test into outfile ‘/al_test.txt’</strong></td>
</tr>
</tbody>
</table>
<p>常见异常：  <code>The MySQL server is running with the --secure-file-priv option so it cannot execute this statement</code><br>
表示导出的文件目录错误（没有权限导出到此目录）<br>
可以执行<code>show variables like &quot;secure_file_priv&quot;</code> 查看允许的目录<br>
如果value值为null，则为禁止所有目录；如果为空，则不限制目录；如果有文件夹目录，则只允许改目录下文件。<br>
可以进入mysql配置文件配置修改 secure_file_priv =<br>
修改之后需要重启mysql生效。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>语法速查</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL更改用户密码的四种方法</title>
    <url>//blog/210802.html</url>
    <content><![CDATA[<h2 id="1-用-set-password-命令">1. 用 <code>set password</code> 命令</h2>
<p><code>需要先登录MySql</code></p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">set</span> password <span class="token keyword">for</span> 用户名<span class="token variable">@localhost</span> <span class="token operator">=</span> password<span class="token punctuation">(</span><span class="token string">'新密码'</span><span class="token punctuation">)</span></code></pre>
<span id="more"></span>
<h2 id="2-用update直接更新user表">2. 用<code>update</code>直接更新user表</h2>
<p><code>需要先登录MySql</code></p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span>
<span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> password<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'新密码'</span><span class="token punctuation">)</span> <span class="token keyword">where</span> <span class="token keyword">user</span><span class="token operator">=</span><span class="token string">'root'</span> <span class="token operator">and</span> host<span class="token operator">=</span><span class="token string">'localhost'</span><span class="token punctuation">;</span> 
flush <span class="token keyword">privileges</span><span class="token punctuation">;</span> </code></pre>
<h2 id="3-用-mysqladmin-命令">3. 用 <code>mysqladmin</code> 命令</h2>
<pre class="language-sql" data-language="sql"><code class="language-sql">mysqladmin <span class="token operator">-</span>u用户名 <span class="token operator">-</span>p旧密码 password 新密码 </code></pre>
<h2 id="4-忘记root密码">4. 忘记root密码</h2>
<h3 id="windows：">windows：</h3>
<ol>
<li>停止MySQL服务 <code>net stop mysql</code></li>
<li>管理员权限打开cmd窗口，到mysql\bin目录下（即mysqld.exe所在目录）</li>
<li>设置启动MySQL服务时跳过权限表认证 <code>mysqld --skip-grant-tables</code> （MySQL8.0.x版本使用 <code>mysqld --console --skip-grant-tables --shared-memory</code>）</li>
<li>再开一个新的cmd窗口，同样转到mysql\bin目录。</li>
<li>输入mysql回车。</li>
<li>连接权限数据库： <code>use mysql;</code> 。</li>
<li>改密码：<code>update user set password=password(&quot;新密码&quot;) where user=&quot;root&quot;;</code>。</li>
<li>刷新权限：<code>flush privileges;</code>　。</li>
<li>退出 <code>quit;</code></li>
<li>此时如果无法登录就重启系统。</li>
</ol>
<h3 id="linux：">linux：</h3>
<ol>
<li>停止MySQL服务 <code>service mysqld stop</code></li>
<li>修改mysql的配置文件my.conf(一般在/etc目录下) <code>vi /etc/my.cnf</code></li>
<li>在文件的[mysqld]标签下添加一句： <code>skip-grant-tables</code></li>
<li>然后wq保存退出</li>
<li>重启数据库<code>service mysqld start</code></li>
<li>直接连数据库<code>mysql -u root</code></li>
<li>连接权限数据库： <code>use mysql;</code> 。</li>
<li>改密码：<code>update user set password=password(&quot;新密码&quot;) where user=&quot;root&quot;;</code>。</li>
<li>刷新权限：<code>flush privileges;</code>　。</li>
<li>退出 <code>quit;</code></li>
<li>把第3步加的那句话去掉，然后重启mysql，然后就可以使用新密码登录了。</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis 常见问题</title>
    <url>//blog/210523.html</url>
    <content><![CDATA[<h2 id="1-缓存穿透">1. 缓存穿透</h2>
<p><strong><code>缓存穿透：key中对应的缓存数据不存在，导致去请求数据库，造成数据库的压力倍增的情况。</code></strong></p>
<p><strong>解决方案：</strong></p>
<ol>
<li>采用布隆过滤器（BloomFilter）进行数据拦截，在查询的时候先去 <strong>BloomFilter</strong> 去查询 <strong>key</strong> 是否存在，如果不存在就直接返回，存在再走查 缓存 -&gt; 查 DB。</li>
<li>如果请求的数据为空，我们可以将空值也进行一次缓存（过期时间设置短点），这样再请求的时候就会返回null。</li>
<li>后端接口层增加 用户鉴权校验，参数做校验等。</li>
<li>单个IP每秒访问次数超过阈值直接拉黑IP，关进小黑屋1天。</li>
</ol>
<span id="more"></span>
<h2 id="2-缓存击穿">2. 缓存击穿</h2>
<p><strong><code>缓存击穿：redis过期后的一瞬间，有大量用户请求同一个缓存数据，导致这些请求都去请求数据库，造成数据库压力倍增的情况，针对一个key而言。</code></strong></p>
<p><strong>解决方案：</strong></p>
<ol>
<li>使用互斥锁(mutex key)，就是一个key过期时，多个请求过来允许其中一个请求去操作数据库，其他请求等待第一个请求成功返回结果后再请求。</li>
<li>设置热点数据永远不过期。</li>
</ol>
<h2 id="3-缓存雪崩">3. 缓存雪崩</h2>
<p><strong><code>缓存雪崩：缓存服务器宕机或者大量缓存集中某个时间段失效，导致请求全部去到数据库，造成数据库压力倍增的情况，这个是针对多个key而言。</code></strong></p>
<p><strong>解决方案：</strong></p>
<ol>
<li>缓存数据的过期时间加上个随机值，防止同一时间大量数据过期现象发生。</li>
<li>如果缓存数据库是分布式部署，将热点数据均匀分布在不同的缓存数据库中。</li>
<li>设置热点数据永远不过期。</li>
<li>加锁排队，这种有点像上面缓存击穿的解决方式，但是这种请求量太大，比如5000个请求过来，4999个都需要等待，这必然是指标不治本，不仅用户体验性差，分布式环境下就更加复杂，因此在高并发场景下很少使用</li>
<li>最好的解决方法，是使用缓存标记，判断该标记是否过期，过期则去请求数据库，而缓存数据的过期时间要设置的比缓存标记的长，这样当一个请求去操作数据库的时候，其他请求拿的是上一次缓存数据</li>
</ol>
<h2 id="4-双写一致性">4. 双写一致性</h2>
<p><strong><code>即缓存跟数据库均更新数据，如何保证数据一致性？</code></strong></p>
<p>遵循 Cache Aside Pattern</p>
<ul>
<li>失效：应用程序先从cache取数据，没有得到，则从数据库中取数据，成功后，放到缓存中。</li>
<li>命中：应用程序从cache中取数据，取到后返回。</li>
<li>更新：先把数据存到数据库中，成功后，再让缓存失效。</li>
</ul>
<h2 id="5-脑裂">5. 脑裂</h2>
<p>脑裂是指因为网络原因，导致master节点、slave节点 和 sentinel集群处于不用的网络分区，此时因为sentinel集群无法感知到master的存在，所以将slave节点提升为master节点。</p>
<p>此时存在两个不同的master节点就像一个大脑分裂成了两个。</p>
<p>集群脑裂问题中，如果客户端还在基于原来的master节点继续写入数据那么新的master节点将无法同步这些数据，当网络问题解决后sentinel集群将原先的master节点降为slave节点，此时再从新的master中同步数据将造成大量的数据丢失。</p>
<p><strong>Redis处理方案是redis的配置文件中存在两个参数</strong></p>
<pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">min-replicas-to-write</span><span class="token punctuation">:</span> 3    表示连接到master的最少slave数量
<span class="token key atrule">min-replicas-max-lag</span><span class="token punctuation">:</span> 10    表示slave连接到master的最大延迟时间</code></pre>
<p>如果连接到master的slave数量 &lt; 第一个参数(3) 且 ping的延迟时间 &lt;= 第二个参数(10)那么master就会拒绝写请求，</p>
<p>配置了这两个参数后如果发生了集群脑裂则原先的master节点接收到客户端的写入请求会拒绝就可以减少数据同步之后的数据丢失。</p>
<h2 id="6-事务">6. 事务</h2>
<p><strong><code>步骤：开始事务 -&gt; 命令入队 -&gt; 执行事务</code></strong></p>
<ol>
<li>redis事务就是一次性、顺序性、排他性的执行一个队列中的一系列命令。</li>
<li>Redis事务没有<code>隔离级别</code>的概念：批量操作在发送 <code>EXEC</code> 命令前被放入队列缓存，并不会被实际执行，也就不存在事务内的查询要看到事务里的更新，事务外查询不能看到。</li>
<li>Redis<code>不保证原子性</code>：Redis中单条命令是原子性执行的，但事务不保证原子性。</li>
<li>Redis编译型错误事务中所有代码均不执行，指令使用错误。运行时异常是错误命令导致异常，其他命令可正常执行。</li>
<li><code>watch</code>指令类似于<code>乐观锁</code>，在事务提交时，如果<code>watch</code>监控的多个KEY中任何KEY的值已经被其他客户端更改，则使用<code>EXEC</code>执行事务时，事务队列将不会被执行。</li>
</ol>
<h2 id="7-正确的Redis开发步骤">7. 正确的Redis开发步骤</h2>
<p><strong>上线前：</strong> Redis 高可用，主从+哨兵，Redis cluster，避免全盘崩溃。</p>
<p><strong>上线时：</strong> 本地 ehcache 缓存 + Hystrix 限流 + 降级，避免MySQL扛不住。</p>
<p><strong>上线后：</strong> Redis 持久化采用 RDB + AOF 来保证断点后自动从磁盘上加载数据，快速恢复缓存数据。</p>
<h2 id="8-参考链接">8. 参考链接</h2>
<ol>
<li><a href="https://blog.csdn.net/sufu1065/article/details/111503419" title="点我查看原文">硬核Redis总结，看这篇就够了！</a></li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK 安装步骤 ( windows + linux )</title>
    <url>//blog/201207.html</url>
    <content><![CDATA[<h2 id="1-Windows-安装-JDK1-8-步骤">1. Windows 安装 JDK1.8 步骤</h2>
<h3 id="1-1-去官网下载-exe-安装包">1.1 去官网下载 .exe 安装包</h3>
<p><strong>JDK1.8</strong> 下载地址：<a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html">https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html</a></p>
<h3 id="1-2-执行-exe-可执行程序">1.2 执行 .exe 可执行程序</h3>
<p>选择.exe可执行程序，默认安装即可。</p>
<p><strong>备注：路径可以其他盘符，但是不建议路径包含中文名及特殊符号。</strong></p>
<h3 id="1-3-配置环境变量">1.3 配置环境变量</h3>
<ol>
<li>新建变量名： <strong><code>JAVA_HOME</code></strong> ，变量值：jdk的安装目录。 如： <strong><code>C:\Program Files\Java\jdk1.8.0_241</code></strong></li>
<li>打开 <strong><code>PATH</code></strong> ，添加变量值： <strong><code>%JAVA_HOME%\bin</code></strong></li>
<li>再次打开 <strong><code>PATH</code></strong> ，添加变量值： <strong><code>%JAVA_HOME%\jre\bin</code></strong></li>
<li>新建变量名： <strong><code>CLASSPATH</code></strong> ，变量值： <strong><code>.;%JAVA_HOME%\lib\dt.jar;%JAVA_HOME%\lib\tools.jar</code></strong></li>
</ol>
<p><strong>备注：</strong></p>
<ol>
<li>.表示当前路径，%JAVA_HOME%就是引用前面指定的JAVA_HOME；</li>
<li>JAVA_HOME指明JDK安装路径，此路径下包括lib，bin，jre等文件夹，tomcat，eclipse等的运行都需要依靠此变量。</li>
<li>PATH使得系统可以在任何路径下识别java命令。</li>
<li>CLASSPATH为java加载类(class or lib)路径，只有类在classpath中，java命令才能识别。</li>
</ol>
<h3 id="1-4-检查-JDK-是否安装成功">1.4 检查 JDK 是否安装成功</h3>
<p>打开一个新的CMD窗口，输入 <strong>java</strong> ， <strong>javac</strong> ， <strong>java -version</strong> 命令：出现下面界面，表示安装成功。</p>
<p><strong><code>java</code></strong></p>
<pre class="language-none"><code class="language-none">D:\&gt;java
用法: java [-options] class [args...]
           (执行类)
   或  java [-options] -jar jarfile [args...]
           (执行 jar 文件)
其中选项包括:
    -d32          使用 32 位数据模型 (如果可用)
    -d64          使用 64 位数据模型 (如果可用)
    -server       选择 &quot;server&quot; VM
                  默认 VM 是 server.

    -cp &lt;目录和 zip&#x2F;jar 文件的类搜索路径&gt;
    -classpath &lt;目录和 zip&#x2F;jar 文件的类搜索路径&gt;
                  用 ; 分隔的目录, JAR 档案
                  和 ZIP 档案列表, 用于搜索类文件。
    -D&lt;名称&gt;&#x3D;&lt;值&gt;
                  设置系统属性
   ...
   ...</code></pre>
<p><strong><code>javac</code></strong></p>
<pre class="language-none"><code class="language-none">D:\&gt;javac
用法: javac &lt;options&gt; &lt;source files&gt;
其中, 可能的选项包括:
  -g                         生成所有调试信息
  -g:none                    不生成任何调试信息
  -g:&#123;lines,vars,source&#125;     只生成某些调试信息
  -nowarn                    不生成任何警告
  -verbose                   输出有关编译器正在执行的操作的消息
   ...
   ...</code></pre>
<p><strong><code>java -version</code></strong></p>
<pre class="language-none"><code class="language-none">D:\&gt;java -version
java version &quot;1.8.0_241&quot;
Java(TM) SE Runtime Environment (build 1.8.0_241-b07)
Java HotSpot(TM) 64-Bit Server VM (build 25.241-b07, mixed mode)</code></pre>
<h2 id="2-Linux-安装-JDK1-8-步骤">2. Linux 安装 JDK1.8 步骤</h2>
<h3 id="2-1-卸载已安装jdk">2.1 卸载已安装jdk</h3>
<p>使用 <strong><code>rpm -qa | grep jdk</code></strong> 查询出已安装的jdk</p>
<p>使用 <strong><code>rpm -e --nodeps jdk包名</code></strong> 卸载已安装的jdk</p>
<h3 id="2-2-解压-jdk-到指定文件夹">2.2 解压 jdk 到指定文件夹</h3>
<p>创建 /data/jdk 目录 用于存放jdk</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /data/jdk</code></pre>
<p>安装上传组件</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> lrzsz</code></pre>
<p>将下载好的jdk压缩包拖进/data文件夹下面</p>
<p>将jdk压缩包 解压至 /data/jdk</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> jdk-8u241-linux-x64.tar.gz <span class="token parameter variable">-C</span> /data/jdk</code></pre>
<p>记住 <strong>/data/jdk</strong> 这个文件夹 后面要用</p>
<h3 id="2-3-添加环境变量">2.3 添加环境变量</h3>
<p>打开 /etc 下面的 profile 文件 <strong>vi /etc/profile</strong><br>
在最后面加入环境变量</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">export</span> <span class="token assign-left variable">JAVA_HOME</span><span class="token operator">=</span>/data/jdk/jdk1.8.0_241
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CLASSPATH</span><span class="token operator">=</span>.:<span class="token variable">$JAVA_HOME</span>/lib/dt.jar:<span class="token variable">$JAVA_HOME</span>/lib/tools.jar
<span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token variable">$JAVA_HOME</span>/bin</code></pre>
<p>注意 JAVA_HOME 的位置不要写错</p>
<h3 id="2-4-刷新环境变量-很重要，必须执行">2.4 刷新环境变量 <strong><code>很重要，必须执行</code></strong></h3>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile</code></pre>
<h3 id="2-5-检查-检查-JDK-是否安装成功">2.5 检查 检查 JDK 是否安装成功</h3>
<p><a href="#_1-4-%E6%A3%80%E6%9F%A5-jdk-%E6%98%AF%E5%90%A6%E5%AE%89%E8%A3%85%E6%88%90%E5%8A%9F">同 1.4</a></p>
]]></content>
      <categories>
        <category>环境安装</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>技术文档</tag>
        <tag>环境安装</tag>
        <tag>JDK</tag>
      </tags>
  </entry>
  <entry>
    <title>海贼王分享</title>
    <url>//blog/210714.html</url>
    <content><![CDATA[<h2 id="海贼王（onepiece）-分享">海贼王（onepiece） 分享</h2>
<div class="note danger no-icon"><p>所有资源都来自于网络，仅供学习研究、下载之后请24小时内删除，不得用于任何商业用途。</p>
</div>
<div class="note info no-icon"><p>特点：全部是1080P画质，所有集数都已重命名便于查看<br>
来源：枫雪动漫<br>
内容：0001-最新（1000+） + 14部剧场版<br>
大小：750GB+</p>
</div>
<span id="more"></span>
<h2 id="内容预览">内容预览</h2>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="/assets/img/2021/210714_1.jpg" alt=""></div><div class="group-picture-column"><img data-src="/assets/img/2021/210714_2.jpg" alt=""></div></div></div>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="/assets/img/2021/210714_3.jpg" alt=""></div><div class="group-picture-column"><img data-src="/assets/img/2021/210714_4.jpg" alt=""></div></div></div>
<div class="group-picture"><div class="group-picture-row"><div class="group-picture-column"><img data-src="/assets/img/2021/210714_5.jpg" alt=""></div><div class="group-picture-column"><img data-src="/assets/img/2021/210714_6.jpg" alt=""></div></div></div>
<h2 id="阿里云盘链接">阿里云盘链接</h2>
<blockquote>
<p>阿里云盘链接: <a href="https://www.aliyundrive.com/s/Xg3Eur6e8JU" title="点我查看">https://www.aliyundrive.com/s/Xg3Eur6e8JU</a></p>
</blockquote>
<p><strong>所有视频都有字幕，都是内封字幕，建议下载之后配合下面的软件观看最佳</strong></p>
<h2 id="阿里云盘达人招募计划">阿里云盘达人招募计划</h2>
<div class="note primary"><p>点击此链接<br>
<a href="https://pages.aliyundrive.com/mobile-page/web/signup.html?code=bd04a5e" title="点我查看">https://pages.aliyundrive.com/mobile-page/web/signup.html?code=bd04a5e</a><br>
加入阿里云盘达人招募计划，参与享最高50TB容量、延期卡等福利。</p>
</div>
<h2 id="播放工具">播放工具</h2>
<div class="note info"><p>手机建议使用 MXPlayer 观看：<br>
<a href="https://x-ling.lanzouo.com/iDVCjxg4yna" title="点我查看">https://x-ling.lanzouo.com/iDVCjxg4yna</a></p>
<p>电脑建议使用 PotPlayer 观看：<br>
<a href="https://x-ling.lanzouo.com/b01hw890d?password=2060" title="点我查看">https://x-ling.lanzouo.com/b01hw890d?password=2060</a></p>
</div>
]]></content>
      <categories>
        <category>资源分享</category>
      </categories>
      <tags>
        <tag>资源分享</tag>
        <tag>海贼王</tag>
        <tag>动漫</tag>
      </tags>
  </entry>
  <entry>
    <title>面试总结-基础篇</title>
    <url>//blog/210606.html</url>
    <content><![CDATA[<h2 id="01-JAVA中的几种基本数据类型是什么，各自占用多少字节？">01. JAVA中的几种基本数据类型是什么，各自占用多少字节？</h2>
<p><strong>JAVA的八种基本数据类型</strong></p>
<ul>
<li>整型
<ul>
<li>byte 、 short 、 int 、 long</li>
</ul>
</li>
<li>浮点型
<ul>
<li>float 、 double</li>
</ul>
</li>
<li>字符型
<ul>
<li>char</li>
</ul>
</li>
<li>布尔型
<ul>
<li>boolean</li>
</ul>
</li>
</ul>
<span id="more"></span>
<table>
<thead>
<tr>
<th style="text-align:center">数据类型</th>
<th style="text-align:center">占用字节</th>
<th style="text-align:center">默认值</th>
<th style="text-align:center">封装类</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>byte(字节型)</strong></td>
<td style="text-align:center">1</td>
<td style="text-align:center">0</td>
<td style="text-align:center"><strong>Byte</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong>short(短整形)</strong></td>
<td style="text-align:center">2</td>
<td style="text-align:center">0</td>
<td style="text-align:center"><strong>Short</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong>int(整形)</strong></td>
<td style="text-align:center">4</td>
<td style="text-align:center">0</td>
<td style="text-align:center"><strong>Integer</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong>long(长整形)</strong></td>
<td style="text-align:center">8</td>
<td style="text-align:center">0.0l</td>
<td style="text-align:center"><strong>Long</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong>float(浮点型)</strong></td>
<td style="text-align:center">4</td>
<td style="text-align:center">0.0f</td>
<td style="text-align:center"><strong>Float</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong>double(双精度浮点型)</strong></td>
<td style="text-align:center">8</td>
<td style="text-align:center">0</td>
<td style="text-align:center"><strong>Double</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong>char(字符型)</strong></td>
<td style="text-align:center">2</td>
<td style="text-align:center">\u0000(空格)</td>
<td style="text-align:center"><strong>Character</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong>boolean(布尔型)</strong></td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:center"><strong>Boolean</strong></td>
</tr>
</tbody>
</table>
<!-- more -->
<div class="note primary"><h4 id="注：">注：</h4>
<p>boolean在java规范里并没有规定大小；<br>
网上说的大小有很多，比如1个bit（1/8个字节）、1个字节、4个字节；<br>
我更倾向于4个字节，因为boolean类型会被编译为int类型，等于是说JVM里占用字节和int完全一样，int是4个字节，所以boolean也是4字节</p>
</div>
<h2 id="02-String类能被继承吗，为什么？">02. String类能被继承吗，为什么？</h2>
<p><strong>不能</strong> 因为String被关键字final修饰。</p>
<h2 id="03-final的用途">03. final的用途</h2>
<p>final是一种修饰符，是一种规定，可以用于修饰类、成员方法和成员变量</p>
<ul>
<li>final所修饰的类：不能被继承，不能有子类</li>
<li>final所修饰的方法：不能被重写</li>
<li>final所修饰的变量：是不可以修改的，是常量</li>
</ul>
<h2 id="04-String，Stringbuffer，StringBuilder的区别？">04. String，Stringbuffer，StringBuilder的区别？</h2>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center"><div style="width:80px">值是否可变</div></th>
<th style="text-align:center"><div style="width:70px">线程安全</div></th>
<th style="text-align:center"><div style="width:80px">常用</div></th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>String</strong></td>
<td style="text-align:center">不可变</td>
<td style="text-align:center"></td>
<td style="text-align:center"></td>
<td style="text-align:left">String的值是不可变的，这就导致每次对String的操作都会生成新的String对象，不仅效率低下，而且浪费大量优先的内存空间</td>
</tr>
<tr>
<td style="text-align:center"><strong>StringBuffer</strong></td>
<td style="text-align:center">可变</td>
<td style="text-align:center">线程安全</td>
<td style="text-align:center">多线程操作字符串</td>
<td style="text-align:left">StringBuffer是可变类，和线程安全的字符串操作类，任何对它指向的字符串的操作都不会产生新的对象。每个StringBuffer对象都有一定的缓冲区容量，当字符串大小没有超过容量时，不会分配新的容量，当字符串大小超过容量时，会自动增加容量</td>
</tr>
<tr>
<td style="text-align:center"><strong>StringBuilder</strong></td>
<td style="text-align:center">可变</td>
<td style="text-align:center">线程不安全</td>
<td style="text-align:center">单线程操作字符串</td>
<td style="text-align:left">可变类，速度更快</td>
</tr>
</tbody>
</table>
<blockquote>
<p>对于字符串拼接，我们实际使用中不用过于纠结是使用String还是StringBuffer与StringBuilder；现代JDK中编译时就会进行优化会将字符串拼接（+号拼接）优化为StringBuffer，甚至如&quot;a&quot;+“b&quot;这样的凭借会直接编译优化为&quot;ab”；因此还是优先考虑代码的可读性和美观，但是通过for循环拼接字符串时请使用StringBuffer或StringBuilder。</p>
</blockquote>
<h2 id="05-ArrayList和LinkedList有什么区别？">05. ArrayList和LinkedList有什么区别？</h2>
<div class="note success"><ul>
<li>ArrayList 查询快</li>
<li>LinkedList 增删快</li>
<li>因为ArrayList底层是一个数组，所以查询快；LinkedList底层是一个链表，所以增删快。</li>
</ul>
</div>
<p><img data-src="/assets/img/2021/01-05-1.jpg" alt="ArrayList与LinkedList" title="ArrayList与LinkedList"></p>
<p>如图所示，假设有一int类型类型的数组，每个int对象都有内存大小，占用4个字节。如果我们要查找第3个对象,可以通过(3-1)*4=8，故9到12字节就是我们要找的对象。是不是很快呢？而链表却不能做到这样的效率。如上图，我们要找到A3，必须先找到A2，要想找到A2，又必须先找到A1；这样的查找效率会大大降低。</p>
<p><img data-src="/assets/img/2021/01-05-2.jpg" alt="ArrayList与LinkedList插入图解" title="ArrayList与LinkedList插入图解"></p>
<p>如上图所示，数组的插入也相当的浪费效率；如果要在数组内的某一个位置进行插入，需要先将插入位置的前面复制一份，然后在新的数组后面添加新的元素，最后将旧的数组后半部分添加的新的数组后面；而在链表中插入就变得相当简单了，比如我要在A1和A2中插入A10,只需定位到A1的指针和A2的数据即可,将A1的指针指向A10的值,将A10的指针指向A2的值，A10就插入进了链表。</p>
<h2 id="06-讲讲类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，当new的时候，他们的执行顺序。">06. 讲讲类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，当new的时候，他们的执行顺序。</h2>
<div class="note success"><h4 id="类的实例化顺序：">类的实例化顺序：</h4>
<ol>
<li><strong>先静态</strong>： 先静态，后非静态</li>
<li><strong>先父后子</strong>： 先父类同级，后子类同级</li>
<li><strong>优先级： 字段 &gt; 带参构造函数 &gt; 无参构造函数 &gt; 普通函数</strong></li>
<li>同级： 从上到下依次执行</li>
</ol>
</div>
<h2 id="07-用过哪些Map类，都有什么区别，HashMap是线程安全的吗，并发下使用的Map是什么，他们内部原理分别是什么，比如存储方式，hashcode，扩容，默认容量等。">07. 用过哪些Map类，都有什么区别，HashMap是线程安全的吗，并发下使用的Map是什么，他们内部原理分别是什么，比如存储方式，hashcode，扩容，默认容量等。</h2>
<p>常见的Map类有 <strong>HashMap</strong> 、 <strong>ConcurrentHashMap</strong> 、 <strong>HashTable</strong> 、 <strong>LinkedHashMap</strong> 和 <strong>TreeMap</strong> 。</p>
<p>并发下常使用 <strong>ConcurrentHashMap</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center"><div style="width:80px">存储方式</div></th>
<th style="text-align:center">是否允许空值</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>HashMap</strong></td>
<td style="text-align:center">根据键的HashCode值存储数据</td>
<td style="text-align:center">最多只允许一条记录的键为 Null；允许多条记录的值为 Null</td>
</tr>
<tr>
<td style="text-align:center"><strong>HashTable</strong></td>
<td style="text-align:center">同上</td>
<td style="text-align:center">键或值都不允许为 Null</td>
</tr>
<tr>
<td style="text-align:center"><strong>LinkedHashMap</strong></td>
<td style="text-align:center">同上</td>
<td style="text-align:center">同 HashMap</td>
</tr>
<tr>
<td style="text-align:center"><strong>TreeMap</strong></td>
<td style="text-align:center">同上</td>
<td style="text-align:center">不允许键为Null；允许多条记录的值为 Null</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center">默认容量</th>
<th style="text-align:center">扩容机制</th>
<th style="text-align:center">是否有序</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>HashMap</strong></td>
<td style="text-align:center">16（必须为2的整数次幂）</td>
<td style="text-align:center">容量变为原来的2倍</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center"><strong>HashTable</strong></td>
<td style="text-align:center">11（不要求底层数组的容量一定要为2的整数次幂）</td>
<td style="text-align:center">容量变为原来的2倍加1</td>
<td style="text-align:center">否</td>
</tr>
<tr>
<td style="text-align:center"><strong>LinkedHashMap</strong></td>
<td style="text-align:center">容量没有限制</td>
<td style="text-align:center">-</td>
<td style="text-align:center">默认是数据插入顺序</td>
</tr>
<tr>
<td style="text-align:center"><strong>TreeMap</strong></td>
<td style="text-align:center">容量没有限制</td>
<td style="text-align:center">-</td>
<td style="text-align:center">默认是key升序</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th style="text-align:center">类型</th>
<th style="text-align:center"><div style="width:80px">线程安全</div></th>
<th style="text-align:center">优缺点</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>HashMap</strong></td>
<td style="text-align:center">否</td>
<td style="text-align:center">很快的访问速度，而且在Map中插入、删除和定位元素，HashMap 是最好的选择。</td>
</tr>
<tr>
<td style="text-align:center"><strong>HashTable</strong></td>
<td style="text-align:center">是</td>
<td style="text-align:center">它支持线程的同步，即任一时刻只有一个线程能写Hashtable，因此也导致了 Hashtable在写入时会比较慢</td>
</tr>
<tr>
<td style="text-align:center"><strong>LinkedHashMap</strong></td>
<td style="text-align:center">否</td>
<td style="text-align:center">LinkedHashMap是HashMap的一个子类，如果需要输出的顺序和输入的相同，那么用LinkedHashMap可以实现，它还可以按读取顺序来排列，像连接池中可以应用。</td>
</tr>
<tr>
<td style="text-align:center"><strong>TreeMap</strong></td>
<td style="text-align:center">否</td>
<td style="text-align:center">TreeMap取出来的是排序后的键值对。但如果要按自然顺序或自定义顺序遍历键，那么TreeMap会更好。</td>
</tr>
</tbody>
</table>
<h2 id="08-JAVA8的ConcurrentHashMap为什么放弃了分段锁，有什么问题吗，如果你来设计，你如何设计。">08. JAVA8的ConcurrentHashMap为什么放弃了分段锁，有什么问题吗，如果你来设计，你如何设计。</h2>
<p>弃用原因：</p>
<ul>
<li>加入多个分段锁浪费内存空间。</li>
<li>生产环境中， map 在放入时竞争同一个锁的概率非常小，分段锁反而会造成更新等操作的长时间等待。</li>
<li>为了提高 GC（垃圾回收） 的效率。</li>
<li>为了降低锁的粒度，提高性能。</li>
</ul>
<blockquote>
<p>JDK8 放弃了分段锁而是用了 <mark>Node数组+链表+红黑树</mark> 的数据结构来实现，并发控制使用 <strong>Synchronized</strong> 和 <strong>CAS</strong> 来操作，在没有hash冲突的情况下直接使用cas来操作，没有锁的性能开销，当hash冲突时，则直接用链表第一个object加锁，这里加的锁是synchronized，虽然效率不如 ReentrantLock， 但节约了空间，整个看起来就像是优化过且线程安全的HashMap。</p>
</blockquote>
<h2 id="09-ConcurrentHashMap-JDK1-8-为什么要使用synchronized而不是如ReentranLock这样的可重入锁？">09. ConcurrentHashMap(JDK1.8)为什么要使用synchronized而不是如ReentranLock这样的可重入锁？</h2>
<ul>
<li>减少内存开销<br>
假设使用可重入锁来获得同步支持，那么每个节点都需要通过继承AQS来获得同步支持。但并不是每个节点都需要获得同步支持的，只有链表的头节点（红黑树的根节点）需要同步，这无疑带来了巨大内存浪费。</li>
<li>获得JVM的支持<br>
可重入锁毕竟是API这个级别的，后续的性能优化空间很小。<br>
synchronized则是JVM直接支持的，JVM能够在运行时作出相应的优化措施：锁粗化、锁消除、锁自旋等等。这就使得synchronized能够随着JDK版本的升级而不改动代码的前提下获得性能上的提升。</li>
</ul>
<h2 id="10-有没有有顺序的Map实现类，如果有，他们是怎么保证有序的？">10. 有没有有顺序的Map实现类，如果有，他们是怎么保证有序的？</h2>
<p>TreeMap和LinkedHashmap都是有序的</p>
<p>TreeMap默认是 <strong>key升序</strong> ，也可以自定义排序规则：要实现Comparator接口</p>
<p>LinkedHashmap默认是数据 <strong>插入顺序</strong></p>
<p><strong>TreeMap 底层存储结构是二叉树，二叉树的中序遍历保证了数据的有序性</strong></p>
<p><strong>LinkedHashMap 底层存储结构是哈希表+链表，链表记录了添加数据的顺序</strong></p>
<h2 id="11-抽象类和接口的区别，类可以继承多个类么，接口可以继承多个接口么，可以实现多个接口么？">11. 抽象类和接口的区别，类可以继承多个类么，接口可以继承多个接口么，可以实现多个接口么？</h2>
<ul>
<li>
<p>不同点：</p>
<ul>
<li>抽象类要被子类继承，接口要被类实现。</li>
<li>接口只能做方法申明，抽象类中可以做方法申明，也可以做方法实现</li>
<li>接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。</li>
</ul>
</li>
<li>
<p>共同点：</p>
<ul>
<li>抽象类和接口都不能直接实例化，如果要实例化，抽象类变量必须指向实现所有抽象方法的子类对象，接口变量必须指向实现所有接口方法的类对象。</li>
<li>抽象类里的抽象方法必须全部被子类所实现，如果子类不能全部实现父类抽象方法，那么该子类只能是抽象类。同样，一个实现接口的时候，如不能全部实现接口方法，那么该类也只能为抽象类。</li>
<li>抽象方法只能申明，不能实现。abstract void abc();不能写成abstract void abc(){}。</li>
</ul>
</li>
<li>
<p>其它：</p>
<ul>
<li>抽象类里可以没有抽象方法</li>
<li>如果一个类里有抽象方法，那么这个类只能是抽象类</li>
<li>抽象方法要被实现，所以不能是静态的，也不能是私有的。</li>
</ul>
</li>
</ul>
<div class="note warning"><h4 id="注意">注意</h4>
<ul>
<li>类只能继承一个类，但是可以实现多个接口。</li>
<li><strong>接口</strong>只能继承接口，但是<strong>可多继承接口</strong>。</li>
</ul>
</div>
<h2 id="12-继承和聚合的区别在哪？">12. 继承和聚合的区别在哪？</h2>
<ul>
<li>
<p>继承指的是一个类继承另外的一个类的功能，并可以增加它自己的新功能的能力，继承是类与类或者接口与接口之间最常见的关系；在Java中此类关系通过关键字extends明确标识。</p>
</li>
<li>
<p>聚合体现的是整体与部分、拥有的关系，此时整体与部分之间是可分离的，他们可以具有各自的生命周期；比如计算机与CPU、公司与员工的关系等；在java中表现在代码层面，只能从语义级别来区分。</p>
</li>
</ul>
<p>扩展：</p>
<ul>
<li>实现：指的是一个class类实现interface接口（可以是多个）的功能；实现是类与接口之间最常见的关系；在Java中此类关系通过关键字implements明确标识</li>
<li>依赖：可以简单的理解，就是一个类A使用到了另一个类B，而这种使用关系是具有偶然性的、临时性的、非常弱的，但是B类的变化会影响到A；比如某人要过河，需要借用一条船，此时人与船之间的关系就是依赖；表现在代码层面，为类B作为参数被类A在某个method方法中使用。</li>
<li>关联：体现的是两个类、或者类与接口之间语义级别的一种强依赖关系，表现在代码层面，为被关联类B以类属性的形式出现在关联类A中，也可能是关联类A引用了一个类型为被关联类B的全局变量。</li>
<li>组合：组合也是关联关系的一种特例，他体现的是一种contains-a的关系，这种关系比聚合更强，也称为强聚合；他同样体现整体与部分间的关系，但此时整体与部分是不可分的，整体的生命周期结束也就意味着部分的生命周期结束；比如你和你的大脑；表现在代码层面，和关联关系是一致的，只能从语义级别来区分。</li>
</ul>
<h2 id="13-什么是IO模型？有哪些，讲讲你理解的nio-，他和bio，aio的区别是啥，谈谈reactor模型。">13. 什么是IO模型？有哪些，讲讲你理解的nio ，他和bio，aio的区别是啥，谈谈reactor模型。</h2>
<ul>
<li>什么是IO模型？
<ul>
<li>IO模型就是说用什么样的通道进行数据的发送和接收，Java共支持3种网络编程IO模式：NIO、BIO、AIO</li>
</ul>
</li>
<li>介绍：
<ul>
<li><mark>NIO</mark>：同步非阻塞，服务器实现模式为一个请求一个线程，即客户端发送的连接请求都会注册到多路复用器上，多路复用器轮询到连接有IO请求时才启动一个线程进行处理</li>
<li><mark>BIO</mark>：同步并阻塞，服务器实现模式为一个连接一个线程，即客户端有连接请求时服务器端就需要启动一个线程并处理，如果这个连接不做任何事情会造成不必要的开销，当然可以通过线程池机制改善</li>
<li><mark>AIO(NIO2)</mark>：异步非阻塞，服务器实现模式为一个有效请求一个线程，客户端的I/O请求都是由OS先完成了再通知服务器应用去启动线程进行处理</li>
</ul>
</li>
<li>使用场景：
<ul>
<li>NIO方式适用于连接数目多且连接比较短（轻操作）的架构，比如聊天服务器，并发局限于应用中，编程比较复杂，JDK1.4开始支持。</li>
<li>BIO方式适用于连接数目比较小且固定的架构，这种方式对服务器资源要求比较高，并发局限于应用中，JDK1.4以前的唯一选择，但程序直观简单易理解。</li>
<li>AIO方式使用于连接数目多且连接比较长（重操作）的架构，比如相册服务器，充分调用OS参与并发操作，编程比较复杂，JDK7开始支持。</li>
</ul>
</li>
</ul>
<h2 id="14-反射的原理，反射创建类实例的三种方式是什么？">14. 反射的原理，反射创建类实例的三种方式是什么？</h2>
<ul>
<li>反射的原理：
<ul>
<li>我们都知道java类的执行需要编译、加载、连接、初始化四步。反射的原理就是加载时，jvm通过字节码class文件，生成相应的对象。</li>
</ul>
</li>
<li>反射创建类实例的三种方式：
<ul>
<li><strong>对象.getClass()</strong></li>
<li><strong>类.class</strong></li>
<li><strong>Class.forName(“全路径名称”)</strong></li>
</ul>
</li>
<li>详细介绍请移步：<a href="/pages/92ad8f/" title="点我查看">什么是反射</a></li>
</ul>
<h2 id="15-反射中，Class-forName和ClassLoader区别-。">15. 反射中，Class.forName和ClassLoader区别 。</h2>
<ul>
<li>Java中Class.forName和classloader都可以用来对类进行加载。</li>
<li>Class.forName除了将类的 .class文件 加载到jvm中之外，还会对类进行解释，执行类中的static块。</li>
<li>而classloader只干一件事情，就是将.class文件加载到jvm中，不会执行static中的内容，只有在newInstance才会去执行static块。</li>
<li>Class.forName(name,initialize,loader)带参数也可控制是否加载static块。</li>
</ul>
<h2 id="16-描述动态代理的几种实现方式，分别说出相应的优缺点">16. 描述动态代理的几种实现方式，分别说出相应的优缺点</h2>
<p>常见的动态代理有 <strong>jdk动态代理</strong> 、 <strong>cglib动态代理</strong></p>
<ul>
<li>
<p>jdk动态代理是由java内部的反射机制来实现的，它是jdk原生就支持的一种代理方式，它的实现原理，就是通过让target类和代理类实现同一接口，代理类持有target对象，来达到方法拦截的作用，这样通过接口的方式有两个弊端，一个是必须保证target类有接口，第二个是如果想要对target类的方法进行代理拦截，那么就要保证这些方法都要在接口中声明，实现上略微有点限制。</p>
</li>
<li>
<p>cglib动态代理是通过继承来实现的，底层则是借助asm(Java 字节码操控框架)来实现的（采用字节码的方式，给A类创建一个子类B，子类B使用方法拦截的技术拦截所有父类的方法调用）。</p>
</li>
<li>
<p>优缺点：</p>
<ul>
<li><strong>jdk动态代理有一定的局限性，只能基于接口。</strong></li>
<li><strong>cglib这种第三方类库实现的动态代理应用更加广泛，且在效率上更有优势。但无法处理final的情况，通过继承。</strong></li>
</ul>
</li>
</ul>
<h2 id="17-jdk动态代理与cglib动态代理的区别">17. jdk动态代理与cglib动态代理的区别</h2>
<ul>
<li>jdk动态代理只能对实现了接口的类生成代理，而不能针对类 ;</li>
<li>cglib是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法 ; 因为是继承，所以该类或方法最好不要声明成final ，final可以阻止继承和多态。</li>
</ul>
<p>详情：<a href="/pages/3830a5/#%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86%E3%80%81%E4%BC%98%E7%BC%BA%E7%82%B9%E3%80%81%E4%B8%A4%E8%80%85%E5%8C%BA%E5%88%AB">实现原理、优缺点、两者区别</a></p>
<h2 id="18-写出三种单例模式的实现">18. 写出三种单例模式的实现</h2>
<h4 id="18-1-单例模式之饿汉式">18.1 单例模式之饿汉式</h4>
<p>在类加载时就初始化一个类对象，使用静态加载，但是在类加载时就实例化对象，单例对象较大的时候会影响系统加载速度</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"This is constructor."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> getInstance <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h4 id="18-2-延迟加载的singleton">18.2 延迟加载的singleton</h4>
<p>只有在访问到单例对象的时候才去检查和实例化单例对象，满足延迟加载，但多线程访问时需要加线程同步，影响访问效率</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazySingleton</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> instance <span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token class-name">LazySingleton</span> getInstance <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//对于多线程访问的需加synchronized</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazySingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span></code></pre>
<h4 id="18-3-使用静态内部类来作为singleton的容器">18.3 使用静态内部类来作为singleton的容器</h4>
<p>既能延迟加载，又能保证线程安全</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticSingleton</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">private</span> <span class="token class-name">StaticSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">&#123;</span> <span class="token comment">//私有内部类在StaticSingleton 加载时，不初始化</span>
        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">StaticSingleton</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StaticSingleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">StaticSingleton</span> getInstance <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>
<h2 id="19-请结合OO设计理念，谈谈访问修饰符public、private、protected、default在应用设计中的作用。">19. 请结合OO设计理念，谈谈访问修饰符public、private、protected、default在应用设计中的作用。</h2>
<ul>
<li>OO 即 Object Oriented 面向对象的设计模式。</li>
<li>public：Java语言中访问限制最宽的修饰符，一般称之为“公共的”。被其修饰的类、属性以及方法不仅可以跨类访问，而且允许跨包（package）访问。</li>
<li>private：Java语言中对访问权限限制的最窄的修饰符，一般称之为“私有的”。被其修饰的类、属性以及方法只能被该类的对象访问，其子类不能访问，更不能允许跨包访问。</li>
<li>protected：介于public 和 private 之间的一种访问修饰符，一般称之为“保护形”。被其修饰的类、属性以及方法只能被类本身的方法及子类访问，即使子类在不同的包中也可以访问。</li>
<li>default：即不加任何访问修饰符，通常称为“默认访问模式“。该模式下，只允许在同一个包中进行访问。</li>
<li>作用域基本如下，越往下越小。
<table>
<thead>
<tr>
<th style="text-align:center">作用域</th>
<th style="text-align:center">当前类</th>
<th style="text-align:center">同一package</th>
<th style="text-align:center">子孙类</th>
<th style="text-align:center">其它package</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>public</strong></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
</tr>
<tr>
<td style="text-align:center"><strong>protected</strong></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:center"><strong>default</strong></td>
<td style="text-align:center">√</td>
<td style="text-align:center">√</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
</tr>
<tr>
<td style="text-align:center"><strong>private</strong></td>
<td style="text-align:center">√</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
<td style="text-align:center">×</td>
</tr>
</tbody>
</table>
</li>
</ul>
<h2 id="20-深拷贝和浅拷贝区别">20. 深拷贝和浅拷贝区别</h2>
<p><strong><code>浅拷贝</code></strong> 基本类型拷贝值，引用类型只拷贝引用地址。</p>
<p><strong><code>深拷贝</code></strong> 引用类型也是拷贝他的值，重新生成的对像，clone出来对象与原对象互不影响。</p>
<h2 id="21-如何在父类中为子类自动完成所有的hashcode和equals实现？这么做有何优劣？">21. 如何在父类中为子类自动完成所有的hashcode和equals实现？这么做有何优劣？</h2>
<p>父类中重写hashcode和equals即可</p>
<p>优点：子类中我们不用再写。</p>
<p>缺点：有时候父类中equals和hashcode方法不满足我们的需求，需要重写。</p>
<h2 id="22-说一说你对java-lang-Object对象中hashCode和equals方法的理解。在什么场景下需要重新实现这两个方法？">22. 说一说你对java.lang.Object对象中hashCode和equals方法的理解。在什么场景下需要重新实现这两个方法？</h2>
<ul>
<li>hashCode与equals方法都是Java Object对象中的方法，也就是说Java的一切对象都提供这两个方法。</li>
<li>当集合要添加新的元素时，首先会调用这个元素的hashCode方法，定位到它的物理位置；<br>
如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了；<br>
如果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址。<br>
所以这里存在一个冲突解决的问题，这个时候就需要重写。</li>
</ul>
<h2 id="23-有没有可能2个不相等的对象有相同的hashcode？">23. 有没有可能2个不相等的对象有相同的hashcode？</h2>
<ul>
<li>hashCode是所有java对象的固有方法；</li>
<li>如果不重载的话，返回的实际上是 <strong>该对象在jvm堆上的内存地址</strong> ，而不同对象的内存地址肯定不同，所以这个hashCode也就肯定不同了。</li>
<li>如果重载了的话，由于采用的算法的问题，有可能导致两个不同对象的hashCode相同。</li>
</ul>
<h2 id="24-这样的a-hashcode-有什么用，与a-equals-b-有什么关系。">24. 这样的a.hashcode() 有什么用，与a.equals(b)有什么关系。</h2>
<ul>
<li>hashCode() 的作用是获取哈希码，也称为散列码；它实际上是返回一个int整数。这个哈希码的作用是确定该对象在哈希表中的索引位置。</li>
<li>equals() 主要是用于比对两者的对象是否相同，相对于hashCode()是比较简单的。</li>
<li>两者主要在数据的存储方面有联系；</li>
<li>equals()的时间复杂度为O(n)，而hashCode()判断是否有相同元素的代价，只是一次哈希计算，时间复杂度为O(1)，这极大地提高了数据的存储性能。</li>
<li>当hashcode有冲突时，容器就能判断：这个新加入的元素已经存在，需要另作处理：覆盖掉原来的元素（key）或舍弃。</li>
<li>此时就需要再进行一个equals()的比对，只有当equals()也返回true的时候，才会认为元素重复，舍弃存储</li>
</ul>
<h2 id="25-数组和链表数据结构描述，各自的时间复杂度。">25. 数组和链表数据结构描述，各自的时间复杂度。</h2>
<h4 id="25-1-各自的特点">25.1 各自的特点</h4>
<ul>
<li>
<p>两种数据结构都是线性表，在排序和查找等算法中都有广泛的应用</p>
</li>
<li>
<p>数组：<br>
数组是将元素在内存中连续存放，由于每个元素占用内存相同，可以通过下标迅速访问数组中任何元素。但是如果要在数组中增加一个元素，需要移动大量元素（插入时），在内存中空出一个元素的空间，然后将要增加的元素放在其中。同样的道理，如果想删除一个元素，同样需要移动大量元素去填掉被移动的元素。如果应用需要快速访问数据，很少或不插入和删除元素，就应该用数组。</p>
</li>
<li>
<p>链表：<br>
链表恰好相反，链表中的元素在内存中不是顺序存储的，而是通过存在元素中的指针联系到一起。比如：上一个元素有个指针指到下一个元素，以此类推，直到最后一个元素。如果要访问链表中一个元素，需要从第一个元素开始，一直找到需要的元素位置。但是增加和删除一个元素对于链表数据结构就非常简单了，只要修改元素中的指针就可以了。如果应用需要经常插入和删除元素你就需要用链表数据结构了。</p>
</li>
</ul>
<h4 id="25-2-数组和链表的区别">25.2 数组和链表的区别</h4>
<ol>
<li>从逻辑结构角度来看：
<ul>
<li>数组必须事先定义固定的长度（元素个数），不能适应数据动态地增减的情况。当数据增加时，可能超出原先定义的元素个数；当数据减少时，造成内存浪费。</li>
<li>链表动态地进行存储分配，可以适应数据动态地增减的情况，且可以方便地插入、删除数据项。（数组中插入、删除数据项时，需要移动其它数据项）</li>
</ul>
</li>
<li>数组元素在栈区，链表元素在堆区；</li>
<li>从内存存储角度来看：
<ul>
<li>(静态)数组从栈中分配空间, 对于程序员方便快速,但自由度小。</li>
<li>链表从堆中分配空间, 自由度大但申请管理比较麻烦。</li>
<li>数组利用下标定位，时间复杂度为O(1)，链表定位元素时间复杂度O(n)；</li>
<li>数组插入或删除元素的时间复杂度O(n)，链表的时间复杂度O(1)。</li>
</ul>
</li>
</ol>
<h2 id="26-error和exception的区别，CheckedException，RuntimeException的区别。">26. error和exception的区别，CheckedException，RuntimeException的区别。</h2>
<ul>
<li>
<p>首先Exception和Error都是继承于Throwable 类，在 Java 中只有 Throwable 类型的实例才可以被抛出（throw）或者捕获（catch），它是异常处理机制的基本组成类型。</p>
</li>
<li>
<p>Exception 是程序正常运行过程中可以预料到的意外情况，并且应该被开发者捕获，进行相应的处理。</p>
</li>
<li>
<p>Error是java程序运行中不可预料的异常情况（正常情况下不大可能出现的情况），这种异常发生以后，会直接导致JVM不可处理或者不可恢复的情况。所以这种异常不可能抓取到，比如OutOfMemoryError、NoClassDefFoundError等。【表示由JVM所侦测到的无法预期的错误，由于这是属于JVM层次的严重错误 ，导致JVM无法继续执行，因此，这是不可捕捉到的，无法采取任何恢复的操作，顶多只能显示错误信息。 Error类体系描述了Java运行系统中的内部错误以及资源耗尽的情形。应用程序不应该抛出这种类型的对象(一般是由虚拟机抛出)。假如出现这种错误，除了尽力使程序安全退出外，在其他方面是无能为力的。】</p>
</li>
<li>
<p>其中的Exception又分为检查性异常（checked）和非检查性异常（unchecked）（也叫RuntimeException）。</p>
</li>
<li>
<p>两个根本的区别在于：</p>
<ul>
<li>检查性异常 必须在编写代码时，使用try catch捕获（比如：IOException异常）。</li>
<li>非检查性异常 在代码编写使，可以忽略捕获操作（比如：ArrayIndexOutOfBoundsException），这种异常是在代码编写或者使用过程中通过规范可以避免发生的，具体根据需要来判断是否需要捕获，并不会在编译器强制要求。</li>
</ul>
</li>
</ul>
<h2 id="27-常见运行时异常-RuntimeException">27. 常见运行时异常 (RuntimeException)</h2>
<ul>
<li>NullPointerException (空指针异常)</li>
<li>IllegalArgumentException (传递非法参数异常)</li>
<li>ClassCastException (类转换异常)</li>
<li>IndexOutOfBoundsException (下标越界异常)</li>
<li>ArrayIndexOutOfBoundsException (数组越界异常)</li>
<li>ArrayStoreException (数据存储异常，操作数组时类型不一致)</li>
<li>NumberFormatException (数字格式异常)</li>
<li>BufferOverflowException (缓冲区溢出异常)</li>
<li>AruthmeticException (算术异常)</li>
</ul>
<h2 id="28-常见非运行时异常-CheckedException">28. 常见非运行时异常 (CheckedException)</h2>
<ul>
<li>IOException (IO 操作异常)</li>
<li>ClassNotFoundException (找不到指定 class 的异常)</li>
<li>FileNotFoundException (文件不存在异常)</li>
<li>SQLException (SQL语句异常）</li>
<li>InterruptedException (中断异常-调用线程睡眠时候)</li>
</ul>
<h2 id="29-常见错误-Error">29. 常见错误 (Error)</h2>
<ul>
<li>OutOfMemoryError (内存溢出错误)</li>
<li>NoClassDefFoundError (找不到 class 定义错误)</li>
<li>StackOverflowError (深递归导致栈被耗尽而抛出的错误)</li>
</ul>
<h2 id="30-在自己的代码中，如果创建一个java-lang-String类，这个类是否可以被类加载器加载？为什么？">30. 在自己的代码中，如果创建一个java.lang.String类，这个类是否可以被类加载器加载？为什么？</h2>
<p><strong>不能</strong></p>
<p><img data-src="/assets/img/2021/01-30.png" alt="JVM的四种类加载器" title="JVM的四种类加载器"></p>
<p>Java使用的是 <strong>双亲委托机制</strong> ：如果一个类加载器收到了类加载的请求，它首先不会自己尝试去加载这个类，而是把这个请求委派给父类加载器（BootStrap），每一个层次的类加载器都是加此，因此所有的加载请求最终到达顶层的启动类加载器，只有当父类加载器反馈自己无法完成加载请求时（指它的搜索范围没有找到所需的类），子类加载器才会尝试自己去加载。</p>
<p>因此，当你创建一个java.lang.String类时，启动类加载器首先加载的是java.lang.String本类，<br>
加载你自己的java.lang.String类时，就会由虚拟机抛出的 <strong>java.lang.SecurityException:Prohibited package name:java.lang</strong> 异常。</p>
<h2 id="31-什么是向下转型和向上转型">31. 什么是向下转型和向上转型?</h2>
<ul>
<li>面向对象的转型只会发生在具有继承关系的父子类中（接口也是继承的一种）</li>
<li>向上转型：其核心目的在于参数的统一上，根本不需要强制类型转换。<br>
向下转型：是为了操作子类定义的特殊功能，需要强制类型转换，可是现在存在的问题是：向下转型其实是一种非常不安全的操作，因为为编译的时候，程序不会报错，而在运行的时候会报错。</li>
</ul>
<h2 id="32-在jdk1-5中，引入了泛型，泛型的存在是用来解决什么问题。">32. 在jdk1.5中，引入了泛型，泛型的存在是用来解决什么问题。</h2>
<ul>
<li>
<p><strong>泛型是用来解决向下转型时所带来的安全隐患（ClassCastException）</strong></p>
</li>
<li>
<p>泛型的核心意义在于：类在进行定义的时候可以使用一个标记，此标记就表示类中属性或者方法以及参数的类型，标记在使用的时候，才会去动态的设置类型。</p>
</li>
</ul>
<h2 id="33-Java中的HashSet内部是如何工作的。">33. Java中的HashSet内部是如何工作的。</h2>
<ul>
<li>HashSet 的内部采用 HashMap来实现。</li>
<li>由于 Map 需要 key 和 value，所以HashSet中所有 key 的都有一个默认 value。</li>
<li>类似于 HashMap，HashSet 不允许重复的 key，只允许有一个null key，意思就是 HashSet 中只允许存储一个 null 对象。</li>
<li>HashSet 把存储的值作为 key。</li>
</ul>
<h2 id="34-什么是序列化，怎么序列化，为什么序列化，反序列化会遇到什么问题，如何解决？">34. 什么是序列化，怎么序列化，为什么序列化，反序列化会遇到什么问题，如何解决？</h2>
<ul>
<li>序列化：把对象转换为字节序列的过程称为对象的序列化。</li>
<li>反序列化：把字节序列恢复为对象的过程称为对象的反序列化。</li>
<li>为什么序列化：序列化是为了将一个对象的状态（各个属性值）保存起来，然后在适当的时候再获得。</li>
<li>怎么序列化：实现Serializable接口即可</li>
<li>反序列化会遇到什么问题：随着版本的迭代，可能出现不认识旧数据的bug</li>
<li>解决办法：实现 Serializable 接口的时候，一定要给这个 <strong>serialVersionUID</strong> 赋值，赋值为 <strong>1L</strong> 即可。</li>
</ul>
<h2 id="35-HTTP-GET和-HTTP-POST-的区别是什么？">35. HTTP GET和 HTTP POST 的区别是什么？</h2>
<ol>
<li>GET参数通过URL传递，POST放在Request body中。</li>
<li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li>
<li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li>
<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>
<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>
<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>
<li>GET产生的URL地址可以被Bookmark，而POST不可以。</li>
<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>
<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>
</ol>
<blockquote>
<p><strong>但是GET和POST本质上都是TCP链接，并无差别。只是由于HTTP的规定和浏览器/服务器的限制，导致他们在应用过程中体现出一些不同。</strong></p>
</blockquote>
<h2 id="36-java8的新特性">36. java8的新特性</h2>
<ul>
<li>Lambda表达式和函数式接口</li>
<li>接口的默认方法和静态方法</li>
<li>方法引用</li>
<li>重复注解</li>
<li>更好的类型推断</li>
<li>Stream流</li>
</ul>
<p>详解：<a href="https://www.aliang.link/pages/cc01c3/" title="点我查看">JAVA8 新特性</a></p>
<h2 id="致谢">致谢</h2>
<ol>
<li><a href="https://github.com/0voice/interview_internal_reference" title="点我查看原文">interview_internal_reference</a></li>
<li><a href="https://blog.csdn.net/kevin_darkelf/article/details/11371353" title="点我查看原文">继承、实现、依赖、关联、聚合、组合的联系与区别</a></li>
<li><a href="https://blog.csdn.net/weixin_42656794/article/details/90700595" title="点我查看原文">IO模型有哪些，讲讲你理解的nio ，他和bio，aio的区别是啥，谈谈reactor模型</a></li>
<li><a href="https://blog.csdn.net/riemann_/article/details/86849078" title="点我查看原文">描述Java动态代理的几种实现方式，分别说出相应的优缺点。</a></li>
<li><a href="https://www.csdn.net/tags/MtTacgwsNzE5MjEtYmxvZwO0O0OO0O0O.html" title="点我查看原文">动态代理的几种实现方式</a></li>
<li><a href="https://blog.csdn.net/gsw204/article/details/52452873" title="点我查看原文">Java单例模式的三种实现方式</a></li>
<li><a href="https://blog.csdn.net/riemann_/article/details/87217229" title="点我查看原文">Java深入理解深拷贝和浅拷贝区别</a></li>
<li><a href="https://blog.csdn.net/riemann_/article/details/87564524" title="点我查看原文">数组和链表数据结构描述，各自的时间复杂度</a></li>
<li><a href="https://blog.csdn.net/riemann_/article/details/87522352" title="点我查看原文">Java异常error和exception的区别，CheckedException，RuntimeException的区别。</a></li>
<li><a href="http://www.hellojava.com/a/90595.html" title="点我查看原文">Java中Error和Exception的异同以及运行时异常（Runtime exception)与检查型异常（checked exception）的区别</a></li>
<li><a href="https://www.cnblogs.com/idea360/p/12377464.html" title="点我查看原文">JVM类加载器是否可以加载自定义的String</a></li>
<li><a href="https://www.jianshu.com/p/1280aa1ca58a" title="点我查看原文">JAVA基础面试试题及答案（阿里面试题-JAVA基础篇）</a></li>
</ol>
]]></content>
      <categories>
        <category>面试总结</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>面试问题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试总结-Redis篇</title>
    <url>//blog/210607.html</url>
    <content><![CDATA[<h2 id="4-01-使用Redis有哪些好处">4.01 使用Redis有哪些好处</h2>
<ul>
<li>速度快，因为数据存在内存中，类似于HashMap，HashMap的优势就是查找和操作的时间复杂度都是O(1)</li>
<li>支持丰富数据类型，支持string，list，set，sorted set，hashsz</li>
<li>支持事务，操作都是原子性，所谓的原子性就是对数据的更改要么全部执行，要么全部不执行</li>
<li>丰富的特性：可用于缓存，消息，按key设置过期时间，过期后将会自动删除</li>
</ul>
<span id="more"></span>
<h2 id="4-02-redis-最适合的场景">4.02 redis 最适合的场景</h2>
<h3 id="4-02-1-缓存">4.02.1 缓存</h3>
<p>缓存现在几乎是所有中大型网站都在用的必杀技，合理的利用缓存不仅能够提升网站访问速度，还能大大降低数据库的压力。Redis提供了键过期功能，也提供了灵活的键淘汰策略，所以，现在Redis用在缓存的场合非常多。</p>
<h3 id="4-02-2-排行榜">4.02.2 排行榜</h3>
<p>很多网站都有排行榜应用的，如京东的月度销量榜单、商品按时间的上新排行榜等。Redis提供的有序集合数据类构能实现各种复杂的排行榜应用。</p>
<h3 id="4-02-3-计数器">4.02.3 计数器</h3>
<p>什么是计数器，如电商网站商品的浏览量、视频网站视频的播放数等。为了保证数据实时效，每次浏览都得给+1，并发量高时如果每次都请求数据库操作无疑是种挑战和压力。Redis提供的incr命令来实现计数器功能，内存操作，性能非常好，非常适用于这些计数场景。</p>
<h3 id="4-02-4-分布式会话">4.02.4 分布式会话</h3>
<p>集群模式下，在应用不多的情况下一般使用容器自带的session复制功能就能满足，当应用增多相对复杂的系统中，一般都会搭建以Redis等内存数据库为中心的session服务，session不再由容器管理，而是由session服务及内存数据库管理。</p>
<h3 id="4-02-5-分布式锁">4.02.5 分布式锁</h3>
<p>在很多互联网公司中都使用了分布式技术，分布式技术带来的技术挑战是对同一个资源的并发访问，如全局ID、减库存、秒杀等场景，并发量不大的场景可以使用数据库的悲观锁、乐观锁来实现，但在并发量高的场合中，利用数据库锁来控制资源的并发访问是不太理想的，大大影响了数据库的性能。可以利用Redis的 <strong>setnx</strong> 功能来编写分布式的锁，如果设置返回1说明获取锁成功，否则获取锁失败，实际应用中要考虑的细节要更多。</p>
<h3 id="4-02-6-最新列表">4.02.6 最新列表</h3>
<p>Redis列表结构，LPUSH可以在列表头部插入一个内容ID作为关键字，LTRIM可用来限制列表的数量，这样列表永远为N个ID，无需查询最新的列表，直接根据ID去到对应的内容页即可。</p>
<h3 id="4-02-7-社交网络">4.02.7 社交网络</h3>
<p>点赞、踩、关注/被关注、共同好友等是社交网站的基本功能，社交网站的访问量通常来说比较大，而且传统的关系数据库类型不适合存储这种类型的数据，Redis提供的哈希、集合等数据结构能很方便的的实现这些功能。</p>
<h3 id="4-02-8-消息系统">4.02.8 消息系统</h3>
<p>消息队列是大型网站必用中间件，如ActiveMQ、RabbitMQ、Kafka等流行的消息队列中间件，主要用于业务解耦、流量削峰及异步处理实时性低的业务。Redis提供了发布/订阅及阻塞队列功能，能实现一个简单的消息队列系统。另外，这个不能和专业的消息中间件相比。</p>
<h2 id="4-03-Redis-常见的性能问题都有哪些">4.03 Redis 常见的性能问题都有哪些</h2>
<h3 id="4-03-1-常见的性能问题">4.03.1 常见的性能问题</h3>
<ol>
<li>Master写内存快照，save命令调度rdbSave函数，会阻塞主线程的工作，当快照比较大时对性能影响是非常大的，会间断性暂停服务，所以Master最好不要写内存快照。</li>
<li>Master AOF持久化，如果不重写AOF文件，这个持久化方式对性能的影响是最小的，但是AOF文件会不断增大，AOF文件过大会影响Master重启的恢复速度。Master最好不要做任何持久化工作，包括内存快照和AOF日志文件，特别是不要启用内存快照做持久化,如果数据比较关键，某个Slave开启AOF备份数据，策略为每秒同步一次。</li>
<li>Master调用BGREWRITEAOF重写AOF文件，AOF在重写的时候会占大量的CPU和内存资源，导致服务load过高，出现短暂服务暂停现象。</li>
</ol>
<h3 id="4-03-2-如何解决">4.03.2 如何解决</h3>
<ol>
<li>Master最好不要做任何持久化工作，如RDB内存快照和AOF日志文件</li>
<li>如果数据比较重要，某个Slave开启AOF备份数据，策略设置为每秒同步一次</li>
<li>为了主从复制的速度和连接的稳定性，Master和Slave最好在同一个局域网内</li>
<li>尽量避免在压力很大的主库上增加从库</li>
<li>主从复制不要用图状结构，用单向链表结构更为稳定，即：Master &lt;- Slave1 &lt;- Slave2 &lt;- Slave3… 这样的结构方便解决单点故障问题，实现Slave对Master的替换。如果Master挂了，可以立刻启用Slave1做Master，其他不变。</li>
</ol>
<h2 id="4-04-MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据">4.04 MySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据</h2>
<p><strong>redis 内存数据集大小上升到一定大小的时候，就会施行数据淘汰策略。</strong></p>
<p><strong>redis 提供 6种数据淘汰策略：</strong></p>
<ul>
<li>voltile-lru：从已设置过期时间的数据集（server.db[i].expires）中挑选最近最少使用的数据淘汰</li>
<li>volatile-ttl：从已设置过期时间的数据集（server.db[i].expires）中挑选将要过期的数据淘汰</li>
<li>volatile-random：从已设置过期时间的数据集（server.db[i].expires）中任意选择数据淘汰</li>
<li>allkeys-lru：从数据集（server.db[i].dict）中挑选最近最少使用的数据淘汰</li>
<li>allkeys-random：从数据集（server.db[i].dict）中任意选择数据淘汰</li>
<li>no-enviction（驱逐）：不进行删除，达到最大内存时，直接返回错误信息。<br>
<strong>redis 默认使用no-enviction策略，来保证数据不被丢失；推荐使用voltile-lru策略</strong></li>
</ul>
<h2 id="4-15-redis集群如何保证一致性？">4.15 redis集群如何保证一致性？</h2>
<p>redis集群无法保证强一致性，但是redis的最终一致性会使master和slave的数据是最终一致。</p>
<p>redis的最终一致性通过主从复制来实现：</p>
<ul>
<li>
<p>redis的复制功能是支持多个数据库之间的数据同步。一类是主数据库（master）一类是从数据库（slave），主数据库可以进行读写操作，当发生写操作的时候自动将数据同步到从数据库，而从数据库一般是只读的，并接收主数据库同步过来的数据，一个主数据库可以有多个从数据库，而一个从数据库只能有一个主数据库。</p>
</li>
<li>
<p>通过redis的复制功能可以很好的实现数据库的读写分离，提高服务器的负载能力。主数据库主要进行写操作，而从数据库负责读操作。</p>
</li>
</ul>
<h2 id="4-06-Redis的同步机制了解么？">4.06 Redis的同步机制了解么？</h2>
<p>Redis的同步机制有 <strong>全同步</strong> 和 <strong>部分同步</strong> 两种。</p>
<p>全同步是指<strong>slave启动时进行的初始化同步</strong>。</p>
<ol>
<li>当一个从数据库启动时，会向主数据库发送sync命令，</li>
<li>主数据库接收到sync命令后会开始在后台保存快照（执行rdb操作），并将保存期间接收到的命令缓存起来</li>
<li>当快照完成后，redis会将快照文件和所有缓存的命令发送给从数据库。</li>
<li>从数据库收到后，会载入快照文件并执行收到的缓存的命令。</li>
</ol>
<p>部分同步是指<strong>Redis运行过程中的修改同步</strong>。</p>
<ol>
<li>master收到一个操作，然后判断是否需要同步到salve。</li>
<li>如果需要同步，则将操作记录到aof文件中。</li>
<li>遍历所有的salve，将操作的指令和参数写入到savle的回复缓存中。</li>
<li>一旦slave对应的socket发送缓存中有空间写入数据，即将数据通过socket发出去。</li>
</ol>
<h2 id="4-07-是否使用过Redis集群，集群的原理是什么？">4.07 是否使用过Redis集群，集群的原理是什么？</h2>
<p>Redis Sentinel（哨兵）模式保证高可用，在master宕机时会自动将slave提升为master，继续提供服务。</p>
<p>Redis Cluster 基本架构来保证扩展性，在单个redis内存不足时，使用Cluster进行分片存储。</p>
<h2 id="4-08-redis相比memcached有哪些优势？">4.08 redis相比memcached有哪些优势？</h2>
<ul>
<li>memcached所有的值均是简单的字符串，redis作为其替代者，支持更为丰富的数据类型</li>
<li>redis的速度比memcached快很多</li>
<li>redis可以持久化其数据</li>
</ul>
<h2 id="4-09-Redis与Memcache的区别都有哪些？">4.09 Redis与Memcache的区别都有哪些？</h2>
<ol>
<li>Redis不仅仅支持简单的k/v类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li>
<li>Redis支持数据的备份，即master-slave模式的数据备份。</li>
<li>Redis支持数据的持久化，可以将内存中的数据保持在磁盘中，重启的时候可以再次加载进行使用</li>
<li>value大小，redis最大可以达到1GB，memcache只有1MB。</li>
</ol>
<h2 id="参考链接">参考链接</h2>
<ol>
<li><a href="https://github.com/0voice/interview_internal_reference" title="点我查看原文">interview_internal_reference</a></li>
</ol>
]]></content>
      <categories>
        <category>面试总结</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>Redis</tag>
        <tag>面试问题</tag>
      </tags>
  </entry>
  <entry>
    <title>面试总结-JVM篇</title>
    <url>//blog/210608.html</url>
    <content><![CDATA[<h2 id="2-01-什么情况下会发生栈内存溢出。">2.01 什么情况下会发生栈内存溢出。</h2>
<p>栈溢出（StackOverflowError）就是方法执行时创建的栈帧超过了栈的深度。那么最有可能的就是方法递归调用产生这种结果（方法a里面继续调a方法）。</p>
<p>我们可以使用参数 <strong>-Xss</strong> （比如-Xmx2M）去调整JVM栈的大小来扩大栈的深度。</p>
<span id="more"></span>
<h2 id="2-01-什么情况下会发生栈内存溢出。-2">2.01 什么情况下会发生栈内存溢出。</h2>
<p>堆溢出(OutOfMemoryError:java heap space)就是方法执行时创建的栈帧超过了栈的深度。那么最有可能的就是方法递归调用产生这种结果（方法a里面继续调a方法）。</p>
<p>我们可以使用参数 <strong>-Xmx</strong> （比如-Xmx4096M）去调整堆的总大小来扩大栈的深度。</p>
<h2 id="2-01-JVM的内存结构，Eden和Survivor比例。">2.01 JVM的内存结构，Eden和Survivor比例。</h2>
<h2 id="2-01-JVM内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为Eden和Survivor。">2.01 JVM内存为什么要分成新生代，老年代，持久代。新生代中为什么要分为Eden和Survivor。</h2>
<h2 id="2-01-JVM中一次完整的GC流程是怎样的，对象如何晋升到老年代，说说你知道的几种主要的JVM参数。">2.01 JVM中一次完整的GC流程是怎样的，对象如何晋升到老年代，说说你知道的几种主要的JVM参数。</h2>
<h2 id="2-01-你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms和G1，包括原理，流程，优缺点。">2.01 你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms和G1，包括原理，流程，优缺点。</h2>
<h2 id="2-01-垃圾回收算法的实现原理。">2.01 垃圾回收算法的实现原理。</h2>
<h2 id="2-01-当出现了内存溢出，你怎么排错。">2.01 当出现了内存溢出，你怎么排错。</h2>
<h2 id="2-01-JVM内存模型的相关知识了解多少，比如重排序，内存屏障，happen-before，主内存，工作内存等。">2.01 JVM内存模型的相关知识了解多少，比如重排序，内存屏障，happen-before，主内存，工作内存等。</h2>
<h2 id="2-01-简单说说你了解的类加载器，可以打破双亲委派么，怎么打破。">2.01 简单说说你了解的类加载器，可以打破双亲委派么，怎么打破。</h2>
<h2 id="2-01-讲讲JAVA的反射机制。">2.01 讲讲JAVA的反射机制。</h2>
<h2 id="2-01-你们线上应用的JVM参数有哪些。">2.01 你们线上应用的JVM参数有哪些。</h2>
<h2 id="2-01-g1和cms区别-吞吐量优先和响应优先的垃圾收集器选择。">2.01 g1和cms区别,吞吐量优先和响应优先的垃圾收集器选择。</h2>
<h2 id="2-01-怎么打出线程栈信息。">2.01 怎么打出线程栈信息。</h2>
<h2 id="参考链接">参考链接</h2>
<ol>
<li><a href="https://github.com/0voice/interview_internal_reference" title="点我查看原文">interview_internal_reference</a></li>
</ol>
]]></content>
      <categories>
        <category>面试总结</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>编程</tag>
        <tag>面试问题</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
</search>
